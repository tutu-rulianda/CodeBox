/**
 * @license
 * Copyright 2020 Google LLC. All Rights Reserved.
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 * =============================================================================
 */
!function(t,n){"object"==typeof exports&&"undefined"!=typeof module?n(exports):"function"==typeof define&&define.amd?define(["exports"],n):n((t=t||self).tf=t.tf||{})}(this,(function(t){"use strict";var n=function(t,e){return(n=Object.setPrototypeOf||{__proto__:[]}instanceof Array&&function(t,n){t.__proto__=n}||function(t,n){for(var e in n)n.hasOwnProperty(e)&&(t[e]=n[e])})(t,e)};function e(t,e){function r(){this.constructor=t}n(t,e),t.prototype=null===e?Object.create(e):(r.prototype=e.prototype,new r)}function r(t,n,e,r){return new(e||(e=Promise))((function(o,a){function i(t){try{s(r.next(t))}catch(t){a(t)}}function u(t){try{s(r.throw(t))}catch(t){a(t)}}function s(t){t.done?o(t.value):new e((function(n){n(t.value)})).then(i,u)}s((r=r.apply(t,n||[])).next())}))}function o(t,n){var e,r,o,a,i={label:0,sent:function(){if(1&o[0])throw o[1];return o[1]},trys:[],ops:[]};return a={next:u(0),throw:u(1),return:u(2)},"function"==typeof Symbol&&(a[Symbol.iterator]=function(){return this}),a;function u(a){return function(u){return function(a){if(e)throw new TypeError("Generator is already executing.");for(;i;)try{if(e=1,r&&(o=2&a[0]?r.return:a[0]?r.throw||((o=r.return)&&o.call(r),0):r.next)&&!(o=o.call(r,a[1])).done)return o;switch(r=0,o&&(a=[2&a[0],o.value]),a[0]){case 0:case 1:o=a;break;case 4:return i.label++,{value:a[1],done:!1};case 5:i.label++,r=a[1],a=[0];continue;case 7:a=i.ops.pop(),i.trys.pop();continue;default:if(!(o=i.trys,(o=o.length>0&&o[o.length-1])||6!==a[0]&&2!==a[0])){i=0;continue}if(3===a[0]&&(!o||a[1]>o[0]&&a[1]<o[3])){i.label=a[1];break}if(6===a[0]&&i.label<o[1]){i.label=o[1],o=a;break}if(o&&i.label<o[2]){i.label=o[2],i.ops.push(a);break}o[2]&&i.ops.pop(),i.trys.pop();continue}a=n.call(t,i)}catch(t){a=[6,t],r=0}finally{e=o=0}if(5&a[0])throw a[1];return{value:a[0]?a[1]:void 0,done:!0}}([a,u])}}}var a=function(){function t(t,n){this.backend=t,this.dataMover=n,this.data=new WeakMap,this.dataIdsCount=0}return t.prototype.get=function(t){return this.data.has(t)||this.dataMover.moveData(this.backend,t),this.data.get(t)},t.prototype.set=function(t,n){this.dataIdsCount++,this.data.set(t,n)},t.prototype.has=function(t){return this.data.has(t)},t.prototype.delete=function(t){return this.dataIdsCount--,this.data.delete(t)},t.prototype.numDataIds=function(){return this.dataIdsCount},t}(),i=function(){function t(){}return t.prototype.time=function(t){return u("time")},t.prototype.read=function(t){return u("read")},t.prototype.readSync=function(t){return u("readSync")},t.prototype.numDataIds=function(){return u("numDataIds")},t.prototype.disposeData=function(t){return u("disposeData")},t.prototype.write=function(t,n,e){return u("write")},t.prototype.move=function(t,n,e,r){return u("move")},t.prototype.memory=function(){return u("memory")},t.prototype.floatPrecision=function(){return u("floatPrecision")},t.prototype.epsilon=function(){return 32===this.floatPrecision()?1e-7:1e-4},t.prototype.batchMatMul=function(t,n,e,r){return u("batchMatMul")},t.prototype.fusedBatchMatMul=function(t){t.a,t.b,t.transposeA,t.transposeB,t.bias,t.activation,t.preluActivationWeights;return u("fusedBatchMatMul")},t.prototype.slice=function(t,n,e){return u("slice")},t.prototype.stridedSlice=function(t,n,e,r){return u("stridedSlice")},t.prototype.unstack=function(t,n){return u("unstack")},t.prototype.reverse=function(t,n){return u("reverse")},t.prototype.concat=function(t,n){return u("concat")},t.prototype.neg=function(t){return u("neg")},t.prototype.add=function(t,n){return u("add")},t.prototype.addN=function(t){return u("addN")},t.prototype.subtract=function(t,n){return u("subtract")},t.prototype.multiply=function(t,n){return u("multiply")},t.prototype.realDivide=function(t,n){return u("realDivide")},t.prototype.floorDiv=function(t,n){return u("floorDiv")},t.prototype.sum=function(t,n){return u("sum")},t.prototype.prod=function(t,n){return u("prod")},t.prototype.unsortedSegmentSum=function(t,n,e){return u("unsortedSegmentSum")},t.prototype.argMin=function(t,n){return u("argMin")},t.prototype.argMax=function(t,n){return u("argMax")},t.prototype.equal=function(t,n){return u("equal")},t.prototype.notEqual=function(t,n){return u("notEqual")},t.prototype.less=function(t,n){return u("less")},t.prototype.lessEqual=function(t,n){return u("lessEqual")},t.prototype.greater=function(t,n){return u("greater")},t.prototype.greaterEqual=function(t,n){return u("greaterEqual")},t.prototype.logicalNot=function(t){return u("logicalNot")},t.prototype.logicalAnd=function(t,n){return u("logicalAnd")},t.prototype.logicalOr=function(t,n){return u("logicalOr")},t.prototype.where=function(t){return u("where")},t.prototype.select=function(t,n,e){return u("select")},t.prototype.topk=function(t,n,e){return u("topk")},t.prototype.min=function(t,n){return u("min")},t.prototype.minimum=function(t,n){return u("minimum")},t.prototype.mod=function(t,n){return u("mod")},t.prototype.max=function(t,n){return u("max")},t.prototype.maximum=function(t,n){return u("maximum")},t.prototype.all=function(t,n){return u("all")},t.prototype.any=function(t,n){return u("any")},t.prototype.squaredDifference=function(t,n){return u("squaredDifference")},t.prototype.ceil=function(t){return u("ceil")},t.prototype.floor=function(t){return u("floor")},t.prototype.round=function(t){return u("round")},t.prototype.sign=function(t){return u("sign")},t.prototype.isNaN=function(t){return u("isNaN")},t.prototype.isInf=function(t){return u("isInf")},t.prototype.isFinite=function(t){return u("isFinite")},t.prototype.pow=function(t,n){return u("pow")},t.prototype.exp=function(t){return u("exp")},t.prototype.expm1=function(t){return u("expm1")},t.prototype.softmax=function(t,n){return u("softmax")},t.prototype.log=function(t){return u("log")},t.prototype.log1p=function(t){return u("log1p")},t.prototype.sqrt=function(t){return u("sqrt")},t.prototype.rsqrt=function(t){return u("rsqrt")},t.prototype.square=function(t){return u("square")},t.prototype.reciprocal=function(t){return u("reciprocal")},t.prototype.relu=function(t){return u("relu")},t.prototype.relu6=function(t){return u("relu6")},t.prototype.prelu=function(t,n){return u("prelu")},t.prototype.elu=function(t){return u("elu")},t.prototype.eluDer=function(t,n){return u("eluDer")},t.prototype.selu=function(t){return u("selu")},t.prototype.int=function(t){return u("int")},t.prototype.clip=function(t,n,e){return u("clip")},t.prototype.abs=function(t){return u("abs")},t.prototype.complexAbs=function(t){return u("complexAbs")},t.prototype.sigmoid=function(t){return u("sigmoid")},t.prototype.softplus=function(t){return u("softplus")},t.prototype.sin=function(t){return u("sin")},t.prototype.cos=function(t){return u("cos")},t.prototype.tan=function(t){return u("tan")},t.prototype.asin=function(t){return u("asin")},t.prototype.acos=function(t){return u("acos")},t.prototype.atan=function(t){return u("atan")},t.prototype.atan2=function(t,n){return u("atan2")},t.prototype.sinh=function(t){return u("sinh")},t.prototype.cosh=function(t){return u("cosh")},t.prototype.tanh=function(t){return u("tanh")},t.prototype.asinh=function(t){return u("asinh")},t.prototype.acosh=function(t){return u("acosh")},t.prototype.atanh=function(t){return u("atanh")},t.prototype.erf=function(t){return u("erf")},t.prototype.step=function(t,n){return u("step")},t.prototype.fusedConv2d=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return u("fusedConv2d")},t.prototype.conv2d=function(t,n,e){return u("conv2d")},t.prototype.conv2dDerInput=function(t,n,e){return u("conv2dDerInput")},t.prototype.conv2dDerFilter=function(t,n,e){return u("conv2dDerFilter")},t.prototype.fusedDepthwiseConv2D=function(t){t.input,t.filter,t.convInfo,t.bias,t.activation,t.preluActivationWeights;return u("fusedDepthwiseConv2D")},t.prototype.depthwiseConv2D=function(t,n,e){return u("depthwiseConv2D")},t.prototype.depthwiseConv2DDerInput=function(t,n,e){return u("depthwiseConv2DDerInput")},t.prototype.depthwiseConv2DDerFilter=function(t,n,e){return u("depthwiseConv2DDerFilter")},t.prototype.conv3d=function(t,n,e){return u("conv3d")},t.prototype.conv3dDerInput=function(t,n,e){return u("conv3dDerInput")},t.prototype.conv3dDerFilter=function(t,n,e){return u("conv3dDerFilter")},t.prototype.maxPool=function(t,n){return u("maxPool")},t.prototype.maxPoolBackprop=function(t,n,e,r){return u("maxPoolBackprop")},t.prototype.avgPool=function(t,n){return u("avgPool")},t.prototype.avgPoolBackprop=function(t,n,e){return u("avgPoolBackprop")},t.prototype.avgPool3d=function(t,n){return u("avgPool3d")},t.prototype.avgPool3dBackprop=function(t,n,e){return u("avgPool3dBackprop")},t.prototype.maxPool3d=function(t,n){return u("maxPool3d")},t.prototype.maxPool3dBackprop=function(t,n,e,r){return u("maxPool3dBackprop")},t.prototype.reshape=function(t,n){return u("reshape")},t.prototype.cast=function(t,n){return u("cast")},t.prototype.tile=function(t,n){return u("tile")},t.prototype.pad=function(t,n,e){return u("pad")},t.prototype.transpose=function(t,n){return u("transpose")},t.prototype.gather=function(t,n,e){return u("gather")},t.prototype.gatherND=function(t,n){return u("gatherND")},t.prototype.scatterND=function(t,n,e){return u("scatterND")},t.prototype.batchToSpaceND=function(t,n,e){return u("batchToSpaceND")},t.prototype.spaceToBatchND=function(t,n,e){return u("spaceToBatchND")},t.prototype.resizeBilinear=function(t,n,e,r){return u("resizeBilinear")},t.prototype.resizeBilinearBackprop=function(t,n,e){return u("resizeBilinearBackprop")},t.prototype.resizeNearestNeighbor=function(t,n,e,r){return u("resizeNearestNeighbor")},t.prototype.resizeNearestNeighborBackprop=function(t,n,e){return u("resizeNearestNeighborBackprop")},t.prototype.batchNorm=function(t,n,e,r,o,a){return u("batchNorm")},t.prototype.localResponseNormalization4D=function(t,n,e,r,o){return u("localResponseNormalization4D")},t.prototype.LRNGrad=function(t,n,e,r,o,a,i){return u("LRNGrad")},t.prototype.multinomial=function(t,n,e,r){return u("multinomial")},t.prototype.oneHot=function(t,n,e,r){return u("oneHot")},t.prototype.cumsum=function(t,n,e,r){return u("cumsum")},t.prototype.nonMaxSuppression=function(t,n,e,r,o){return u("nonMaxSuppression")},t.prototype.fft=function(t){return u("fft")},t.prototype.ifft=function(t){return u("ifft")},t.prototype.complex=function(t,n){return u("complex")},t.prototype.real=function(t){return u("real")},t.prototype.imag=function(t){return u("imag")},t.prototype.cropAndResize=function(t,n,e,r,o,a){return u("cropAndResize")},t.prototype.depthToSpace=function(t,n,e){return u("depthToSpace")},t.prototype.split=function(t,n,e){return u("split")},t.prototype.sparseToDense=function(t,n,e,r){return u("sparseToDense")},t.prototype.diag=function(t){return u("diag")},t.prototype.fill=function(t,n,e){return u("fill")},t.prototype.onesLike=function(t){return u("onesLike")},t.prototype.zerosLike=function(t){return u("zerosLike")},t.prototype.linspace=function(t,n,e){return u("linspace")},t.prototype.dispose=function(){return u("dispose")},t}();function u(t){throw new Error("'"+t+"' not yet implemented or not found in the registry. This kernel may not be supported by the tfjs backend you have chosen")}var s,c=function(){function t(t){this.global=t,this.flags={},this.flagRegistry={},this.urlFlags={},this.populateURLFlags()}return t.prototype.setPlatform=function(t,n){null!=this.platform&&console.warn("Platform "+this.platformName+" has already been set. Overwriting the platform with "+n+"."),this.platformName=t,this.platform=n},t.prototype.registerFlag=function(t,n,e){if(this.flagRegistry[t]={evaluationFn:n,setHook:e},null!=this.urlFlags[t]){var r=this.urlFlags[t];console.warn("Setting feature override from URL "+t+": "+r+"."),this.set(t,r)}},t.prototype.getAsync=function(t){return r(this,void 0,void 0,(function(){var n,e;return o(this,(function(r){switch(r.label){case 0:return t in this.flags?[2,this.flags[t]]:(n=this.flags,e=t,[4,this.evaluateFlag(t)]);case 1:return n[e]=r.sent(),[2,this.flags[t]]}}))}))},t.prototype.get=function(t){if(t in this.flags)return this.flags[t];var n=this.evaluateFlag(t);if(n instanceof Promise)throw new Error("Flag "+t+" cannot be synchronously evaluated. Please use getAsync() instead.");return this.flags[t]=n,this.flags[t]},t.prototype.getNumber=function(t){return this.get(t)},t.prototype.getBool=function(t){return this.get(t)},t.prototype.getFlags=function(){return this.flags},Object.defineProperty(t.prototype,"features",{get:function(){return this.flags},enumerable:!0,configurable:!0}),t.prototype.set=function(t,n){if(null==this.flagRegistry[t])throw new Error("Cannot set flag "+t+" as it has not been registered.");this.flags[t]=n,null!=this.flagRegistry[t].setHook&&this.flagRegistry[t].setHook(n)},t.prototype.evaluateFlag=function(t){if(null==this.flagRegistry[t])throw new Error("Cannot evaluate flag '"+t+"': no evaluation function found.");return this.flagRegistry[t].evaluationFn()},t.prototype.setFlags=function(t){this.flags=Object.assign({},t)},t.prototype.reset=function(){this.flags={},this.urlFlags={},this.populateURLFlags()},t.prototype.populateURLFlags=function(){var t=this;if(void 0!==this.global&&void 0!==this.global.location&&void 0!==this.global.location.search){var n,e,r=(n=this.global.location.search,e={},n.replace(/[?&]([^=?&]+)(?:=([^&]*))?/g,(function(t){for(var n=[],r=1;r<arguments.length;r++)n[r-1]=arguments[r];return l(e,n[0],n[1]),n.join("=")})),e);if("tfjsflags"in r)r.tfjsflags.split(",").forEach((function(n){var e=n.split(":"),r=e[0],o=e[1];t.urlFlags[r]=function(t,n){if("true"===(n=n.toLowerCase())||"false"===n)return"true"===n;if(""+ +n===n)return+n;throw new Error("Could not parse value flag value "+n+" for flag "+t+".")}(r,o)}))}},t}();function l(t,n,e){t[decodeURIComponent(n)]=decodeURIComponent(e||"")}function f(){return t.ENV}function p(){if(null==s){var t=void 0;if("undefined"!=typeof window)t=window;else if("undefined"!=typeof global)t=global;else if("undefined"!=typeof process)t=process;else{if("undefined"==typeof self)throw new Error("Could not find a global object");t=self}s=t}return s}function h(t,n){var e,r=(null==(e=p())._tfGlobals&&(e._tfGlobals=new Map),e._tfGlobals);if(r.has(t))return r.get(t);var o=n();return r.set(t,o),r.get(t)}t.ENV=null;var d=h("kernelRegistry",(function(){return new Map})),v=h("gradRegistry",(function(){return new Map}));function m(t,n){var e=k(t,n);return d.get(e)}function g(t){return v.get(t)}function y(t){for(var n=d.entries(),e=[];;){var r=n.next(),o=r.done,a=r.value;if(o)break;var i=a[0],u=a[1];i.split("_")[0]===t&&e.push(u)}return e}function b(t){var n=t.kernelName,e=t.backendName,r=k(n,e);d.has(r)&&console.warn("The kernel '"+n+"' for backend '"+e+"' is already registered"),d.set(r,t)}function w(t){var n=t.kernelName;v.has(n)&&f().getBool("DEBUG")&&console.warn("Overriding the gradient for '"+n+"'"),v.set(n,t)}function k(t,n){return n+"_"+t}function x(t){for(var n=t.length,e=0,r=0;n>0;)r=Math.random()*n|0,e=t[--n],t[n]=t[r],t[r]=e}function S(t,n,e){return Math.max(t,Math.min(n,e))}function E(t,n){if(!t)throw new Error("string"==typeof n?n:n())}function D(t,n,e){void 0===e&&(e=""),E(A(t,n),(function(){return e+" Shapes "+t+" and "+n+" must match"}))}function N(t){E(null!=t,(function(){return"The input to the tensor constructor must be a non-null value."}))}function I(t,n,e){if(void 0===n&&(n=[]),void 0===e&&(e=!1),null==n&&(n=[]),Array.isArray(t)||O(t)&&!e)for(var r=0;r<t.length;++r)I(t[r],n,e);else n.push(t);return n}function F(t){if(0===t.length)return 1;for(var n=t[0],e=1;e<t.length;e++)n*=t[e];return n}function A(t,n){if(t===n)return!0;if(null==t||null==n)return!1;if(t.length!==n.length)return!1;for(var e=0;e<t.length;e++)if(t[e]!==n[e])return!1;return!0}function T(t){return t%1==0}function M(t,n){return n<=t.length?t:t+" ".repeat(n-t.length)}function _(t,n){for(var e=1,r=-1,o=0;o<t.length;++o)if(t[o]>=0)e*=t[o];else if(-1===t[o]){if(-1!==r)throw Error("Shapes can only have 1 implicit size. Found -1 at dim "+r+" and dim "+o);r=o}else if(t[o]<0)throw Error("Shapes can not be < 0. Found "+t[o]+" at dim "+o);if(-1===r){if(n>0&&n!==e)throw Error("Size("+n+") must match the product of shape "+t);return t}if(0===e)throw Error("Cannot infer the missing size in ["+t+"] when there are 0 elements");if(n%e!=0)throw Error("The implicit shape can't be a fractional number. Got "+n+" / "+e);var a=t.slice();return a[r]=n/e,a}function B(t,n){var e=n.length;return E((t=null==t?n.map((function(t,n){return n})):[].concat(t)).every((function(t){return t>=-e&&t<e})),(function(){return"All values in axis param must be in range [-"+e+", "+e+") but got axis "+t})),E(t.every((function(t){return T(t)})),(function(){return"All values in axis param must be integers but got axis "+t})),t.map((function(t){return t<0?e+t:t}))}function R(t,n){for(var e=[],r=[],o=null!=n&&Array.isArray(n)&&0===n.length,a=null==n||o?null:B(n,t).sort(),i=0,u=0;u<t.length;++u){if(null!=a){if(a[i]===u&&1!==t[u])throw new Error("Can't squeeze axis "+u+" since its dim '"+t[u]+"' is not 1");(null==a[i]||a[i]>u)&&1===t[u]&&(e.push(t[u]),r.push(u)),a[i]<=u&&i++}1!==t[u]&&(e.push(t[u]),r.push(u))}return{newShape:e,keptDims:r}}function C(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else{if("bool"!==t)throw new Error("Unknown data type "+t);e=new Uint8Array(n)}return e}function P(t,n){var e=null;if(null==t||"float32"===t)e=new Float32Array(n);else if("int32"===t)e=new Int32Array(n);else if("bool"===t)e=new Uint8Array(n);else{if("string"!==t)throw new Error("Unknown data type "+t);e=new Array(n)}return e}function L(t,n){for(var e=0;e<t.length;e++){var r=t[e];if(isNaN(r)||!isFinite(r))throw Error("A tensor of type "+n+" being uploaded contains "+r+".")}}function z(t){return"bool"===t||"complex64"===t||"float32"===t||"int32"===t||"string"===t}function q(t,n){return"complex64"!==n&&(("float32"!==n||"complex64"===t)&&(("int32"!==n||"float32"===t||"complex64"===t)&&("bool"!==n||"bool"!==t)))}function O(t){return t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array}function W(t){if("float32"===t||"int32"===t)return 4;if("complex64"===t)return 8;if("bool"===t)return 1;throw new Error("Unknown dtype "+t)}function K(t){if(null==t)return 0;var n=0;return t.forEach((function(t){return n+=t.length})),n}function U(t){return"string"==typeof t||t instanceof String}function G(t){return"boolean"==typeof t}function V(t){return"number"==typeof t}function H(t){return Array.isArray(t)?H(t[0]):t instanceof Float32Array?"float32":t instanceof Int32Array||t instanceof Uint8Array?"int32":V(t)?"float32":U(t)?"string":G(t)?"bool":"float32"}function j(t){return!!(t&&t.constructor&&t.call&&t.apply)}function J(t,n){for(var e=n;e<t;++e)if(t%e==0)return e;return t}function Y(t){var n=t.length;if(n<2)return[];var e=new Array(n-1);e[n-2]=t[n-1];for(var r=n-3;r>=0;--r)e[r]=e[r+1]*t[r+1];return e}function Z(t,n){if("string"===n)throw new Error("Cannot convert a string[] to a TypedArray");if(Array.isArray(t)&&(t=I(t)),f().getBool("DEBUG")&&L(t,n),function(t,n){return t instanceof Float32Array&&"float32"===n||t instanceof Int32Array&&"int32"===n||t instanceof Uint8Array&&"bool"===n}(t,n))return t;if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n){for(var e=new Uint8Array(t.length),r=0;r<e.length;++r)0!==Math.round(t[r])&&(e[r]=1);return e}throw new Error("Unknown data type "+n)}function X(t,n){if(0===t.length)return n[0];var e=t.reduce((function(t,n){return t*n}));if(0===e)return[];if(e!==n.length)throw new Error("["+t+"] does not match the input size "+n.length+".");return function t(n,e,r){var o=new Array;if(1===e.length)for(var a=e[0],i=0;i<a;i++)o[i]=r[n+i];else{a=e[0];var u=e.slice(1),s=u.reduce((function(t,n){return t*n}));for(i=0;i<a;i++)o[i]=t(n+i*s,u,r)}return o}(0,t,n)}function $(t,n){for(var e=Q(t,n),r=0;r<e.length;r++)e[r]=1;return e}function Q(t,n){if(null==n||"float32"===n||"complex64"===n)return new Float32Array(t);if("int32"===n)return new Int32Array(t);if("bool"===n)return new Uint8Array(t);throw new Error("Unknown data type "+n)}function tt(){return f().platform.now()}function nt(t){t.forEach((function(n){E(Number.isInteger(n)&&n>=0,(function(){return"Tensor must have a shape comprised of positive integers but got shape ["+t+"]."}))}))}function et(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",f().platform.encode(t,n)}function rt(t,n){return void 0===n&&(n="utf-8"),n=n||"utf-8",f().platform.decode(t,n)}var ot={__proto__:null,shuffle:x,clamp:S,nearestLargerEven:function(t){return t%2==0?t:t+1},sum:function(t){for(var n=0,e=0;e<t.length;e++)n+=t[e];return n},randUniform:function(t,n){var e=Math.random();return n*e+(1-e)*t},distSquared:function(t,n){for(var e=0,r=0;r<t.length;r++){var o=Number(t[r])-Number(n[r]);e+=o*o}return e},assert:E,assertShapesMatch:D,assertNonNull:N,flatten:I,sizeFromShape:F,isScalarShape:function(t){return 0===t.length},arraysEqual:A,isInt:T,tanh:function(t){if(null!=Math.tanh)return Math.tanh(t);if(t===1/0)return 1;if(t===-1/0)return-1;var n=Math.exp(2*t);return(n-1)/(n+1)},sizeToSquarishShape:function(t){var n=Math.ceil(Math.sqrt(t));return[n,Math.ceil(t/n)]},createShuffledIndices:function(t){for(var n=new Uint32Array(t),e=0;e<t;++e)n[e]=e;return x(n),n},rightPad:M,repeatedTry:function(t,n,e){return void 0===n&&(n=function(t){return 0}),new Promise((function(r,o){var a=0,i=function(){if(t())r();else{a++;var u=n(a);null!=e&&a>=e?o():setTimeout(i,u)}};i()}))},inferFromImplicitShape:_,parseAxisParam:B,squeezeShape:R,getTypedArrayFromDType:C,getArrayFromDType:P,checkConversionForErrors:L,isValidDtype:z,hasEncodingLoss:q,isTypedArray:O,bytesPerElement:W,bytesFromStringArray:K,isString:U,isBoolean:G,isNumber:V,inferDtype:H,isFunction:j,nearestDivisor:J,computeStrides:Y,createScalarValue:function(t,n){return"string"===n?et(t):Z([t],n)},toTypedArray:Z,toNestedArray:X,makeOnesTypedArray:$,makeZerosTypedArray:Q,makeZerosNestedTypedArray:function(t,n){var e=t.reduce((function(t,n){return t*n}),1);if(null==n||"float32"===n)return X(t,new Float32Array(e));if("int32"===n)return X(t,new Int32Array(e));if("bool"===n)return X(t,new Uint8Array(e));throw new Error("Unknown data type "+n)},now:tt,assertNonNegativeIntegerDimensions:nt,fetch:function(t,n){return f().platform.fetch(t,n)},encodeString:et,decodeString:rt,locToIndex:function(t,n,e){if(0===n)return 0;if(1===n)return t[0];for(var r=t[t.length-1],o=0;o<t.length-1;++o)r+=e[o]*t[o];return r},indexToLoc:function(t,n,e){if(0===n)return[];if(1===n)return[t];for(var r=new Array(n),o=0;o<r.length-1;++o)r[o]=Math.floor(t/e[o]),t-=r[o]*e[o];return r[r.length-1]=t,r}},at=function(){function t(t,n){this.backendTimer=t,this.logger=n,null==n&&(this.logger=new it)}return t.prototype.profileKernel=function(t,n,e){for(var r,o=this.backendTimer.time((function(){r=e()})),a=function(n){var e=r[n];e.data().then((function(n){!function(t,n,e){if("float32"!==n)return!1;for(var r=0;r<t.length;r++){var o=t[r];if(isNaN(o)||!isFinite(o))return console.warn("Found "+o+" in the result of '"+e+"'"),!0}}(n,e.dtype,t)}))},i=0;i<r.length;i++)a(i);return{kernelName:t,outputs:r,inputs:n,timeMs:o.then((function(t){return t.kernelMs})),extraInfo:o.then((function(t){return null!=t.getExtraProfileInfo?t.getExtraProfileInfo():""}))}},t.prototype.logKernelProfile=function(t){var n=this,e=t.kernelName,r=t.outputs,o=t.timeMs,a=t.inputs,i=t.extraInfo;r.forEach((function(t){Promise.all([t.data(),o,i]).then((function(r){n.logger.logKernelProfile(e,t,r[0],r[1],a,r[2])}))}))},t}();var it=function(){function t(){}return t.prototype.logKernelProfile=function(t,n,e,r,o,a){var i="number"==typeof r?M(r+"ms",9):r.error,u=M(t,25),s=n.rank,c=n.size,l=M(n.shape.toString(),14),f="";for(var p in o){var h=o[p];if(null!=h){var d=h.shape||n.shape,v=d.length;f+=p+": "+v+"D "+(v>0?d:"")+" "}}console.log("%c"+u+"\t%c"+i+"\t%c"+s+"D "+l+"\t%c"+c+"\t%c"+f+"\t%c"+a,"font-weight:bold","color:red","color:blue","color: orange","color: green","color: steelblue")},t}();function ut(t,n,e,r){var o=Y(n),a=function(t,n,e,r){var o=F(n),a=r[r.length-1],i=new Array(a).fill(0),u=n.length,s="complex64"===e?lt(t):t;if(u>1)for(var c=0;c<o/a;c++)for(var l=c*a,f=0;f<a;f++)i[f]=Math.max(i[f],st(s[l+f],0,e).length);return i}(t,n,e,o),i=n.length,u=function t(n,e,r,o,a,i){void 0===i&&(i=!0);var u="complex64"===r?2:1,s=e[0],c=e.length;if(0===c){return"complex64"===r?[st(lt(n)[0],0,r)]:"bool"===r?[ct(n[0])]:[n[0].toString()]}if(1===c){if(s>20){var l=3*u,f=Array.from(n.slice(0,l)),p=Array.from(n.slice((s-3)*u,s*u));return"complex64"===r&&(f=lt(f),p=lt(p)),["["+f.map((function(t,n){return st(t,a[n],r)})).join(", ")+", ..., "+p.map((function(t,n){return st(t,a[s-3+n],r)})).join(", ")+"]"]}return["["+("complex64"===r?lt(n):Array.from(n)).map((function(t,n){return st(t,a[n],r)})).join(", ")+"]"]}var h=e.slice(1),d=o.slice(1),v=o[0]*u,m=[];if(s>20){for(var g=0;g<3;g++){var y=(b=g*v)+v;m.push.apply(m,t(n.slice(b,y),h,r,d,a,!1))}m.push("...");for(g=s-3;g<s;g++){y=(b=g*v)+v;m.push.apply(m,t(n.slice(b,y),h,r,d,a,g===s-1))}}else for(g=0;g<s;g++){var b;y=(b=g*v)+v;m.push.apply(m,t(n.slice(b,y),h,r,d,a,g===s-1))}var w=2===c?",":"";m[0]="["+m[0]+w;for(g=1;g<m.length-1;g++)m[g]=" "+m[g]+w;var k=",\n";for(g=2;g<c;g++)k+="\n";return m[m.length-1]=" "+m[m.length-1]+"]"+(i?"":k),m}(t,n,e,o,a),s=["Tensor"];return r&&(s.push("  dtype: "+e),s.push("  rank: "+i),s.push("  shape: ["+n+"]"),s.push("  values:")),s.push(u.map((function(t){return"    "+t})).join("\n")),s.join("\n")}function st(t,n,e){return M(Array.isArray(t)?parseFloat(t[0].toFixed(7))+" + "+parseFloat(t[1].toFixed(7))+"j":U(t)?"'"+t+"'":"bool"===e?ct(t):parseFloat(t.toFixed(7)).toString(),n)}function ct(t){return 0===t?"false":"true"}function lt(t){for(var n=[],e=0;e<t.length;e+=2)n.push([t[e],t[e+1]]);return n}var ft=function(){function t(t,n,e){var r=this;if(this.dtype=n,this.shape=t.slice(),this.size=F(t),null!=e){var o=e.length;E(o===this.size,(function(){return"Length of values '"+o+"' does not match the size inferred by the shape '"+r.size+"'."}))}if("complex64"===n)throw new Error("complex64 dtype TensorBuffers are not supported. Please create a TensorBuffer for the real and imaginary parts separately and call tf.complex(real, imag).");this.values=e||P(n,this.size),this.strides=Y(t)}return t.prototype.set=function(t){for(var n=this,e=[],r=1;r<arguments.length;r++)e[r-1]=arguments[r];0===e.length&&(e=[0]),E(e.length===this.rank,(function(){return"The number of provided coordinates ("+e.length+") must match the rank ("+n.rank+")"}));var o=this.locToIndex(e);this.values[o]=t},t.prototype.get=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];0===t.length&&(t=[0]);for(var e=0,r=0,o=t;r<o.length;r++){var a=o[r];if(a<0||a>=this.shape[e]){var i="Requested out of range element at "+t+".   Buffer shape="+this.shape;throw new Error(i)}e++}for(var u=t[t.length-1],s=0;s<t.length-1;++s)u+=this.strides[s]*t[s];return this.values[u]},t.prototype.locToIndex=function(t){if(0===this.rank)return 0;if(1===this.rank)return t[0];for(var n=t[t.length-1],e=0;e<t.length-1;++e)n+=this.strides[e]*t[e];return n},t.prototype.indexToLoc=function(t){if(0===this.rank)return[];if(1===this.rank)return[t];for(var n=new Array(this.shape.length),e=0;e<n.length-1;++e)n[e]=Math.floor(t/this.strides[e]),t-=n[e]*this.strides[e];return n[n.length-1]=t,n},Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.toTensor=function(){return pt().makeTensor(this.values,this.shape,this.dtype)},t}(),pt=null,ht=null;var dt=function(){function t(t,n,e,r){this.kept=!1,this.isDisposedInternal=!1,this.shape=t.slice(),this.dtype=n||"float32",this.size=F(t),this.strides=Y(t),this.dataId=e,this.id=r,this.rankType=this.rank<5?this.rank.toString():"higher"}return Object.defineProperty(t.prototype,"rank",{get:function(){return this.shape.length},enumerable:!0,configurable:!0}),t.prototype.buffer=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,ht.buffer(this.shape,this.dtype,t)]}}))}))},t.prototype.bufferSync=function(){return ht.buffer(this.shape,this.dtype,this.dataSync())},t.prototype.array=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return[4,this.data()];case 1:return t=n.sent(),[2,X(this.shape,t)]}}))}))},t.prototype.arraySync=function(){return X(this.shape,this.dataSync())},t.prototype.data=function(){return r(this,void 0,void 0,(function(){var t,n;return o(this,(function(e){switch(e.label){case 0:return this.throwIfDisposed(),t=pt().read(this.dataId),"string"!==this.dtype?[3,2]:[4,t];case 1:n=e.sent();try{return[2,n.map((function(t){return rt(t)}))]}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}e.label=2;case 2:return[2,t]}}))}))},t.prototype.dataSync=function(){this.throwIfDisposed();var t=pt().readSync(this.dataId);if("string"===this.dtype)try{return t.map((function(t){return rt(t)}))}catch(t){throw new Error("Failed to decode the string bytes into utf-8. To get the original bytes, call tensor.bytes().")}return t},t.prototype.bytes=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return this.throwIfDisposed(),[4,pt().read(this.dataId)];case 1:return t=n.sent(),"string"===this.dtype?[2,t]:[2,new Uint8Array(t.buffer)]}}))}))},t.prototype.dispose=function(){this.isDisposed||(pt().disposeTensor(this),this.isDisposedInternal=!0)},Object.defineProperty(t.prototype,"isDisposed",{get:function(){return this.isDisposedInternal},enumerable:!0,configurable:!0}),t.prototype.throwIfDisposed=function(){if(this.isDisposed)throw new Error("Tensor is disposed.")},t.prototype.print=function(t){return void 0===t&&(t=!1),ht.print(this,t)},t.prototype.clone=function(){return this.throwIfDisposed(),ht.clone(this)},t.prototype.toString=function(t){return void 0===t&&(t=!1),ut(this.dataSync(),this.shape,this.dtype,t)},t.prototype.cast=function(t){return this.throwIfDisposed(),ht.cast(this,t)},t.prototype.variable=function(t,n,e){return void 0===t&&(t=!0),this.throwIfDisposed(),pt().makeVariable(this,t,n,e)},t}();Object.defineProperty(dt,Symbol.hasInstance,{value:function(t){return!!t&&null!=t.data&&null!=t.dataSync&&null!=t.throwIfDisposed}});var vt,mt,gt,yt,bt,wt=function(t){function n(n,e,r,o){var a=t.call(this,n.shape,n.dtype,n.dataId,o)||this;return a.trainable=e,a.name=r,a}return e(n,t),n.prototype.assign=function(t){if(t.dtype!==this.dtype)throw new Error("dtype of the new value ("+t.dtype+") and previous value ("+this.dtype+") must match");if(!A(t.shape,this.shape))throw new Error("shape of the new value ("+t.shape+") and previous value ("+this.shape+") must match");pt().disposeTensor(this),this.dataId=t.dataId,pt().incRef(this,null)},n.prototype.dispose=function(){pt().disposeVariable(this),this.isDisposedInternal=!0},n}(dt);Object.defineProperty(wt,Symbol.hasInstance,{value:function(t){return t instanceof dt&&null!=t.assign&&t.assign instanceof Function}}),(vt=t.Rank||(t.Rank={})).R0="R0",vt.R1="R1",vt.R2="R2",vt.R3="R3",vt.R4="R4",vt.R5="R5",vt.R6="R6",function(t){t.float32="float32",t.int32="int32",t.bool="int32",t.complex64="complex64"}(mt||(mt={})),function(t){t.float32="float32",t.int32="int32",t.bool="bool",t.complex64="complex64"}(gt||(gt={})),function(t){t.float32="float32",t.int32="float32",t.bool="float32",t.complex64="complex64"}(yt||(yt={})),function(t){t.float32="complex64",t.int32="complex64",t.bool="complex64",t.complex64="complex64"}(bt||(bt={}));var kt={float32:yt,int32:mt,bool:gt,complex64:bt};function xt(t,n){if("string"===t||"string"===n){if("string"===t&&"string"===n)return"string";throw new Error("Can not upcast "+t+" with "+n)}return kt[t][n]}function St(t,n){if(t.dtype===n.dtype)return[t,n];var e=xt(t.dtype,n.dtype);return[t.cast(e),n.cast(e)]}function Et(t,n){E(t.dtype===n.dtype,(function(){return"The dtypes of the first("+t.dtype+") and second("+n.dtype+") input must match"}))}function Dt(t){var n=[];return function t(n,e,r){if(null==n)return;if(n instanceof dt)return void e.push(n);if(o=n,!Array.isArray(o)&&"object"!=typeof o)return;var o;var a=n;for(var i in a){var u=a[i];r.has(u)||(r.add(u),t(u,e,r))}}(t,n,new Set),n}var Nt={__proto__:null,makeTypesMatch:St,assertTypesMatch:Et,isTensorInList:function(t,n){return n.some((function(n){return n.id===t.id}))},getTensorsInContainer:Dt},It=function(){function t(){this.registeredVariables={},this.nextTapeNodeId=0,this.numBytes=0,this.numTensors=0,this.numStringTensors=0,this.numDataBuffers=0,this.gradientDepth=0,this.kernelDepth=0,this.scopeStack=[],this.numDataMovesStack=[],this.nextScopeId=0,this.tensorInfo=new WeakMap,this.profiling=!1,this.activeProfile={newBytes:0,newTensors:0,peakBytes:0,kernels:[],result:null}}return t.prototype.dispose=function(){for(var t in this.registeredVariables)this.registeredVariables[t].dispose()},t}(),Ft=function(){function t(t){this.ENV=t,this.registry={},this.registryFactory={},this.pendingBackendInitId=0,this.state=new It}return t.prototype.ready=function(){return r(this,void 0,void 0,(function(){var t,n,e;return o(this,(function(r){switch(r.label){case 0:if(null!=this.pendingBackendInit)return[2,this.pendingBackendInit.then((function(){}))];if(null!=this.backendInstance)return[2];t=this.getSortedBackends(),n=0,r.label=1;case 1:return n<t.length?(e=t[n],[4,this.initializeBackend(e).success]):[3,5];case 2:return r.sent()?[4,this.setBackend(e)]:[3,4];case 3:return r.sent(),[2];case 4:return n++,[3,1];case 5:throw new Error("Could not initialize any backends, all backend initializations failed.")}}))}))},Object.defineProperty(t.prototype,"backend",{get:function(){if(null!=this.pendingBackendInit)throw new Error("Backend '"+this.backendName+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");if(null==this.backendInstance){var t=this.initializeBackendsAndReturnBest(),n=t.name;if(t.asyncInit)throw new Error("The highest priority backend '"+n+"' has not yet been initialized. Make sure to await tf.ready() or await tf.setBackend() before calling other methods");this.setBackend(n)}return this.backendInstance},enumerable:!0,configurable:!0}),t.prototype.backendNames=function(){return Object.keys(this.registryFactory)},t.prototype.findBackend=function(t){if(!(t in this.registry)){if(!(t in this.registryFactory))return null;if(this.initializeBackend(t).asyncInit)return null}return this.registry[t]},t.prototype.findBackendFactory=function(t){return t in this.registryFactory?this.registryFactory[t].factory:null},t.prototype.registerBackend=function(t,n,e){return void 0===e&&(e=1),t in this.registryFactory?(console.warn(t+" backend was already registered. Reusing existing backend factory."),!1):(this.registryFactory[t]={factory:n,priority:e},!0)},t.prototype.setBackend=function(t){return r(this,void 0,void 0,(function(){var n,e,r;return o(this,(function(o){switch(o.label){case 0:if(null==this.registryFactory[t])throw new Error("Backend name '"+t+"' not found in registry");return this.backendName=t,null!=this.registry[t]?[3,4]:(this.backendInstance=null,n=this.initializeBackend(t),e=n.success,n.asyncInit?[4,e]:[3,2]);case 1:return r=o.sent(),[3,3];case 2:r=e,o.label=3;case 3:if(!r)return[2,!1];o.label=4;case 4:return this.backendInstance=this.registry[t],this.setupRegisteredKernels(),this.profiler=new at(this.backendInstance),[2,!0]}}))}))},t.prototype.setupRegisteredKernels=function(){var t=this;y(this.backendName).forEach((function(n){null!=n.setupFunc&&n.setupFunc(t.backendInstance)}))},t.prototype.disposeRegisteredKernels=function(t){var n=this;y(t).forEach((function(e){null!=e.disposeFunc&&e.disposeFunc(n.registry[t])}))},t.prototype.initializeBackend=function(t){var n=this,e=this.registryFactory[t];if(null==e)throw new Error("Cannot initialize backend "+t+", no registration found.");try{var r=e.factory();if(!r||r instanceof i||"function"!=typeof r.then)return this.registry[t]=r,{success:!0,asyncInit:!1};var o=++this.pendingBackendInitId,a=r.then((function(e){return!(o<n.pendingBackendInitId)&&(n.registry[t]=e,n.pendingBackendInit=null,!0)})).catch((function(e){return o<n.pendingBackendInitId||(n.pendingBackendInit=null,console.warn("Initialization of backend "+t+" failed"),console.warn(e.stack||e.message)),!1}));return this.pendingBackendInit=a,{success:a,asyncInit:!0}}catch(n){return console.warn("Initialization of backend "+t+" failed"),console.warn(n.stack||n.message),{success:!1,asyncInit:!1}}},t.prototype.removeBackend=function(t){if(!(t in this.registryFactory))throw new Error(t+" backend not found in registry");this.backendName===t&&null!=this.pendingBackendInit&&this.pendingBackendInitId++,t in this.registry&&(this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t]),delete this.registryFactory[t],this.backendName===t&&(this.pendingBackendInit=null,this.backendName=null,this.backendInstance=null)},t.prototype.getSortedBackends=function(){var t=this;if(0===Object.keys(this.registryFactory).length)throw new Error("No backend found in registry.");return Object.keys(this.registryFactory).sort((function(n,e){return t.registryFactory[e].priority-t.registryFactory[n].priority}))},t.prototype.initializeBackendsAndReturnBest=function(){for(var t=this.getSortedBackends(),n=0;n<t.length;n++){var e=t[n],r=this.initializeBackend(e),o=r.success,a=r.asyncInit;if(a||o)return{name:e,asyncInit:a}}throw new Error("Could not initialize any backends, all backend initializations failed.")},t.prototype.moveData=function(t,n){var e=this.state.tensorInfo.get(n),r=e.backend,o=this.readSync(n);r.disposeData(n),e.backend=t,t.move(n,o,e.shape,e.dtype),this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack[this.state.numDataMovesStack.length-1]++},t.prototype.tidy=function(t,n){var e,r=this,o=null;if(null==n){if("function"!=typeof t)throw new Error("Please provide a function to tidy()");n=t}else{if("string"!=typeof t&&!(t instanceof String))throw new Error("When calling with two arguments, the first argument to tidy() must be a string");if("function"!=typeof n)throw new Error("When calling with two arguments, the 2nd argument to tidy() must be a function");o=t}return this.scopedRun((function(){return r.startScope(o)}),(function(){return r.endScope(e)}),(function(){return(e=n())instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),e}))},t.prototype.scopedRun=function(t,n,e){t();try{var r=e();return n(),r}catch(t){throw n(),t}},t.prototype.nextTensorId=function(){return t.nextTensorId++},t.prototype.nextVariableId=function(){return t.nextVariableId++},t.prototype.clone=function(t){var n=this.makeTensorFromDataId(t.dataId,t.shape,t.dtype),e={x:t};return this.addTapeNode(this.state.activeScope.name,e,[n],(function(t){return{x:function(){var n={x:t},e={dtype:"float32"};return Tt.runKernelFunc((function(n){return n.cast(t,"float32")}),n,null,"Cast",e)}}}),[],{}),n},t.prototype.runKernel=function(t,n,e,r,o){return this.runKernelFunc(null,n,null,t,e,r,o)},t.prototype.shouldCheckForMemLeaks=function(){return this.ENV.getBool("IS_TEST")},t.prototype.checkKernelForMemLeak=function(t,n,e){var r=this.backend.numDataIds(),o=0;e.forEach((function(t){o+="complex64"===t.dtype?3:1}));var a=this.state.numDataMovesStack[this.state.numDataMovesStack.length-1],i=r-n-o-a;if(i>0)throw new Error("Backend '"+this.backendName+"' has an internal memory leak ("+i+" data ids) after running '"+t+"'")},t.prototype.runKernelFunc=function(t,n,e,r,o,a,i){var u,s=this,c=[],l=this.isTapeOn();null==r&&(r=null!=this.state.activeScope?this.state.activeScope.name:"");var f,p=this.state.numBytes,h=this.state.numTensors;this.shouldCheckForMemLeaks()&&this.state.numDataMovesStack.push(0);var d,v,g=m(r,this.backendName);if(null!=g)f=function(){var t=s.backend.numDataIds();d=g.kernelFunc({inputs:n,attrs:o,backend:s.backend});var e=Array.isArray(d)?d:[d];s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,t,e);var u=e.map((function(t){var n=t.dataId,e=t.shape,r=t.dtype;return s.makeTensorFromDataId(n,e,r)}));if(l){var f=s.getTensorsForGradient(r,n,u);if(null==f){null==i&&(i=[]);var p=u.filter((function(t,n){return i[n]}));f=(a||[]).slice().concat(p)}c=s.saveTensorsForBackwardMode(f)}return u};else{var y=function(t){l&&(c=t.map((function(t){return s.keep(s.clone(t))})))};f=function(){var n=s.backend.numDataIds();d=s.tidy((function(){return t(s.backend,y)}));var e=Array.isArray(d)?d:[d];return s.shouldCheckForMemLeaks()&&s.checkKernelForMemLeak(r,n,e),e}}return this.scopedRun((function(){return s.state.kernelDepth++}),(function(){return s.state.kernelDepth--}),(function(){s.ENV.getBool("DEBUG")||s.state.profiling?(v=s.profiler.profileKernel(r,n,(function(){return f()})),s.ENV.getBool("DEBUG")&&s.profiler.logKernelProfile(v),u=v.outputs):u=f()})),l&&this.addTapeNode(r,n,u,e,c,o),this.state.profiling&&this.state.activeProfile.kernels.push({name:r,bytesAdded:this.state.numBytes-p,totalBytesSnapshot:this.state.numBytes,tensorsAdded:this.state.numTensors-h,totalTensorsSnapshot:this.state.numTensors,inputShapes:Object.keys(n).map((function(t){return null!=n[t]?n[t].shape:null})),outputShapes:u.map((function(t){return t.shape})),kernelTimeMs:v.timeMs,extraInfo:v.extraInfo}),Array.isArray(d)?u:u[0]},t.prototype.saveTensorsForBackwardMode=function(t){var n=this;return t.map((function(t){return n.keep(n.clone(t))}))},t.prototype.getTensorsForGradient=function(t,n,e){var r=g(t);if(null!=r){var o=r.inputsToSave||[],a=r.outputsToSave||[],i=void 0;r.saveAllInputs?(E(Array.isArray(n),(function(){return"saveAllInputs is true, expected inputs to be an array."})),i=Object.keys(n).map((function(t){return n[t]}))):i=o.map((function(t){return n[t]}));var u=e.filter((function(t,n){return a[n]}));return i.concat(u)}return null},t.prototype.makeTensor=function(t,n,e,r){if(null==t)throw new Error("Values passed to engine.makeTensor() are null");e=e||"float32",r=r||this.backend;var o=t;"string"===e&&U(t[0])&&(o=t.map((function(t){return et(t)})));var a=r.write(o,n,e),i=new dt(n,e,a,this.nextTensorId());if(this.incRef(i,r),"string"===e){var u=this.state.tensorInfo.get(a),s=K(o);this.state.numBytes+=s-u.bytes,u.bytes=s}return i},t.prototype.makeTensorFromDataId=function(t,n,e,r){var o=new dt(n,e=e||"float32",t,this.nextTensorId());return this.incRef(o,r),o},t.prototype.makeVariable=function(t,n,e,r){void 0===n&&(n=!0),e=e||this.nextVariableId().toString(),null!=r&&r!==t.dtype&&(t=t.cast(r));var o=new wt(t,n,e,this.nextTensorId());if(null!=this.state.registeredVariables[o.name])throw new Error("Variable with name "+o.name+" was already registered");return this.state.registeredVariables[o.name]=o,this.incRef(o,this.backend),o},t.prototype.incRef=function(t,n){var e=this.state.tensorInfo.has(t.dataId)?this.state.tensorInfo.get(t.dataId).refCount:0;if(this.state.numTensors++,"string"===t.dtype&&this.state.numStringTensors++,0===e){this.state.numDataBuffers++;var r=0;"complex64"!==t.dtype&&"string"!==t.dtype&&(r=t.size*W(t.dtype)),this.state.tensorInfo.set(t.dataId,{backend:n||this.backend,dtype:t.dtype,shape:t.shape,bytes:r,refCount:0}),this.state.numBytes+=r}this.state.tensorInfo.get(t.dataId).refCount++,t instanceof wt||this.track(t)},t.prototype.disposeTensor=function(t){if(this.state.tensorInfo.has(t.dataId)){this.state.numTensors--,"string"===t.dtype&&this.state.numStringTensors--;var n=this.state.tensorInfo.get(t.dataId);n.refCount<=1?("complex64"!==t.dtype&&(this.state.numBytes-=n.bytes),this.state.numDataBuffers--,n.backend.disposeData(t.dataId),this.state.tensorInfo.delete(t.dataId)):this.state.tensorInfo.get(t.dataId).refCount--}},t.prototype.disposeVariables=function(){for(var t in this.state.registeredVariables){var n=this.state.registeredVariables[t];this.disposeVariable(n)}},t.prototype.disposeVariable=function(t){this.disposeTensor(t),null!=this.state.registeredVariables[t.name]&&delete this.state.registeredVariables[t.name]},t.prototype.memory=function(){var t=this.backend.memory();return t.numTensors=this.state.numTensors,t.numDataBuffers=this.state.numDataBuffers,t.numBytes=this.state.numBytes,this.state.numStringTensors>0&&(t.unreliable=!0,null==t.reasons&&(t.reasons=[]),t.reasons.push("Memory usage by string tensors is approximate (2 bytes per character)")),t},t.prototype.profile=function(t){return r(this,void 0,void 0,(function(){var n,e,r,a,i,u,s,c;return o(this,(function(o){switch(o.label){case 0:return this.state.profiling=!0,n=this.state.numBytes,e=this.state.numTensors,this.state.activeProfile.kernels=[],r=this.state.activeProfile,[4,t()];case 1:r.result=o.sent(),this.state.profiling=!1,this.state.activeProfile.peakBytes=Math.max.apply(Math,this.state.activeProfile.kernels.map((function(t){return t.totalBytesSnapshot}))),this.state.activeProfile.newBytes=this.state.numBytes-n,this.state.activeProfile.newTensors=this.state.numTensors-e,a=0,i=this.state.activeProfile.kernels,o.label=2;case 2:return a<i.length?(u=i[a],s=u,[4,u.kernelTimeMs]):[3,6];case 3:return s.kernelTimeMs=o.sent(),c=u,[4,u.extraInfo];case 4:c.extraInfo=o.sent(),o.label=5;case 5:return a++,[3,2];case 6:return[2,this.state.activeProfile]}}))}))},t.prototype.isTapeOn=function(){return this.state.gradientDepth>0&&0===this.state.kernelDepth},t.prototype.addTapeNode=function(t,n,e,r,o,a){var i=this,u={id:this.state.nextTapeNodeId++,kernelName:t,inputs:n,outputs:e,saved:o},s=g(t);null!=s&&(r=s.gradFunc),null!=r&&(u.gradient=function(t){return t=t.map((function(t,n){if(null==t){var r=e[n],o=Q(r.size,r.dtype);return i.makeTensor(o,r.shape,r.dtype)}return t})),r(t.length>1?t:t[0],o,a)}),this.state.activeTape.push(u)},t.prototype.keep=function(t){return t.kept=!0,t},t.prototype.startTape=function(){0===this.state.gradientDepth&&(this.state.activeTape=[]),this.state.gradientDepth++},t.prototype.endTape=function(){this.state.gradientDepth--},t.prototype.startScope=function(t){var n={track:[],name:"unnamed scope",id:this.state.nextScopeId++};t&&(n.name=t),this.state.scopeStack.push(n),this.state.activeScope=n},t.prototype.endScope=function(t){for(var n=this,e=Dt(t),r=new Set(e.map((function(t){return t.id}))),o=0;o<this.state.activeScope.track.length;o++){var a=this.state.activeScope.track[o];a.kept||r.has(a.id)||a.dispose()}var i=this.state.scopeStack.pop();this.state.activeScope=0===this.state.scopeStack.length?null:this.state.scopeStack[this.state.scopeStack.length-1],e.forEach((function(t){t.kept||t.scopeId!==i.id||n.track(t)}))},t.prototype.gradients=function(t,n,e,r){var o=this;if(void 0===r&&(r=!1),E(n.length>0,(function(){return"gradients() received an empty list of xs."})),null!=e&&"float32"!==e.dtype)throw new Error("dy must have 'float32' dtype, but has '"+e.dtype+"'");var a=this.scopedRun((function(){return o.startTape()}),(function(){return o.endTape()}),(function(){return o.tidy("forward",t)}));E(a instanceof dt,(function(){return"The result y returned by f() must be a tensor."}));var i=function(t,n,e){for(var r={},o={},a=0;a<n.length;a++)r[n[a].id]=!0;for(a=0;a<t.length;a++){var i=(d=t[a]).inputs;for(var u in i){for(var s=i[u],c=!1,l=0;l<n.length;l++)if(r[s.id]){d.outputs.forEach((function(t){return r[t.id]=!0})),c=!0,o[d.id]=!0;break}if(c)break}}var f={};f[e.id]=!0;var p={};for(a=t.length-1;a>=0;a--)for(i=(d=t[a]).inputs,l=0;l<d.outputs.length;l++)if(f[d.outputs[l].id]){for(var u in i)f[i[u].id]=!0,p[d.id]=!0;break}var h=[];for(a=0;a<t.length;a++){var d;if(o[(d=t[a]).id]&&p[d.id]){var v={};for(var u in d.inputs){var m=d.inputs[u];r[m.id]&&(v[u]=m)}var g=Object.assign({},d);g.inputs=v,g.outputs=d.outputs,h.push(g)}}return h}(this.state.activeTape,n,a);if(!r&&0===i.length&&n.length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that the f you passed encloses all operations that lead from x to y.");return this.tidy("backward",(function(){var t,r,u={};u[a.id]=null==e?(t=a.shape,r=$(F(t),"float32"),Tt.makeTensor(r,t,"float32")):e,function(t,n,e,r){for(var o=function(o){var a=n[o],i=[];if(a.outputs.forEach((function(n){var e=t[n.id];null!=e?i.push(e):i.push(null)})),null==a.gradient)throw new Error("Cannot compute gradient: gradient function not found for "+a.kernelName+".");var u=a.gradient(i),s=function(n){if(!(n in u))throw new Error("Cannot backprop through input "+n+". Available gradients found: "+Object.keys(u)+".");var o=e((function(){return u[n]()}));if("float32"!==o.dtype)throw new Error("Error in gradient for op "+a.kernelName+". The gradient of input "+n+" must have 'float32' dtype, but has '"+o.dtype+"'");var i=a.inputs[n];if(!A(o.shape,i.shape))throw new Error("Error in gradient for op "+a.kernelName+". The gradient of input '"+n+"' has shape '"+o.shape+"', which does not match the shape of the input '"+i.shape+"'");if(null==t[i.id])t[i.id]=o;else{var s=t[i.id];t[i.id]=r(s,o),s.dispose()}};for(var c in a.inputs)s(c)},a=n.length-1;a>=0;a--)o(a)}(u,i,(function(t){return o.tidy(t)}),Mt);var s=n.map((function(t){return u[t.id]}));return 0===o.state.gradientDepth&&(o.state.activeTape.forEach((function(t){for(var n=0,e=t.saved;n<e.length;n++){e[n].dispose()}})),o.state.activeTape=null),{value:a,grads:s}}))},t.prototype.customGrad=function(t){var n=this;return E(j(t),(function(){return"The f passed in customGrad(f) must be a function."})),function(){for(var e,r=[],o=0;o<arguments.length;o++)r[o]=arguments[o];E(r.every((function(t){return t instanceof dt})),(function(){return"The args passed in customGrad(f)(x1, x2,...) must all be tensors"}));var a={};return r.forEach((function(t,n){a[n]=t})),n.runKernelFunc((function(n,o){return E((e=t.apply(void 0,r.concat([o]))).value instanceof dt,(function(){return"The function f passed in customGrad(f) must return an object where `obj.value` is a tensor"})),E(j(e.gradFunc),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function."})),e.value}),a,(function(t,n){var o=e.gradFunc(t,n),a=Array.isArray(o)?o:[o];E(a.length===r.length,(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns the same number of tensors as inputs passed to f(...)."})),E(a.every((function(t){return t instanceof dt})),(function(){return"The function f passed in customGrad(f) must return an object where `obj.gradFunc` is a function that returns a list of only tensors."}));var i={};return a.forEach((function(t,n){i[n]=function(){return t}})),i}))}},t.prototype.readSync=function(t){return this.state.tensorInfo.get(t).backend.readSync(t)},t.prototype.read=function(t){return this.state.tensorInfo.get(t).backend.read(t)},t.prototype.time=function(t){return r(this,void 0,void 0,(function(){var n,e;return o(this,(function(r){switch(r.label){case 0:return n=tt(),[4,this.backend.time(t)];case 1:return(e=r.sent()).wallMs=tt()-n,[2,e]}}))}))},t.prototype.track=function(t){return null!=this.state.activeScope&&(t.scopeId=this.state.activeScope.id,this.state.activeScope.track.push(t)),t},Object.defineProperty(t.prototype,"registeredVariables",{get:function(){return this.state.registeredVariables},enumerable:!0,configurable:!0}),t.prototype.reset=function(){for(var t in this.pendingBackendInitId++,this.state.dispose(),this.ENV.reset(),this.state=new It,this.registry)this.disposeRegisteredKernels(t),this.registry[t].dispose(),delete this.registry[t];this.backendName=null,this.backendInstance=null,this.pendingBackendInit=null},t.nextTensorId=0,t.nextVariableId=0,t}();function At(){var n=p();if(null==n._tfengine){var e=new c(n);n._tfengine=new Ft(e)}return function(n){t.ENV=n}(n._tfengine.ENV),pt=function(){return n._tfengine},n._tfengine}var Tt=At();function Mt(t,n){var e={a:t,b:n};return Tt.runKernelFunc((function(e,r){var o=e.add(t,n);return r([t,n]),o}),e,null,"Add")}function _t(){return"undefined"!=typeof window&&null!=window.document||"undefined"!=typeof WorkerGlobalScope}var Bt={__proto__:null,isMobile:function(){if("undefined"!=typeof navigator&&null!=navigator){var t=navigator.userAgent||navigator.vendor||window.opera;return/(android|bb\d+|meego).+mobile|avantgo|bada\/|blackberry|blazer|compal|elaine|fennec|hiptop|iemobile|ip(hone|od)|iris|kindle|lge |maemo|midp|mmp|mobile.+firefox|netfront|opera m(ob|in)i|palm( os)?|phone|p(ixi|re)\/|plucker|pocket|psp|series(4|6)0|symbian|treo|up\.(browser|link)|vodafone|wap|windows ce|xda|xiino/i.test(t)||/1207|6310|6590|3gso|4thp|50[1-6]i|770s|802s|a wa|abac|ac(er|oo|s\-)|ai(ko|rn)|al(av|ca|co)|amoi|an(ex|ny|yw)|aptu|ar(ch|go)|as(te|us)|attw|au(di|\-m|r |s )|avan|be(ck|ll|nq)|bi(lb|rd)|bl(ac|az)|br(e|v)w|bumb|bw\-(n|u)|c55\/|capi|ccwa|cdm\-|cell|chtm|cldc|cmd\-|co(mp|nd)|craw|da(it|ll|ng)|dbte|dc\-s|devi|dica|dmob|do(c|p)o|ds(12|\-d)|el(49|ai)|em(l2|ul)|er(ic|k0)|esl8|ez([4-7]0|os|wa|ze)|fetc|fly(\-|_)|g1 u|g560|gene|gf\-5|g\-mo|go(\.w|od)|gr(ad|un)|haie|hcit|hd\-(m|p|t)|hei\-|hi(pt|ta)|hp( i|ip)|hs\-c|ht(c(\-| |_|a|g|p|s|t)|tp)|hu(aw|tc)|i\-(20|go|ma)|i230|iac( |\-|\/)|ibro|idea|ig01|ikom|im1k|inno|ipaq|iris|ja(t|v)a|jbro|jemu|jigs|kddi|keji|kgt( |\/)|klon|kpt |kwc\-|kyo(c|k)|le(no|xi)|lg( g|\/(k|l|u)|50|54|\-[a-w])|libw|lynx|m1\-w|m3ga|m50\/|ma(te|ui|xo)|mc(01|21|ca)|m\-cr|me(rc|ri)|mi(o8|oa|ts)|mmef|mo(01|02|bi|de|do|t(\-| |o|v)|zz)|mt(50|p1|v )|mwbp|mywa|n10[0-2]|n20[2-3]|n30(0|2)|n50(0|2|5)|n7(0(0|1)|10)|ne((c|m)\-|on|tf|wf|wg|wt)|nok(6|i)|nzph|o2im|op(ti|wv)|oran|owg1|p800|pan(a|d|t)|pdxg|pg(13|\-([1-8]|c))|phil|pire|pl(ay|uc)|pn\-2|po(ck|rt|se)|prox|psio|pt\-g|qa\-a|qc(07|12|21|32|60|\-[2-7]|i\-)|qtek|r380|r600|raks|rim9|ro(ve|zo)|s55\/|sa(ge|ma|mm|ms|ny|va)|sc(01|h\-|oo|p\-)|sdk\/|se(c(\-|0|1)|47|mc|nd|ri)|sgh\-|shar|sie(\-|m)|sk\-0|sl(45|id)|sm(al|ar|b3|it|t5)|so(ft|ny)|sp(01|h\-|v\-|v )|sy(01|mb)|t2(18|50)|t6(00|10|18)|ta(gt|lk)|tcl\-|tdg\-|tel(i|m)|tim\-|t\-mo|to(pl|sh)|ts(70|m\-|m3|m5)|tx\-9|up(\.b|g1|si)|utst|v400|v750|veri|vi(rg|te)|vk(40|5[0-3]|\-v)|vm40|voda|vulc|vx(52|53|60|61|70|80|81|83|85|98)|w3c(\-| )|webc|whit|wi(g |nc|nw)|wmlb|wonu|x700|yas\-|your|zeto|zte\-/i.test(t.substr(0,4))}return!1},isBrowser:_t},Rt=f();function Ct(t,n){var e=t;if(O(t))return"string"===n?[]:[t.length];if(!Array.isArray(t))return[];for(var r=[];Array.isArray(e)||O(e)&&"string"!==n;)r.push(e.length),e=e[0];return Array.isArray(t)&&f().getBool("TENSORLIKE_CHECK_SHAPE_CONSISTENCY")&&function t(n,e,r){if(r=r||[],!Array.isArray(n)&&!O(n))return void E(0===e.length,(function(){return"Element arr["+r.join("][")+"] is a primitive, but should be an array/TypedArray of "+e[0]+" elements"}));E(e.length>0,(function(){return"Element arr["+r.join("][")+"] should be a primitive, but is an array of "+n.length+" elements"})),E(n.length===e[0],(function(){return"Element arr["+r.join("][")+"] should have "+e[0]+" elements, but has "+n.length+" elements"}));for(var o=e.slice(1),a=0;a<n.length;++a)t(n[a],o,r.concat(a))}(t,r,[]),r}function Pt(t,n,e,r){if(null!=t&&("numeric"!==t&&t!==n||"numeric"===t&&"string"===n))throw new Error("Argument '"+e+"' passed to '"+r+"' must be "+t+" tensor, but got "+n+" tensor")}function Lt(t,n,e,r){if(void 0===r&&(r="numeric"),t instanceof dt)return Pt(r,t.dtype,n,e),t;var o=H(t);if("string"!==o&&["bool","int32","float32"].indexOf(r)>=0&&(o=r),Pt(r,o,n,e),null==t||!O(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t){var a=null==t?"null":t.constructor.name;throw new Error("Argument '"+n+"' passed to '"+e+"' must be a Tensor or TensorLike, but got '"+a+"'")}var i=Ct(t,o);O(t)||Array.isArray(t)||(t=[t]);var u="string"!==o?Z(t,o):I(t,[],!0);return Tt.makeTensor(u,i,o)}function zt(t,n,e,r){if(void 0===r&&(r="numeric"),!Array.isArray(t))throw new Error("Argument "+n+" passed to "+e+" must be a `Tensor[]` or `TensorLike[]`");return t.map((function(t,r){return Lt(t,n+"["+r+"]",e)}),r)}Rt.registerFlag("DEBUG",(function(){return!1}),(function(t){t&&console.warn("Debugging mode is ON. The output of every math call will be downloaded to CPU and checked for NaNs. This significantly impacts performance.")})),Rt.registerFlag("IS_BROWSER",(function(){return _t()})),Rt.registerFlag("IS_NODE",(function(){return"undefined"!=typeof process&&void 0!==process.versions&&void 0!==process.versions.node})),Rt.registerFlag("IS_CHROME",(function(){return"undefined"!=typeof navigator&&null!=navigator&&null!=navigator.userAgent&&/Chrome/.test(navigator.userAgent)&&/Google Inc/.test(navigator.vendor)})),Rt.registerFlag("PROD",(function(){return!1})),Rt.registerFlag("TENSORLIKE_CHECK_SHAPE_CONSISTENCY",(function(){return Rt.getBool("DEBUG")})),Rt.registerFlag("DEPRECATION_WARNINGS_ENABLED",(function(){return!0})),Rt.registerFlag("IS_TEST",(function(){return!1}));function qt(t){var n=Object.keys(t);if(1!==n.length)throw new Error("Please provide an object with a single key (operation name) mapping to a function. Got an object with "+n.length+" keys.");var e=n[0],r=t[e];e.endsWith("_")&&(e=e.substring(0,e.length-1)),e+="__op";var o=function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];Tt.startScope(e);try{var o=r.apply(void 0,t);return o instanceof Promise&&console.error("Cannot return a Promise inside of tidy."),Tt.endScope(o),o}catch(t){throw Tt.endScope(null),t}};return Object.defineProperty(o,"name",{value:e,configurable:!0}),o}var Ot=qt({complex_:function(t,n){var e=Lt(t,"real","complex"),r=Lt(n,"imag","complex");D(e.shape,r.shape,"real and imag shapes, "+e.shape+" and "+r.shape+", must match in call to tf.complex().");var o={real:e,imag:r};return Tt.runKernelFunc((function(t){return t.complex(e,r)}),o,null,"Complex")}});function Wt(t,n,e,r){if(null==r&&(r=H(t)),"complex64"===r)throw new Error("Cannot construct a complex64 tensor directly. Please use tf.complex(real, imag).");if(!O(t)&&!Array.isArray(t)&&"number"!=typeof t&&"boolean"!=typeof t&&"string"!=typeof t)throw new Error("values passed to tensor(values) must be a number/boolean/string or an array of numbers/booleans/strings, or a TypedArray");if(null!=n){nt(n);var o=F(n),a=F(e);E(o===a,(function(){return"Based on the provided shape, ["+n+"], the tensor should have "+o+" values but has "+a}));for(var i=0;i<e.length;++i){var u=e[i],s=i!==e.length-1||u!==F(n.slice(i));E(e[i]===n[i]||!s,(function(){return"Error creating a new Tensor. Inferred shape ("+e+") does not match the provided shape ("+n+"). "}))}}return O(t)||Array.isArray(t)||(t=[t]),n=n||e,t="string"!==r?Z(t,r):I(t,[],!0),Tt.makeTensor(t,n,r)}function Kt(t,n,e){return Wt(t,n,Ct(t,e),e)}var Ut={float32:4,float16:2,int32:4,uint16:2,uint8:1,bool:1,complex64:8};function Gt(t,n){for(var e,r={},o=0,a=0,i=n;a<i.length;a++){var u=i[a],s=u.name,c=u.dtype,l=u.shape,f=F(l),p=void 0;if("quantization"in u){var h=u.quantization;if("uint8"===h.dtype||"uint16"===h.dtype){if(!("min"in h)||!("scale"in h))throw new Error("Weight "+u.name+" with quantization "+h.dtype+" doesn't have corresponding metadata min and scale.")}else{if("float16"!==h.dtype)throw new Error("Weight "+u.name+" has unknown quantization dtype "+h.dtype+". Supported quantization dtypes are: 'uint8', 'uint16', and 'float16'.");if("float32"!==c)throw new Error("Weight "+u.name+" is quantized with "+h.dtype+" which only supports weights of type float32 not "+c+".")}var d=Ut[h.dtype],v=t.slice(o,o+f*d),m="uint8"===h.dtype?new Uint8Array(v):new Uint16Array(v);if("float32"===c)if("uint8"===h.dtype||"uint16"===h.dtype){p=new Float32Array(m.length);for(var g=0;g<m.length;g++){var y=m[g];p[g]=y*h.scale+h.min}}else{if("float16"!==h.dtype)throw new Error("Unsupported quantization type "+h.dtype+" for weight type float32.");void 0===e&&(e=Xt()),p=e(m)}else{if("int32"!==c)throw new Error("Unsupported dtype in weight '"+s+"': "+c);if("uint8"!==h.dtype&&"uint16"!==h.dtype)throw new Error("Unsupported quantization type "+h.dtype+" for weight type int32.");p=new Int32Array(m.length);for(g=0;g<m.length;g++){y=m[g];p[g]=Math.round(y*h.scale+h.min)}}o+=f*d}else if("string"===c){var b=F(u.shape);p=[];for(g=0;g<b;g++){var w=new Uint32Array(t.slice(o,o+4))[0];o+=4;var k=new Uint8Array(t.slice(o,o+w));p.push(k),o+=w}}else{var x=Ut[c];v=t.slice(o,o+f*x);if("float32"===c)p=new Float32Array(v);else if("int32"===c)p=new Int32Array(v);else if("bool"===c)p=new Uint8Array(v);else{if("complex64"!==c)throw new Error("Unsupported dtype in weight '"+s+"': "+c);p=new Float32Array(v);var S=new Float32Array(p.length/2),E=new Float32Array(p.length/2);for(g=0;g<S.length;g++)S[g]=p[2*g],E[g]=p[2*g+1];var D=Kt(S,l,"float32"),N=Kt(E,l,"float32");r[s]=Ot(D,N)}o+=f*x}"complex64"!==c&&(r[s]=Kt(p,l,c))}return r}function Vt(t){if(null===t)throw new Error("Invalid input value: "+JSON.stringify(t));var n=0,e=[];t.forEach((function(t){if(n+=t.byteLength,e.push(t.byteLength===t.buffer.byteLength?t:new t.constructor(t)),!(t instanceof Float32Array||t instanceof Int32Array||t instanceof Uint8Array))throw new Error("Unsupported TypedArray subtype: "+t.constructor.name)}));var r=new Uint8Array(n),o=0;return e.forEach((function(t){r.set(new Uint8Array(t.buffer),o),o+=t.byteLength})),r.buffer}var Ht="undefined"!=typeof Buffer&&("undefined"==typeof Blob||"undefined"==typeof atob||"undefined"==typeof btoa);function jt(t){return Ht?Buffer.byteLength(t):new Blob([t]).size}function Jt(t){if(1===t.length)return t[0];var n=0;t.forEach((function(t){n+=t.byteLength}));var e=new Uint8Array(n),r=0;return t.forEach((function(t){e.set(new Uint8Array(t),r),r+=t.byteLength})),e.buffer}function Yt(t){for(t=t.trim();t.endsWith("/");)t=t.slice(0,t.length-1);var n=t.split("/");return n[n.length-1]}function Zt(t){if(t.modelTopology instanceof ArrayBuffer)throw new Error("Expected JSON model topology, received ArrayBuffer.");return{dateSaved:new Date,modelTopologyType:"JSON",modelTopologyBytes:null==t.modelTopology?0:jt(JSON.stringify(t.modelTopology)),weightSpecsBytes:null==t.weightSpecs?0:jt(JSON.stringify(t.weightSpecs)),weightDataBytes:null==t.weightData?0:t.weightData.byteLength}}function Xt(){var t=function(){var t=function(t){for(var n=t<<13,e=0;0==(8388608&n);)e-=8388608,n<<=1;return(n&=-8388609)|(e+=947912704)},n=new Uint32Array(2048);n[0]=0;for(var e=1;e<1024;e++)n[e]=t(e);for(e=1024;e<2048;e++)n[e]=939524096+(e-1024<<13);return n}(),n=function(){var t=new Uint32Array(64);t[0]=0,t[31]=1199570944,t[32]=2147483648,t[63]=3347054592;for(var n=1;n<31;n++)t[n]=n<<23;for(n=33;n<63;n++)t[n]=2147483648+(n-32<<23);return t}(),e=function(){for(var t=new Uint32Array(64),n=0;n<64;n++)t[n]=1024;return t[0]=t[32]=0,t}();return function(r){for(var o=new ArrayBuffer(4*r.length),a=new Uint32Array(o),i=0;i<r.length;i++){var u=r[i],s=t[e[u>>10]+(1023&u)]+n[u>>10];a[i]=s}return new Float32Array(o)}}var $t=function(){function t(){this.saveRouters=[],this.loadRouters=[]}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerSaveRouter=function(n){t.getInstance().saveRouters.push(n)},t.registerLoadRouter=function(n){t.getInstance().loadRouters.push(n)},t.getSaveHandlers=function(n){return t.getHandlers(n,"save")},t.getLoadHandlers=function(n,e){return t.getHandlers(n,"load",e)},t.getHandlers=function(n,e,r){var o=[];return("load"===e?t.getInstance().loadRouters:t.getInstance().saveRouters).forEach((function(t){var e=t(n,r);null!==e&&o.push(e)})),o},t}();function Qt(){if(!f().getBool("IS_BROWSER"))throw new Error("Failed to obtain IndexedDB factory because the current environmentis not a web browser.");var t="undefined"==typeof window?self:window,n=t.indexedDB||t.mozIndexedDB||t.webkitIndexedDB||t.msIndexedDB||t.shimIndexedDB;if(null==n)throw new Error("The current browser does not appear to support IndexedDB.");return n}function tn(t){var n=t.result;n.createObjectStore("models_store",{keyPath:"modelPath"}),n.createObjectStore("model_info_store",{keyPath:"modelPath"})}var nn=function(){function t(t){if(this.indexedDB=Qt(),null==t||!t)throw new Error("For IndexedDB, modelPath must not be null, undefined or empty.");this.modelPath=t}return t.prototype.save=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(n){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");return[2,this.databaseAction(this.modelPath,t)]}))}))},t.prototype.load=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){return[2,this.databaseAction(this.modelPath)]}))}))},t.prototype.databaseAction=function(t,n){var e=this;return new Promise((function(t,r){var o=e.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return tn(o)},o.onsuccess=function(){var a=o.result;if(null==n){var i=a.transaction("models_store","readonly"),u=i.objectStore("models_store").get(e.modelPath);u.onsuccess=function(){if(null==u.result)return a.close(),r(new Error("Cannot find model with path '"+e.modelPath+"' in IndexedDB."));t(u.result.modelArtifacts)},u.onerror=function(t){return a.close(),r(u.error)},i.oncomplete=function(){return a.close()}}else{var s,c=Zt(n),l=a.transaction("model_info_store","readwrite"),f=l.objectStore("model_info_store"),p=f.put({modelPath:e.modelPath,modelArtifactsInfo:c});p.onsuccess=function(){var o=(s=a.transaction("models_store","readwrite")).objectStore("models_store").put({modelPath:e.modelPath,modelArtifacts:n,modelArtifactsInfo:c});o.onsuccess=function(){return t({modelArtifactsInfo:c})},o.onerror=function(t){var n=(f=l.objectStore("model_info_store")).delete(e.modelPath);n.onsuccess=function(){return a.close(),r(o.error)},n.onerror=function(t){return a.close(),r(o.error)}}},p.onerror=function(t){return a.close(),r(p.error)},l.oncomplete=function(){null==s?a.close():s.oncomplete=function(){return a.close()}}}},o.onerror=function(t){return r(o.error)}}))},t.URL_SCHEME="indexeddb://",t}(),en=function(t){return f().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(nn.URL_SCHEME)?(n=t.slice(nn.URL_SCHEME.length),new nn(n)):null;var n};$t.registerSaveRouter(en),$t.registerLoadRouter(en);var rn=function(){function t(){this.indexedDB=Qt()}return t.prototype.listModels=function(){return r(this,void 0,void 0,(function(){var t=this;return o(this,(function(n){return[2,new Promise((function(n,e){var r=t.indexedDB.open("tensorflowjs",1);r.onupgradeneeded=function(){return tn(r)},r.onsuccess=function(){var t=r.result,o=t.transaction("model_info_store","readonly"),a=o.objectStore("model_info_store").getAll();a.onsuccess=function(){for(var t={},e=0,r=a.result;e<r.length;e++){var o=r[e];t[o.modelPath]=o.modelArtifactsInfo}n(t)},a.onerror=function(n){return t.close(),e(a.error)},o.oncomplete=function(){return t.close()}},r.onerror=function(t){return e(r.error)}}))]}))}))},t.prototype.removeModel=function(t){return r(this,void 0,void 0,(function(){var n=this;return o(this,(function(e){var r;return t=(r=t).startsWith(nn.URL_SCHEME)?r.slice(nn.URL_SCHEME.length):r,[2,new Promise((function(e,r){var o=n.indexedDB.open("tensorflowjs",1);o.onupgradeneeded=function(){return tn(o)},o.onsuccess=function(){var n,a=o.result,i=a.transaction("model_info_store","readwrite"),u=i.objectStore("model_info_store"),s=u.get(t);s.onsuccess=function(){if(null==s.result)return a.close(),r(new Error("Cannot find model with path '"+t+"' in IndexedDB."));var o=u.delete(t),i=function(){var o=(n=a.transaction("models_store","readwrite")).objectStore("models_store").delete(t);o.onsuccess=function(){return e(s.result.modelArtifactsInfo)},o.onerror=function(t){return r(s.error)}};o.onsuccess=i,o.onerror=function(t){return i(),a.close(),r(s.error)}},s.onerror=function(t){return a.close(),r(s.error)},i.oncomplete=function(){null==n?a.close():n.oncomplete=function(){return a.close()}}},o.onerror=function(t){return r(o.error)}}))]}))}))},t}(),on="tensorflowjs_models",an="info",un="model_topology",sn="weight_specs",cn="weight_data",ln="model_metadata";function fn(t){return{info:[on,t,an].join("/"),topology:[on,t,un].join("/"),weightSpecs:[on,t,sn].join("/"),weightData:[on,t,cn].join("/"),modelMetadata:[on,t,ln].join("/")}}function pn(t){var n=t.split("/");if(n.length<3)throw new Error("Invalid key format: "+t);return n.slice(1,n.length-1).join("/")}var hn=function(){function t(t){if(!f().getBool("IS_BROWSER")||"undefined"==typeof window||void 0===window.localStorage)throw new Error("The current environment does not support local storage.");if(this.LS=window.localStorage,null==t||!t)throw new Error("For local storage, modelPath must not be null, undefined or empty.");this.modelPath=t,this.keys=fn(this.modelPath)}return t.prototype.save=function(t){return r(this,void 0,void 0,(function(){var n,e,r;return o(this,(function(o){if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserLocalStorage.save() does not support saving model topology in binary formats yet.");n=JSON.stringify(t.modelTopology),e=JSON.stringify(t.weightSpecs),r=Zt(t);try{return this.LS.setItem(this.keys.info,JSON.stringify(r)),this.LS.setItem(this.keys.topology,n),this.LS.setItem(this.keys.weightSpecs,e),this.LS.setItem(this.keys.weightData,function(t){if(Ht)return Buffer.from(t).toString("base64");for(var n=new Uint8Array(t),e="",r=0,o=n.length;r<o;r++)e+=String.fromCharCode(n[r]);return btoa(e)}(t.weightData)),this.LS.setItem(this.keys.modelMetadata,JSON.stringify({format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata})),[2,{modelArtifactsInfo:r}]}catch(t){throw this.LS.removeItem(this.keys.info),this.LS.removeItem(this.keys.topology),this.LS.removeItem(this.keys.weightSpecs),this.LS.removeItem(this.keys.weightData),this.LS.removeItem(this.keys.modelMetadata),new Error("Failed to save model '"+this.modelPath+"' to local storage: size quota being exceeded is a possible cause of this failure: modelTopologyBytes="+r.modelTopologyBytes+", weightSpecsBytes="+r.weightSpecsBytes+", weightDataBytes="+r.weightDataBytes+".")}return[2]}))}))},t.prototype.load=function(){return r(this,void 0,void 0,(function(){var t,n,e,r,a,i,u;return o(this,(function(o){if(null==(t=JSON.parse(this.LS.getItem(this.keys.info))))throw new Error("In local storage, there is no model with name '"+this.modelPath+"'");if("JSON"!==t.modelTopologyType)throw new Error("BrowserLocalStorage does not support loading non-JSON model topology yet.");if(n={},null==(e=JSON.parse(this.LS.getItem(this.keys.topology))))throw new Error("In local storage, the topology of model '"+this.modelPath+"' is missing.");if(n.modelTopology=e,null==(r=JSON.parse(this.LS.getItem(this.keys.weightSpecs))))throw new Error("In local storage, the weight specs of model '"+this.modelPath+"' are missing.");if(n.weightSpecs=r,null!=(a=this.LS.getItem(this.keys.modelMetadata))&&(i=JSON.parse(a),n.format=i.format,n.generatedBy=i.generatedBy,n.convertedBy=i.convertedBy,n.userDefinedMetadata=i.userDefinedMetadata),null==(u=this.LS.getItem(this.keys.weightData)))throw new Error("In local storage, the binary weight values of model '"+this.modelPath+"' are missing.");return n.weightData=function(t){if(Ht){var n=Buffer.from(t,"base64");return n.buffer.slice(n.byteOffset,n.byteOffset+n.byteLength)}for(var e=atob(t),r=new Uint8Array(e.length),o=0;o<e.length;++o)r.set([e.charCodeAt(o)],o);return r.buffer}(u),[2,n]}))}))},t.URL_SCHEME="localstorage://",t}(),dn=function(t){return f().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(hn.URL_SCHEME)?(n=t.slice(hn.URL_SCHEME.length),new hn(n)):null;var n};$t.registerSaveRouter(dn),$t.registerLoadRouter(dn);var vn=function(){function t(){E(f().getBool("IS_BROWSER"),(function(){return"Current environment is not a web browser"})),E("undefined"==typeof window||void 0!==window.localStorage,(function(){return"Current browser does not appear to support localStorage"})),this.LS=window.localStorage}return t.prototype.listModels=function(){return r(this,void 0,void 0,(function(){var t,n,e,r,a,i;return o(this,(function(o){for(t={},n=on+"/",e="/"+an,r=0;r<this.LS.length;++r)(a=this.LS.key(r)).startsWith(n)&&a.endsWith(e)&&(i=pn(a),t[i]=JSON.parse(this.LS.getItem(a)));return[2,t]}))}))},t.prototype.removeModel=function(t){return r(this,void 0,void 0,(function(){var n,e;return o(this,(function(r){var o;if(t=(o=t).startsWith(hn.URL_SCHEME)?o.slice(hn.URL_SCHEME.length):o,n=fn(t),null==this.LS.getItem(n.info))throw new Error("Cannot find model at path '"+t+"'");return e=JSON.parse(this.LS.getItem(n.info)),this.LS.removeItem(n.info),this.LS.removeItem(n.topology),this.LS.removeItem(n.weightSpecs),this.LS.removeItem(n.weightData),[2,e]}))}))},t}(),mn=function(){function t(){this.managers={}}return t.getInstance=function(){return null==t.instance&&(t.instance=new t),t.instance},t.registerManager=function(n,e){E(null!=n,(function(){return"scheme must not be undefined or null."})),n.endsWith("://")&&(n=n.slice(0,n.indexOf("://"))),E(n.length>0,(function(){return"scheme must not be an empty string."}));var r=t.getInstance();E(null==r.managers[n],(function(){return"A model store manager is already registered for scheme '"+n+"'."})),r.managers[n]=e},t.getManager=function(t){var n=this.getInstance().managers[t];if(null==n)throw new Error("Cannot find model manager for scheme '"+t+"'");return n},t.getSchemes=function(){return Object.keys(this.getInstance().managers)},t}();function gn(t){if(-1===t.indexOf("://"))throw new Error("The url string provided does not contain a scheme. Supported schemes are: "+mn.getSchemes().join(","));return{scheme:t.split("://")[0],path:t.split("://")[1]}}function yn(t,n,e){return void 0===e&&(e=!1),r(this,void 0,void 0,(function(){var r,a,i,u,s,c,l,f,p;return o(this,(function(o){switch(o.label){case 0:return E(t!==n,(function(){return"Old path and new path are the same: '"+t+"'"})),E((r=$t.getLoadHandlers(t)).length>0,(function(){return"Copying failed because no load handler is found for source URL "+t+"."})),E(r.length<2,(function(){return"Copying failed because more than one ("+r.length+") load handlers for source URL "+t+"."})),a=r[0],E((i=$t.getSaveHandlers(n)).length>0,(function(){return"Copying failed because no save handler is found for destination URL "+n+"."})),E(i.length<2,(function(){return"Copying failed because more than one ("+r.length+") save handlers for destination URL "+n+"."})),u=i[0],s=gn(t).scheme,c=gn(t).path,l=s===gn(t).scheme,[4,a.load()];case 1:return f=o.sent(),e&&l?[4,mn.getManager(s).removeModel(c)]:[3,3];case 2:o.sent(),o.label=3;case 3:return[4,u.save(f)];case 4:return p=o.sent(),!e||l?[3,6]:[4,mn.getManager(s).removeModel(c)];case 5:o.sent(),o.label=6;case 6:return[2,p.modelArtifactsInfo]}}))}))}var bn=function(){function t(){}return t.prototype.fetch=function(t,n){return fetch(t,n)},t.prototype.now=function(){return performance.now()},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Browser's encoder only supports utf-8, but got "+n);return null==this.textEncoder&&(this.textEncoder=new TextEncoder),this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return new TextDecoder(n).decode(t)},t}();if(f().get("IS_BROWSER")){f().setPlatform("browser",new bn);try{mn.registerManager(hn.URL_SCHEME,new vn)}catch(t){}try{mn.registerManager(nn.URL_SCHEME,new rn)}catch(t){}}var wn,kn=function(){return require("node-fetch")},xn=function(){function t(){this.util=require("util"),this.textEncoder=new this.util.TextEncoder}return t.prototype.fetch=function(t,n){return null!=f().global.fetch?f().global.fetch(t,n):(null==wn&&(wn=kn()),wn(t,n))},t.prototype.now=function(){var t=process.hrtime();return 1e3*t[0]+t[1]/1e6},t.prototype.encode=function(t,n){if("utf-8"!==n&&"utf8"!==n)throw new Error("Node built-in encoder only supports utf-8, but got "+n);return this.textEncoder.encode(t)},t.prototype.decode=function(t,n){return 0===t.length?"":new this.util.TextDecoder(n).decode(t)},t}();function Sn(t,n,e){return void 0===n&&(n="float32"),n=n||"float32",nt(t),new ft(t,n,e)}f().get("IS_NODE")&&f().setPlatform("node",new xn);var En=qt({cast_:function(t,n){var e=Lt(t,"x","cast");if(!z(n))throw new Error("Failed to cast to unknown dtype "+n);if("string"===n&&"string"!==e.dtype||"string"!==n&&"string"===e.dtype)throw new Error("Only strings can be casted to strings");var r={x:e},o={dtype:n};return Tt.runKernelFunc((function(t){return t.cast(e,n)}),r,null,"Cast",o)}});var Dn=qt({clone_:function(t){var n=Lt(t,"x","clone",null),e={x:n};return Tt.runKernelFunc((function(){return Tt.makeTensorFromDataId(n.dataId,n.shape,n.dtype)}),e,null,"Identity")}});function Nn(t,n){void 0===n&&(n=!1),console.log(t.toString(n))}At(),ht={buffer:Sn,cast:En,clone:Dn,print:Nn};function In(t){return new Promise((function(t){return setTimeout(t)})).then(t)}var Fn=function(){function t(n){if(!f().getBool("IS_BROWSER"))throw new Error("browserDownloads() cannot proceed because the current environment is not a browser.");n.startsWith(t.URL_SCHEME)&&(n=n.slice(t.URL_SCHEME.length)),null!=n&&0!==n.length||(n="model"),this.modelTopologyFileName=n+".json",this.weightDataFileName=n+".weights.bin"}return t.prototype.save=function(t){return r(this,void 0,void 0,(function(){var n,e,r,a,i,u;return o(this,(function(o){switch(o.label){case 0:if("undefined"==typeof document)throw new Error("Browser downloads are not supported in this environment since `document` is not present");if(n=window.URL.createObjectURL(new Blob([t.weightData],{type:"application/octet-stream"})),!(t.modelTopology instanceof ArrayBuffer))return[3,1];throw new Error("BrowserDownloads.save() does not support saving model topology in binary formats yet.");case 1:return e=[{paths:["./"+this.weightDataFileName],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,weightsManifest:e},a=window.URL.createObjectURL(new Blob([JSON.stringify(r)],{type:"application/json"})),(i=null==this.jsonAnchor?document.createElement("a"):this.jsonAnchor).download=this.modelTopologyFileName,i.href=a,[4,In((function(){return i.dispatchEvent(new MouseEvent("click"))}))];case 2:return o.sent(),null==t.weightData?[3,4]:((u=null==this.weightDataAnchor?document.createElement("a"):this.weightDataAnchor).download=this.weightDataFileName,u.href=n,[4,In((function(){return u.dispatchEvent(new MouseEvent("click"))}))]);case 3:o.sent(),o.label=4;case 4:return[2,{modelArtifactsInfo:Zt(t)}]}}))}))},t.URL_SCHEME="downloads://",t}(),An=function(){function t(t){if(null==t||t.length<1)throw new Error("When calling browserFiles, at least 1 file is required, but received "+t);this.files=t}return t.prototype.load=function(){return r(this,void 0,void 0,(function(){var t,n,e=this;return o(this,(function(r){return t=this.files[0],n=this.files.slice(1),[2,new Promise((function(r,o){var a=new FileReader;a.onload=function(a){var i=JSON.parse(a.target.result),u=i.modelTopology;if(null!=u){0===n.length&&r({modelTopology:u});var s=i.weightsManifest;if(null!=s){var c;try{c=e.checkManifestAndWeightFiles(s,n)}catch(t){return void o(t)}var l=[],f=[],p=[];s.forEach((function(t){t.paths.forEach((function(t){f.push(t),p.push(null)})),l.push.apply(l,t.weights)})),s.forEach((function(t){t.paths.forEach((function(t){var n=new FileReader;n.onload=function(n){var e=n.target.result,o=f.indexOf(t);p[o]=e,-1===p.indexOf(null)&&r({modelTopology:u,weightSpecs:l,weightData:Jt(p),format:i.format,generatedBy:i.generatedBy,convertedBy:i.convertedBy,userDefinedMetadata:i.userDefinedMetadata})},n.onerror=function(n){return o("Failed to weights data from file of path '"+t+"'.")},n.readAsArrayBuffer(c[t])}))}))}else o(new Error("weightManifest field is missing from file "+t.name))}else o(new Error("modelTopology field is missing from file "+t.name))},a.onerror=function(n){return o("Failed to read model topology and weights manifest JSON from file '"+t.name+"'. BrowserFiles supports loading Keras-style tf.Model artifacts only.")},a.readAsText(t)}))]}))}))},t.prototype.checkManifestAndWeightFiles=function(t,n){for(var e=[],r=n.map((function(t){return Yt(t.name)})),o={},a=0,i=t;a<i.length;a++){i[a].paths.forEach((function(t){var a=Yt(t);if(-1!==e.indexOf(a))throw new Error("Duplicate file basename found in weights manifest: '"+a+"'");if(e.push(a),-1===r.indexOf(a))throw new Error("Weight file with basename '"+a+"' is not provided.");o[t]=n[r.indexOf(a)]}))}if(e.length!==n.length)throw new Error("Mismatch in the number of files in weights manifest ("+e.length+") and the number of weight files provided ("+n.length+").");return o},t}();function Tn(t,n,e,r){!function(t){E(null!=t&&Array.isArray(t)&&t.length>0,(function(){return"promises must be a none empty array"}))}(t),function(t,n){E(t>=0&&t<=1,(function(){return"Progress fraction must be in range [0, 1], but got startFraction "+t})),E(n>=0&&n<=1,(function(){return"Progress fraction must be in range [0, 1], but got endFraction "+n})),E(n>=t,(function(){return"startFraction must be no more than endFraction, but got startFraction "+t+" and endFraction "+n}))}(e=null==e?0:e,r=null==r?1:r);var o=0;return Promise.all(t.map((function(a){return a.then((function(a){var i=e+ ++o/t.length*(r-e);return n(i),a})),a})))}function Mn(t,n){return r(this,void 0,void 0,(function(){var e,r,a,i,u,s,c,l,p;return o(this,(function(o){switch(o.label){case 0:return null==n&&(n={}),e=null==n.fetchFunc?f().platform.fetch:n.fetchFunc,r=t.map((function(t){return e(t,n.requestInit,{isBinary:!0})})),a=0,i=.5,null!=n.onProgress?[3,2]:[4,Promise.all(r)];case 1:return u=o.sent(),[3,4];case 2:return[4,Tn(r,n.onProgress,a,i)];case 3:u=o.sent(),o.label=4;case 4:return s=u.map((function(t){return t.arrayBuffer()})),c=.5,l=1,null!=n.onProgress?[3,6]:[4,Promise.all(s)];case 5:return p=o.sent(),[3,8];case 6:return[4,Tn(s,n.onProgress,c,l)];case 7:p=o.sent(),o.label=8;case 8:return[2,p]}}))}))}function _n(t){var n=this;return function(e,a,i){return void 0===a&&(a=""),r(n,void 0,void 0,(function(){var n,r,u,s,c,l,f,p,h,d;return o(this,(function(o){switch(o.label){case 0:if(n=e.map((function(){return!1})),r={},u=null!=i?i.map((function(){return!1})):[],s=[],e.forEach((function(t,e){var o=0;t.weights.forEach((function(t){var a="quantization"in t?t.quantization.dtype:t.dtype,c=Ut[a]*F(t.shape),l=function(){n[e]=!0,null==r[e]&&(r[e]=[]),r[e].push({manifestEntry:t,groupOffset:o,sizeBytes:c})};null!=i?i.forEach((function(n,e){n===t.name&&(l(),u[e]=!0)})):l(),s.push(t.name),o+=c}))})),!u.every((function(t){return t})))throw c=i.filter((function(t,n){return!u[n]})),new Error("Could not find weights in manifest with names: "+c.join(", ")+". \nManifest JSON has weights with names: "+s.join(", ")+".");return l=n.reduce((function(t,n,e){return n&&t.push(e),t}),[]),f=[],l.forEach((function(t){e[t].paths.forEach((function(t){var n=a+(a.endsWith("/")?"":"/")+t;f.push(n)}))})),[4,t(f)];case 1:return p=o.sent(),h={},d=0,l.forEach((function(t){for(var n=e[t].paths.length,o=0,a=0;a<n;a++)o+=p[d+a].byteLength;for(var i=new ArrayBuffer(o),u=new Uint8Array(i),s=0,c=0;c<n;c++){var l=new Uint8Array(p[d+c]);u.set(l,s),s+=l.byteLength}r[t].forEach((function(t){var n=Gt(i.slice(t.groupOffset,t.groupOffset+t.sizeBytes),[t.manifestEntry]);for(var e in n)h[e]=n[e]})),d+=n})),[2,h]}}))}))}}$t.registerSaveRouter((function(t){return f().getBool("IS_BROWSER")&&!Array.isArray(t)&&t.startsWith(Fn.URL_SCHEME)?function(t){void 0===t&&(t="model");return new Fn(t)}(t.slice(Fn.URL_SCHEME.length)):null}));var Bn=function(){function t(t,n){if(this.DEFAULT_METHOD="POST",null==n&&(n={}),this.weightPathPrefix=n.weightPathPrefix,this.onProgress=n.onProgress,this.weightUrlConverter=n.weightUrlConverter,null!=n.fetchFunc?(E("function"==typeof n.fetchFunc,(function(){return"Must pass a function that matches the signature of `fetch` (see https://developer.mozilla.org/en-US/docs/Web/API/Fetch_API)"})),this.fetch=n.fetchFunc):this.fetch=f().platform.fetch,E(null!=t&&t.length>0,(function(){return"URL path for http must not be null, undefined or empty."})),Array.isArray(t)&&E(2===t.length,(function(){return"URL paths for http must have a length of 2, (actual length is "+t.length+")."})),this.path=t,null!=n.requestInit&&null!=n.requestInit.body)throw new Error("requestInit is expected to have no pre-existing body, but has one.");this.requestInit=n.requestInit||{}}return t.prototype.save=function(t){return r(this,void 0,void 0,(function(){var n,e,r,a;return o(this,(function(o){switch(o.label){case 0:if(t.modelTopology instanceof ArrayBuffer)throw new Error("BrowserHTTPRequest.save() does not support saving model topology in binary formats yet.");return(n=Object.assign({method:this.DEFAULT_METHOD},this.requestInit)).body=new FormData,e=[{paths:["./model.weights.bin"],weights:t.weightSpecs}],r={modelTopology:t.modelTopology,format:t.format,generatedBy:t.generatedBy,convertedBy:t.convertedBy,userDefinedMetadata:t.userDefinedMetadata,weightsManifest:e},n.body.append("model.json",new Blob([JSON.stringify(r)],{type:"application/json"}),"model.json"),null!=t.weightData&&n.body.append("model.weights.bin",new Blob([t.weightData],{type:"application/octet-stream"}),"model.weights.bin"),[4,this.fetch(this.path,n)];case 1:if((a=o.sent()).ok)return[2,{modelArtifactsInfo:Zt(t),responses:[a]}];throw new Error("BrowserHTTPRequest.save() failed due to HTTP response status "+a.status+".")}}))}))},t.prototype.load=function(){return r(this,void 0,void 0,(function(){var t,n,e,r,a,i,u,s,c,l,f,p,h,d;return o(this,(function(o){switch(o.label){case 0:return[4,this.fetch(this.path,this.requestInit)];case 1:if(!(t=o.sent()).ok)throw new Error("Request to "+this.path+" failed with status code "+t.status+". Please verify this URL points to the model JSON of the model to load.");o.label=2;case 2:return o.trys.push([2,4,,5]),[4,t.json()];case 3:return n=o.sent(),[3,5];case 4:throw o.sent(),e="Failed to parse model JSON of response from "+this.path+".",this.path.endsWith(".pb")?e+=" Your path contains a .pb file extension. Support for .pb models have been removed in TensorFlow.js 1.0 in favor of .json models. You can re-convert your Python TensorFlow model using the TensorFlow.js 1.0 conversion scripts or you can convert your.pb models with the 'pb2json'NPM script in the tensorflow/tfjs-converter repository.":e+=" Please make sure the server is serving valid JSON for this request.",new Error(e);case 5:if(r=n.modelTopology,a=n.weightsManifest,i=n.generatedBy,u=n.convertedBy,s=n.format,c=n.userDefinedMetadata,null==r&&null==a)throw new Error("The JSON from HTTP path "+this.path+" contains neither model topology or manifest for weights.");return null==a?[3,7]:[4,this.loadWeights(a)];case 6:p=o.sent(),l=p[0],f=p[1],o.label=7;case 7:return h={modelTopology:r,weightSpecs:l,weightData:f,userDefinedMetadata:c,generatedBy:i,convertedBy:u,format:s},(d=n.modelInitializer)&&(h.modelInitializer=d),[2,h]}}))}))},t.prototype.loadWeights=function(t){return r(this,void 0,void 0,(function(){var n,e,r,a,i,u,s,c,l,f,p,h,d,v,m,g,y,b,w,k,x;return o(this,(function(o){switch(o.label){case 0:for(n=Array.isArray(this.path)?this.path[1]:this.path,e=function(t){var n=t.lastIndexOf("/"),e=t.lastIndexOf("?"),r=t.substring(0,n),o=e>n?t.substring(e):"";return[r+"/",o]}(n),r=e[0],a=e[1],i=this.weightPathPrefix||r,u=[],s=0,c=t;s<c.length;s++)l=c[s],u.push.apply(u,l.weights);for(f=[],p=[],h=0,d=t;h<d.length;h++)for(v=d[h],m=0,g=v.paths;m<g.length;m++)y=g[m],null!=this.weightUrlConverter?p.push(this.weightUrlConverter(y)):f.push(i+y+a);return this.weightUrlConverter?(w=(b=f.push).apply,k=[f],[4,Promise.all(p)]):[3,2];case 1:w.apply(b,k.concat([o.sent()])),o.label=2;case 2:return[4,Mn(f,{requestInit:this.requestInit,fetchFunc:this.fetch,onProgress:this.onProgress})];case 3:return x=o.sent(),[2,[u,Jt(x)]]}}))}))},t.URL_SCHEME_REGEX=/^https?:\/\//,t}();function Rn(t){return null!=t.match(Bn.URL_SCHEME_REGEX)}var Cn=function(t,n){if("undefined"==typeof fetch&&(null==n||null==n.fetchFunc))return null;return(Array.isArray(t)?t.every((function(t){return Rn(t)})):Rn(t))?Pn(t,n):null};function Pn(t,n){return new Bn(t,n)}$t.registerSaveRouter(Cn),$t.registerLoadRouter(Cn);var Ln=function(){function t(t){this.modelArtifacts=t}return t.prototype.load=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){return[2,this.modelArtifacts]}))}))},t}(),zn=function(){function t(t){this.saveHandler=t}return t.prototype.save=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(n){return[2,this.saveHandler(t)]}))}))},t}();var qn={__proto__:null,browserFiles:function(t){return new An(t)},browserHTTPRequest:function(t,n){return Pn(t,n)},concatenateArrayBuffers:Jt,decodeWeights:Gt,encodeWeights:function(t,n){return r(this,void 0,void 0,(function(){var e,a,i,u,s,c=this;return o(this,(function(l){switch(l.label){case 0:for(e=[],a=[],i=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t),u=function(u){var s=i[u],l=Array.isArray(t)?t[u].tensor:t[s];if("float32"!==l.dtype&&"int32"!==l.dtype&&"bool"!==l.dtype&&"string"!==l.dtype&&"complex64"!==l.dtype)throw new Error("Unsupported dtype in weight '"+s+"': "+l.dtype);var f={name:s,shape:l.shape,dtype:l.dtype};if("string"===l.dtype){var p=new Promise((function(t){return r(c,void 0,void 0,(function(){var n,e,r,a,i,u,s;return o(this,(function(o){switch(o.label){case 0:return[4,l.bytes()];case 1:for(n=o.sent(),e=n.reduce((function(t,n){return t+n.length}),0)+4*n.length,r=new Uint8Array(e),a=0,i=0;i<n.length;i++)u=n[i],s=new Uint8Array(new Uint32Array([u.length]).buffer),r.set(s,a),a+=4,r.set(u,a),a+=u.length;return t(r),[2]}}))}))}));a.push(p)}else a.push(l.data());null!=n&&(f.group=n),e.push(f)},s=0;s<i.length;++s)u(s);return[4,Promise.all(a)];case 1:return[2,{data:Vt(l.sent()),specs:e}]}}))}))},fromMemory:function(t,n,e,r){if(1===arguments.length){var o=null!=t.modelTopology||null!=t.weightSpecs;return o?new Ln(t):(console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ln({modelTopology:t}))}return console.warn("Please call tf.io.fromMemory() with only one argument. The argument should be of type ModelArtifacts. The multi-argument signature of tf.io.fromMemory() has been deprecated and will be removed in a future release."),new Ln({modelTopology:t,weightSpecs:n,weightData:e,trainingConfig:r})},getLoadHandlers:function(t,n){return $t.getLoadHandlers(t,n)},getModelArtifactsInfoForJSON:Zt,getSaveHandlers:function(t){return $t.getSaveHandlers(t)},http:Pn,isHTTPScheme:Rn,loadWeights:function(t,n,e,a){return void 0===n&&(n=""),r(this,void 0,void 0,(function(){return o(this,(function(r){return[2,_n((function(t){return Mn(t,{requestInit:a})}))(t,n,e)]}))}))},registerLoadRouter:function(t){return $t.registerLoadRouter(t)},registerSaveRouter:function(t){return $t.registerSaveRouter(t)},weightsLoaderFactory:_n,withSaveHandler:function(t){return new zn(t)},copyModel:function(t,n){return r(this,void 0,void 0,(function(){return o(this,(function(e){return!1,[2,yn(t,n,!1)]}))}))},listModels:function(){return r(this,void 0,void 0,(function(){var t,n,e,r,a,i,u;return o(this,(function(o){switch(o.label){case 0:t=mn.getSchemes(),n={},e=0,r=t,o.label=1;case 1:return e<r.length?(a=r[e],[4,mn.getManager(a).listModels()]):[3,4];case 2:for(u in i=o.sent())n[a+"://"+u]=i[u];o.label=3;case 3:return e++,[3,1];case 4:return[2,n]}}))}))},moveModel:function(t,n){return r(this,void 0,void 0,(function(){return o(this,(function(e){return!0,[2,yn(t,n,!0)]}))}))},removeModel:function(t){return r(this,void 0,void 0,(function(){var n;return o(this,(function(e){return n=gn(t),[2,mn.getManager(n.scheme).removeModel(n.path)]}))}))}};var On=qt({reshape_:function(t,n){var e=Lt(t,"x","reshape",null),r={x:e},o={shape:n};return Tt.runKernelFunc((function(t,r){return n=_(n,e.size),E(e.size===F(n),(function(){return"new shape and old shape must have the same number of elements."})),r([e]),t.reshape(e,n)}),r,null,"Reshape",o)}});var Wn=qt({matMul_:function(t,n,e,r){var o;void 0===e&&(e=!1),void 0===r&&(r=!1);var a=Lt(t,"a","matMul"),i=Lt(n,"b","matMul");o=St(a,i),a=o[0],i=o[1],E(a.rank>=2&&i.rank>=2&&a.rank===i.rank,(function(){return"Error in matMul: inputs must have the same rank of at least 2, got ranks "+a.rank+" and "+i.rank+"."}));var u=e?a.shape[a.rank-2]:a.shape[a.rank-1],s=r?i.shape[i.rank-1]:i.shape[i.rank-2],c=e?a.shape[a.rank-1]:a.shape[a.rank-2],l=r?i.shape[i.rank-2]:i.shape[i.rank-1],f=a.shape.slice(0,-2),p=i.shape.slice(0,-2),h=F(f),d=F(p);E(A(f,p),(function(){return"Error in matMul: outer dimensions ("+f+") and ("+p+") of Tensors with shapes "+a.shape+" and "+i.shape+" must match."})),E(u===s,(function(){return"Error in matMul: inner shapes ("+u+") and ("+s+") of Tensors with shapes "+a.shape+" and "+i.shape+" and transposeA="+e+" and transposeB="+r+" must match."}));var v=a.shape.slice(0,-2).concat([c,l]),m=On(a,e?[h,u,c]:[h,c,u]),g=On(i,r?[d,l,s]:[d,s,l]),y={a:m,b:g},b={transposeA:e,transposeB:r},w=Tt.runKernelFunc((function(t,n){return n([m,g]),t.batchMatMul(m,g,e,r)}),y,null,"BatchMatMul",b);return On(w,v)}});var Kn=qt({oneHot_:function(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r=0),n<2)throw new Error("Error in oneHot: depth must be >=2, but it is "+n);var o=Lt(t,"indices","oneHot","int32"),a=o.shape.concat([n]),i={indices:o},u={depth:n,onValue:e,offValue:r};return Tt.runKernelFunc((function(t,i){return i([o]),On(t.oneHot(On(o,[o.size]),n,e,r),a)}),i,null,"OneHot",u)}});var Un=qt({transpose_:function(t,n){var e=Lt(t,"x","transpose");if(null==n&&(n=e.shape.map((function(t,n){return n})).reverse()),E(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of perm "+n+"."})),n.forEach((function(t){E(t>=0&&t<e.rank,(function(){return"All entries in 'perm' must be between 0 and "+(e.rank-1)+" but got "+n}))})),e.rank<=1)return e.clone();var r={x:e},o={perm:n};return Tt.runKernelFunc((function(t){return t.transpose(e,n)}),r,null,"Transpose",o)}});var Gn,Vn={__proto__:null,confusionMatrix:qt({confusionMatrix_:function(t,n,e){var r=Lt(t,"labels","confusionMatrix"),o=Lt(n,"predictions","confusionMatrix");E(null==e||e>0&&Number.isInteger(e),(function(){return"If provided, numClasses must be a positive integer, but got "+e})),E(1===r.rank,(function(){return"Expected the rank of labels to be 1, but got "+r.rank})),E(1===o.rank,(function(){return"Expected the rank of predictions to be 1, but got "+o.rank})),E(r.shape[0]===o.shape[0],(function(){return"Mismatch in the number of examples: "+r.shape[0]+" vs. "+o.shape[0]+". Labels and predictions should have the same number of elements."})),E(e>0&&Number.isInteger(e),(function(){return"numClasses is required to be a positive integer, but got "+e}));var a=Kn(En(r,"int32"),e),i=Kn(En(o,"int32"),e),u=Un(a);return En(Wn(u,i),"int32")}})};function Hn(t,n,e){if(N(t),null!=n&&3!==n.length)throw new Error("tensor3d() requires shape to have three numbers");var r=Ct(t,e);if(3!==r.length&&1!==r.length)throw new Error("tensor3d() requires values to be number[][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor3d() requires shape to be provided when `values` are a flat array");return Wt(t,n,r,e)}var jn={__proto__:null,toPixels:function(t,n){return r(this,void 0,void 0,(function(){var e,r,a,i,u,s,c,l,f,p,h,d,v,m,g,y;return o(this,(function(o){switch(o.label){case 0:if(e=Lt(t,"img","toPixels"),t instanceof dt||(e=En(r=e,"int32"),r.dispose()),2!==e.rank&&3!==e.rank)throw new Error("toPixels only supports rank 2 or 3 tensors, got rank "+e.rank+".");if(a=e.shape.slice(0,2),i=a[0],u=a[1],(s=2===e.rank?1:e.shape[2])>4||2===s)throw new Error("toPixels only supports depth of size 1, 3 or 4 but got "+s);if("float32"!==e.dtype&&"int32"!==e.dtype)throw new Error("Unsupported type for toPixels: "+e.dtype+". Please use float32 or int32 tensors.");return[4,e.data()];case 1:for(c=o.sent(),l="float32"===e.dtype?255:1,f=new Uint8ClampedArray(u*i*4),p=0;p<i*u;++p){for(h=[0,0,0,255],d=0;d<s;d++){if(v=c[p*s+d],"float32"===e.dtype){if(v<0||v>1)throw new Error("Tensor values for a float32 Tensor must be in the range [0 - 1] but encountered "+v+".")}else if("int32"===e.dtype&&(v<0||v>255))throw new Error("Tensor values for a int32 Tensor must be in the range [0 - 255] but encountered "+v+".");1===s?(h[0]=v*l,h[1]=v*l,h[2]=v*l):h[d]=v*l}f[(m=4*p)+0]=Math.round(h[0]),f[m+1]=Math.round(h[1]),f[m+2]=Math.round(h[2]),f[m+3]=Math.round(h[3])}return null!=n&&(n.width=u,n.height=i,g=n.getContext("2d"),y=new ImageData(f,u,i),g.putImageData(y,0,0)),e!==t&&e.dispose(),[2,f]}}))}))},fromPixels:qt({fromPixels_:function(t,n){if(void 0===n&&(n=3),n>4)throw new Error("Cannot construct Tensor with more than 4 channels from pixels.");if(null==t)throw new Error("pixels passed to tf.browser.fromPixels() can not be null");var e=!1,r=!1,o=!1,a=!1,i=!1;if(t.data instanceof Uint8Array)e=!0;else if("undefined"!=typeof ImageData&&t instanceof ImageData)r=!0;else if("undefined"!=typeof HTMLVideoElement&&t instanceof HTMLVideoElement)o=!0;else if("undefined"!=typeof HTMLImageElement&&t instanceof HTMLImageElement)a=!0;else{if(null==t.getContext)throw new Error("pixels passed to tf.browser.fromPixels() must be either an HTMLVideoElement, HTMLImageElement, HTMLCanvasElement, ImageData in browser, or OffscreenCanvas, ImageData in webworker or {data: Uint32Array, width: number, height: number}, but was "+t.constructor.name);i=!0}if(o){if(o&&t.readyState<2)throw new Error("The video element has not loaded data yet. Please wait for `loadeddata` event on the <video> element.")}if(null!=m("FromPixels",Tt.backendName)){var u={pixels:t},s={numChannels:n};return Tt.runKernel("FromPixels",u,s)}var c,l,f=o?[t.videoWidth,t.videoHeight]:[t.width,t.height],p=f[0],h=f[1];if(i?c=t.getContext("2d").getImageData(0,0,p,h).data:r||e?c=t.data:(a||o)&&(null==Gn&&(Gn=document.createElement("canvas").getContext("2d")),Gn.canvas.width=p,Gn.canvas.height=h,Gn.drawImage(t,0,0,p,h),c=Gn.getImageData(0,0,p,h).data),4===n)l=new Int32Array(c);else{var d=p*h;l=new Int32Array(d*n);for(var v=0;v<d;v++)for(var g=0;g<n;++g)l[v*n+g]=c[4*v+g]}return Hn(l,[h,p,n],"int32")}})};function Jn(t,n){if(t.rank<1)throw new Error("tf.gatherND() expects the input to be rank 1 or higher, but the rank was "+t.rank+".");if(n.rank<1)throw new Error("tf.gatherND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if("int32"!==n.dtype)throw new Error("tf.gatherND() expects the indices to be int32 type, but the dtype was "+n.dtype+".");if(n.shape[n.rank-1]>t.rank)throw new Error("index innermost dimension length must be <= tensor rank; saw: "+n.shape[n.rank-1]+" vs. "+t.rank);if(0===t.size)throw new Error("Requested more than 0 entries, but input is empty. Input shape: "+t.shape+".");for(var e=n.shape,r=e[e.length-1],o=1,a=0;a<e.length-1;++a)o*=e[a];var i=t.shape,u=e.slice();u.pop();var s=1;for(a=r;a<t.rank;++a)s*=i[a],u.push(i[a]);var c=Y(t.shape).map((function(t){return t/s})).concat([1]).slice(0,r);return[u,o,s,c]}var Yn={__proto__:null,prepareAndValidate:Jn};function Zn(t,n,e){var r=n.rank>1?n.shape[n.rank-1]:1,o=n.rank>1?n.rank-1:1,a="Must have updates.shape = indices.shape[:batchDim] + shape[sliceDim:], got updates.shape: "+e.shape+", indices.shape: "+n.shape+", shape: "+t+", sliceDim: "+r+", and batchDim: "+o+".";if(e.rank<o)throw new Error(a+" update.rank < "+o+". ");if(t.length<r+(e.rank-o))throw new Error(a+" Output shape length < "+(r+(e.rank-o)));if(e.rank!==o+t.length-r)throw new Error(a+" update.rank != "+(o+t.length-r));for(var i=0;i<o;++i)if(e.shape[i]!==n.shape[i])throw new Error(a+" updates.shape["+i+"] ("+e.shape[i]+") != indices.shape["+i+"] ("+n.shape[i]+").");for(i=0;i<e.rank-o;++i)if(e.shape[i+o]!==t[i+r])throw new Error(a+" updates.shape["+(i+o)+"] ("+e.shape[i+o]+") != shape["+(i+o)+"] ("+t[i+o]+")")}function Xn(t,n,e){if(n.rank<1)throw new Error("tf.scatterND() expects the indices to be rank 1 or higher, but the rank was "+n.rank+".");if(t.rank<1)throw new Error("tf.scatterND() expects the updates to be rank 1 or higher, but the rank was "+t.rank+".");if("int32"!==n.dtype)throw new Error("The dtype of 'indices' should be int32, but got dtype: "+n.dtype);if(e.length<1)throw new Error("Output rank must be greater or equal to 1, but got shape: "+e);if(0===e.length){if(0===n.size)throw new Error("Indices specified for empty output. indices shape: "+n.shape);if(0===t.size)throw new Error("Updates specified for empty output. updates shape: "+t.shape)}Zn(e,n,t)}function $n(t,n,e){for(var r=n.shape.length,o=r>1?n.shape[r-1]:1,a=e.length,i=1,u=o;u<a;++u)i*=e[u];var s=o<1?1:o;return{sliceRank:o,numUpdates:F(n.shape)/s,sliceSize:i,strides:Y(e.slice(0,o)).concat([1]),outputSize:F(e)}}var Qn={__proto__:null,validateUpdateShape:Zn,validateInput:Xn,calculateShapes:$n};function te(t,n,e){var r=t.shape.length;E(r===n.length,(function(){return"Error in slice"+r+"D: Length of begin "+n+" must match the rank of the array ("+r+")."})),E(r===e.length,(function(){return"Error in slice"+r+"D: Length of size "+e+" must match the rank of the array ("+r+")."}));for(var o=function(o){E(n[o]+e[o]<=t.shape[o],(function(){return"Error in slice"+r+"D: begin["+o+"] + size["+o+"] ("+(n[o]+e[o])+") would overflow input.shape["+o+"] ("+t.shape[o]+")"}))},a=0;a<r;++a)o(a)}function ne(t){for(var n=[],e=0;t>0;)1&t&&n.push(e),t/=2,e++;return n}function ee(t,n,e){for(var r=[],o=0;o<t.length;o++)r[o]=Math.ceil((n[o]-t[o])/e[o]);return r}function re(t,n,e,r){for(var o=t.slice(),a=o.length;a<r.length;a++)o.push(1);for(a=0;a<e;a++)0===a?o[n]=1:(o.splice(n,0,1),o.pop());return o}function oe(t,n,e){return e<=t?e:e-(n-1)}function ae(t,n){for(var e=[],r=0;r<t;r++)e.push(n+r);return e}function ie(t,n,e,r,o,a,i,u,s){var c=t.length,l=new Array(c),f=new Array(c),p=new Array(c);if(n.length&&e>0){var h=n[0],d=e+1;l=ue(i,h,d,r,t),f=se(u,h,d,o,t),p=re(a,h,d,t)}else for(var v=0;v<c;v++)l[v]=le(i,r,a,t,v,s),f[v]=fe(u,o,a,t,v,s),p[v]=ce(a,v,s);return{begin:l,end:f,strides:p}}function ue(t,n,e,r,o){for(var a=o.slice(),i=ae(e,n),u=0;u<a.length;u++)if(i.indexOf(u)>-1)a[u]=0;else{var s=oe(n,e,u),c=r[s];t&1<<s&&(c=0),a[u]=c}return a}function se(t,n,e,r,o){for(var a=o.slice(),i=ae(e,n),u=0;u<a.length;u++)if(i.indexOf(u)>-1)a[u]=Number.MAX_SAFE_INTEGER;else{var s=oe(n,e,u),c=r[s];t&1<<s&&(c=Number.MAX_SAFE_INTEGER),a[u]=c}for(var l=0;l<a.length;l++){var f=o[l];a[l]<0&&(a[l]+=f),a[l]=S(0,a[l],o[l])}return a}function ce(t,n,e){var r=t[n];return(e&1<<n||null==r)&&(r=1),r}function le(t,n,e,r,o,a){var i=n[o],u=e[o]||1;(t&1<<o||a&1<<o||null==i)&&(i=u>0?Number.MIN_SAFE_INTEGER:Number.MAX_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),i=S(0,i,s-1)}function fe(t,n,e,r,o,a){var i=n[o],u=e[o]||1;(t&1<<o||a&1<<o||null==i)&&(i=u>0?Number.MAX_SAFE_INTEGER:Number.MIN_SAFE_INTEGER);var s=r[o];return i<0&&(i+=s),i=u>0?S(0,i,s):S(-1,i,s-1)}function pe(t,n,e){var r,o,a=t.shape.length;return(r="number"==typeof n?[n].concat(new Array(a-1).fill(0)):n.length<a?n.concat(new Array(a-n.length).fill(0)):n.slice()).forEach((function(t){E(-1!==t,(function(){return"slice() does not support negative begin indexing."}))})),o=(o=null==e?new Array(a).fill(-1):"number"==typeof e?[e].concat(new Array(a-1).fill(-1)):e.length<a?e.concat(new Array(a-e.length).fill(-1)):e).map((function(n,e){return n>=0?n:(E(-1===n,(function(){return"Negative size values should be exactly -1 but got "+n+" for the slice() size at index "+e+"."})),t.shape[e]-r[e])})),[r,o]}var he={__proto__:null,assertParamsValid:te,maskToAxes:ne,computeOutShape:ee,stridesWithElidedDims:re,getNormalizedAxes:ie,startIndicesWithElidedDims:ue,stopIndicesWithElidedDims:se,stridesForAxis:ce,startForAxis:le,stopForAxis:fe,isSliceContinous:function(t,n,e){for(var r=e.length,o=0;o<e.length;o++)if(e[o]>1){r=o;break}for(o=r+1;o<e.length;o++)if(n[o]>0||e[o]!==t[o])return!1;return!0},computeFlatOffset:function(t,n){for(var e=t.length>0?t[t.length-1]:1,r=0;r<t.length-1;r++)e+=t[r]*n[r];return e},parseSliceParams:pe},de=function(){function t(){}return t.prototype.getClassName=function(){return this.constructor.className},t.fromConfig=function(t,n){return new t(n)},t}(),ve=function(){function t(){this.classNameMap={}}return t.getMap=function(){return null==t.instance&&(t.instance=new t),t.instance},t.register=function(n){t.getMap().classNameMap[n.className]=[n,n.fromConfig]},t}();function me(t){E(null!=t.className,(function(){return"Class being registered does not have the static className property defined."})),E("string"==typeof t.className,(function(){return"className is required to be a string, but got type "+typeof t.className})),E(t.className.length>0,(function(){return"Class being registered has an empty-string as its className, which is disallowed."})),ve.register(t)}var ge={__proto__:null,Serializable:de,SerializationMap:ve,registerClass:me};function ye(){return 32===Tt.backend.floatPrecision()?.001:.1}function be(t,n,e){var r=!0;if((O(t)||O(n))&&(r=!1),O(t)&&O(n)&&(r=!0),r){var o=t.constructor.name,a=n.constructor.name;if(o!==a)throw new Error("Arrays are of different type. Actual: "+o+". Expected: "+a)}if(Array.isArray(t)&&Array.isArray(n)){var i=Ct(t),u=Ct(n);if(!A(i,u))throw new Error("Arrays have different shapes. Actual: ["+i+"]. Expected: ["+u+"]")}var s=O(t)?t:I(t),c=O(n)?n:I(n);if(s.length!==c.length)throw new Error("Arrays have different lengths actual: "+s.length+" vs expected: "+c.length+".\nActual:   "+s+".\nExpected: "+c+".");for(var l=0;l<c.length;++l){var f=s[l],p=c[l];if(!e(f,p))throw new Error("Arrays differ: actual["+l+"] = "+f+", expected["+l+"] = "+p+".\nActual:   "+s+".\nExpected: "+c+".")}}function we(t,n,e){return!isFinite(t)&&!isFinite(n)||!(isNaN(t)||isNaN(n)||Math.abs(t-n)>e)}var ke={__proto__:null,TEST_EPSILON_FLOAT16:.1,expectArraysClose:function(t,n,e){return null==e&&(e=ye()),be(t,n,(function(t,n){return we(t,n,e)}))},testEpsilon:ye,expectPromiseToFail:function(t,n){t().then((function(){return n.fail()}),(function(){return n()}))},expectArraysEqual:function(t,n){var e="string"==typeof n||"number"==typeof n||"boolean"==typeof n?[n]:n;return U(t)||U(t[0])||U(n)||U(n[0])?be(t,e,(function(t,n){return t==n})):be(t,n,(function(t,n){return we(t,n,0)}))},expectNumbersClose:function(t,n,e){if(null==e&&(e=ye()),!we(t,n,e))throw new Error("Numbers differ: actual === "+t+", expected === "+n)},expectValuesInRange:function(t,n,e){for(var r=0;r<t.length;r++)if(t[r]<n||t[r]>e)throw new Error("Value out of range:"+t[r]+" low: "+n+", high: "+e)},expectArrayBuffersEqual:function(t,n){expect(new Float32Array(t)).toEqual(new Float32Array(n))}};function xe(t){f().getBool("DEPRECATION_WARNINGS_ENABLED")&&console.warn(t+" You can disable deprecation warnings with tf.disableDeprecationWarnings().")}function Se(t,n){return Tt.tidy(t,n)}function Ee(t){Dt(t).forEach((function(t){return t.dispose()}))}function De(t){return Tt.keep(t)}var Ne=qt({add_:function(t,n){var e,r=Lt(t,"a","add"),o=Lt(n,"b","add");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.add(r,o);return n([r,o]),e}),a,null,"Add")}});var Ie=qt({floorDiv_:function(t,n){var e,r=Lt(t,"a","floorDiv"),o=Lt(n,"b","floorDiv");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.floorDiv(r,o);return n([r,o]),e}),a,null,"FloorDiv")}});var Fe=qt({div_:function(t,n){var e,r=Lt(t,"a","div"),o=Lt(n,"b","div");if(e=St(r,o),r=e[0],o=e[1],"int32"===r.dtype&&"int32"===o.dtype)return Ie(r,o);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.realDivide(r,o);return n([r,o]),e}),a,null,"Div",{})}});var Ae=qt({mul_:function(t,n){var e,r=Lt(t,"a","mul"),o=Lt(n,"b","mul");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.multiply(r,o);return n([r,o]),e}),a,null,"Multiply")}});var Te=qt({abs_:function(t){var n=Lt(t,"x","abs"),e={x:n};return Tt.runKernelFunc((function(t,e){return e([n]),"complex64"===n.dtype?t.complexAbs(n):t.abs(n)}),e,null,"Abs")}});var Me=qt({acos_:function(t){var n=Lt(t,"x","acos"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.acos(n);return e([n]),r}),e,null,"Acos")}});var _e=qt({acosh_:function(t){var n=Lt(t,"x","acosh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.acosh(n);return e([n]),r}),e,null,"Acosh")}});var Be=qt({addN_:function(t){E(Array.isArray(t),(function(){return"The argument passed to tf.addN() must be a list of tensors"})),E(t.length>=1,(function(){return"Must pass at least one tensor to tf.addN(), but got "+t.length}));var n=t.map((function(t,n){return Lt(t,"tensors"+n,"addN")})),e=n[0];n.forEach((function(t){if(t.dtype!==e.dtype)throw new Error("All tensors passed to tf.addN() must have the same dtype")})),n.forEach((function(t){if(!A(t.shape,e.shape))throw new Error("All tensors passed to tf.addN() must have the same shape")}));var r=n;return Tt.runKernelFunc((function(t,e){var r=t.addN(n);return e(n),r}),r,null,"AddN")}});function Re(t,n){for(var e=0;e<t.length;++e)if(t[t.length-e-1]!==n-1-e)return!1;return!0}function Ce(t,n,e){for(var r=t.length+n.length,o=[],a=0,i=0,u=0;u<r;u++)-1===e.indexOf(u)?o.push(t[a++]):o.push(n[i++]);return o}function Pe(t,n){for(var e=[],r=t.length,o=0;o<r;o++)-1===n.indexOf(o)&&e.push(t[o]);return[e,n.map((function(n){return t[n]}))]}function Le(t,n){return Ce(t,n.map((function(t){return 1})),n)}function ze(t,n){if(Re(t,n))return null;for(var e=[],r=0;r<n;++r)-1===t.indexOf(r)&&e.push(r);return t.forEach((function(t){return e.push(t)})),e}function qe(t){return t.map((function(t,n){return[n,t]})).sort((function(t,n){return t[1]-n[1]})).map((function(t){return t[0]}))}function Oe(t,n){for(var e=[],r=n-t;r<n;++r)e.push(r);return e}var We=qt({all_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","all","bool"),o={x:r},a={axis:n,keepDims:e};return Tt.runKernelFunc((function(t){var o=B(n,r.shape),a=o,i=ze(a,r.rank);null!=i&&(r=Un(r,i),a=Oe(a.length,r.rank));var u=t.all(r,a);if(e){var s=Le(u.shape,o);return On(u,s)}return u}),o,null,"All",a)}});var Ke=qt({any_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","any","bool"),o={x:r},a={axis:n,keepDims:e};return Tt.runKernelFunc((function(t){var o=B(n,r.shape),a=o,i=ze(a,r.rank);null!=i&&(r=Un(r,i),a=Oe(a.length,r.rank));var u=t.any(r,a);if(e){var s=Le(u.shape,o);return On(u,s)}return u}),o,null,"Any",a)}});var Ue=qt({argMax_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","argMax"),r={x:e},o={axis:n};return Tt.runKernelFunc((function(t,r){r([e]);var o=B(n,e.shape),a=ze(o,e.rank);return null!=a&&(e=Un(e,a),o=Oe(o.length,e.rank)),t.argMax(e,o[0])}),r,null,"ArgMax",o)}});var Ge=qt({argMin_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","argMin"),r={x:e},o={axis:n};return Tt.runKernelFunc((function(t,r){r([e]),null==n&&(n=0);var o=B(n,e.shape),a=ze(o,e.rank);return null!=a&&(e=Un(e,a),o=Oe(o.length,e.rank)),t.argMin(e,o[0])}),r,null,"ArgMin",o)}});var Ve=qt({asin_:function(t){var n=Lt(t,"x","asin"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.asin(n);return e([n]),r}),e,null,"Asin")}});var He=qt({asinh_:function(t){var n=Lt(t,"x","asinh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.asinh(n);return e([n]),r}),e,null,"Asinh")}});var je=qt({atan_:function(t){var n=Lt(t,"x","atan"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.atan(n);return e([n]),r}),e,null,"Atan")}});var Je=qt({atan2_:function(t,n){var e,r=Lt(t,"a","atan2"),o=Lt(n,"b","atan2");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.atan2(r,o);return n([r,o]),e}),a,null,"Atan2")}});var Ye=qt({atanh_:function(t){var n=Lt(t,"x","atanh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.atanh(n);return e([n]),r}),e,null,"Atanh")}});function Ze(t,n,e,r,o,a,i){void 0===i&&(i="channelsLast");var u,s=nr(n),c=s[0],l=s[1];if("channelsLast"===i)u=[c,l,t[3],t[3]];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);u=[c,l,t[1],t[1]]}return $e(t,u,e,r,o,a,!1,i)}function Xe(t,n,e,r,o,a,i){void 0===i&&(i="NDHWC");var u,s,c=er(n),l=c[0],f=c[1],p=c[2];if("NDHWC"===i)s="channelsLast",u=[l,f,p,t[4],t[4]];else{if("NCDHW"!==i)throw new Error("Unknown dataFormat "+i);s="channelsFirst",u=[l,f,p,t[1],t[1]]}return Qe(t,u,e,r,o,!1,s,a)}function $e(t,n,e,r,o,a,i,u){void 0===i&&(i=!1),void 0===u&&(u="channelsLast");var s=[-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],p=s[3];if("channelsLast"===u)c=t[0],l=t[1],f=t[2],p=t[3];else{if("channelsFirst"!==u)throw new Error("Unknown dataFormat "+u);c=t[0],p=t[1],l=t[2],f=t[3]}var h,d=n[0],v=n[1],m=n[3],g=nr(e),y=g[0],b=g[1],w=nr(r),k=w[0],x=w[1],S=rr(d,k),D=rr(v,x),N=function(t,n,e,r,o,a,i,u,s){var c,l,f;if("number"==typeof t){c={top:t,bottom:t,left:t,right:t,type:0===t?"VALID":"NUMBER"};var p=function(t,n,e,r,o){null==r&&(r=tr(t,n,e));var a=t[0],i=t[1],u=or((a-n+2*r)/e+1,o);E(T(u),(function(){return"The output # of rows ("+u+") must be an integer. Change the stride and/or zero pad parameters"}));var s=or((i-n+2*r)/e+1,o);return E(T(s),(function(){return"The output # of columns ("+s+") must be an integer. Change the stride and/or zero pad parameters"})),[u,s]}([n,e],a,r,t,u);l=p[0],f=p[1]}else if("same"===t){l=Math.ceil(n/r),f=Math.ceil(e/o);var h=Math.max(0,(l-1)*r+a-n),d=Math.max(0,(f-1)*o+i-e),v=Math.floor(h/2),m=h-v,g=Math.floor(d/2);c={top:v,bottom:m,left:g,right:b=d-g,type:"SAME"}}else if("valid"===t)c={top:0,bottom:0,left:0,right:0,type:"VALID"},l=Math.ceil((n-a+1)/r),f=Math.ceil((e-i+1)/o);else{if("object"!=typeof t)throw Error("Unknown padding parameter: "+t);var y="channelsLast"===s?t[1][0]:t[2][0],b=(m="channelsLast"===s?t[1][1]:t[2][1],g="channelsLast"===s?t[2][0]:t[3][0],"channelsLast"===s?t[2][1]:t[3][1]);c={top:y,bottom:m,left:g,right:b,type:0===y&&0===m&&0===g&&0===b?"VALID":"EXPLICIT"},l=or((n-a+y+m)/r+1,u),f=or((e-i+g+b)/o+1,u)}return{padInfo:c,outHeight:l,outWidth:f}}(o,l,f,y,b,S,D,a,u),I=N.padInfo,F=N.outHeight,A=N.outWidth,M=i?m*p:m;return"channelsFirst"===u?h=[c,M,F,A]:"channelsLast"===u&&(h=[c,F,A,M]),{batchSize:c,dataFormat:u,inHeight:l,inWidth:f,inChannels:p,outHeight:F,outWidth:A,outChannels:M,padInfo:I,strideHeight:y,strideWidth:b,filterHeight:d,filterWidth:v,effectiveFilterHeight:S,effectiveFilterWidth:D,dilationHeight:k,dilationWidth:x,inShape:t,outShape:h,filterShape:n}}function Qe(t,n,e,r,o,a,i,u){void 0===a&&(a=!1),void 0===i&&(i="channelsLast");var s=[-1,-1,-1,-1,-1],c=s[0],l=s[1],f=s[2],p=s[3],h=s[4];if("channelsLast"===i)c=t[0],l=t[1],f=t[2],p=t[3],h=t[4];else{if("channelsFirst"!==i)throw new Error("Unknown dataFormat "+i);c=t[0],h=t[1],l=t[2],f=t[3],p=t[4]}var d,v=n[0],m=n[1],g=n[2],y=n[4],b=er(e),w=b[0],k=b[1],x=b[2],S=er(r),D=S[0],N=S[1],I=S[2],F=rr(v,D),A=rr(m,N),M=rr(g,I),_=function(t,n,e,r,o,a,i,u,s,c,l){var f,p,h,d;if("number"==typeof t){f={top:t,bottom:t,left:t,right:t,front:t,back:t,type:0===t?"VALID":"NUMBER"};var v=function(t,n,e,r,o,a){null==o&&(o=tr(t,n,r));var i=t[0],u=t[1],s=t[2],c=or((i-n+2*o)/r+1,a);E(T(c),(function(){return"The output # of depths ("+c+") must be an integer. Change the stride and/or zero pad parameters"}));var l=or((u-n+2*o)/r+1,a);E(T(l),(function(){return"The output # of rows ("+l+") must be an integer. Change the stride and/or zero pad parameters"}));var f=or((s-n+2*o)/r+1,a);return E(T(f),(function(){return"The output # of columns ("+f+") must be an integer. Change the stride and/or zero pad parameters"})),[c,l,f,e]}([n,e,r,1],u,1,o,t,l);p=v[0],h=v[1],d=v[2]}else if("same"===t){p=Math.ceil(n/o),h=Math.ceil(e/a),d=Math.ceil(r/i);var m=(p-1)*o+u-n,g=(h-1)*a+s-e,y=(d-1)*i+c-r,b=Math.floor(m/2),w=m-b,k=Math.floor(g/2),x=g-k,S=Math.floor(y/2);f={top:k,bottom:x,left:S,right:y-S,front:b,back:w,type:"SAME"}}else{if("valid"!==t)throw Error("Unknown padding parameter: "+t);f={top:0,bottom:0,left:0,right:0,front:0,back:0,type:"VALID"},p=Math.ceil((n-u+1)/o),h=Math.ceil((e-s+1)/a),d=Math.ceil((r-c+1)/i)}return{padInfo:f,outDepth:p,outHeight:h,outWidth:d}}(o,l,f,p,w,k,x,F,A,M,u),B=_.padInfo,R=_.outDepth,C=_.outHeight,P=_.outWidth,L=a?y*h:y;return"channelsFirst"===i?d=[c,L,R,C,P]:"channelsLast"===i&&(d=[c,R,C,P,L]),{batchSize:c,dataFormat:i,inDepth:l,inHeight:f,inWidth:p,inChannels:h,outDepth:R,outHeight:C,outWidth:P,outChannels:L,padInfo:B,strideDepth:w,strideHeight:k,strideWidth:x,filterDepth:v,filterHeight:m,filterWidth:g,effectiveFilterDepth:F,effectiveFilterHeight:A,effectiveFilterWidth:M,dilationDepth:D,dilationHeight:N,dilationWidth:I,inShape:t,outShape:d,filterShape:n}}function tr(t,n,e,r){void 0===r&&(r=1);var o=rr(n,r);return Math.floor((t[0]*(e-1)-e+o)/2)}function nr(t){return"number"==typeof t?[t,t,t]:2===t.length?[t[0],t[1],1]:t}function er(t){return"number"==typeof t?[t,t,t]:t}function rr(t,n){return n<=1?t:t+(t-1)*(n-1)}function or(t,n){if(!n)return t;switch(n){case"round":return Math.round(t);case"ceil":return Math.ceil(t);case"floor":return Math.floor(t);default:throw new Error("Unknown roundingMode "+n)}}function ar(t){var n=nr(t),e=n[0],r=n[1],o=n[2];return 1===e&&1===r&&1===o}function ir(t,n){return ar(t)||ar(n)}function ur(t){if("NHWC"===t)return"channelsLast";if("NCHW"===t)return"channelsFirst";throw new Error("Unknown dataFormat "+t)}var sr=qt({avgPool_:function(t,n,e,r,o){var a=Lt(t,"x","avgPool","float32");E(ir(e,1),(function(){return"Error in avgPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '1'"}));var i=a,u=!1;3===a.rank&&(u=!0,i=On(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(4===i.rank,(function(){return"Error in avgPool: x must be rank 4 but got rank "+i.rank+"."})),null!=o&&E(T(r),(function(){return"Error in avgPool: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var s={x:i},c={filterSize:n,strides:e,pad:r,dimRoundingMode:o},l=Tt.runKernelFunc((function(t,a){var u=Ze(i.shape,n,e,1,r,o);return a([i]),1===u.filterWidth&&1===u.filterHeight&&A(u.inShape,u.outShape)?i.clone():t.avgPool(i,u)}),s,null,"AvgPool",c);return l=En(l,a.dtype),u?On(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});var cr=qt({avgPool3d_:function(t,n,e,r,o,a,i){void 0===a&&(a="NDHWC"),null==i?i=[1,1,1]:xe("dilations is deprecated, this field will be gone in v3.0.0.");var u=Lt(t,"x","avgPool3d","float32"),s=u,c=!1;4===u.rank&&(c=!0,s=On(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),E(5===s.rank,(function(){return"Error in avgPool3d: x must be rank 5 but got rank "+s.rank+"."})),E("NDHWC"===a,(function(){return"Error in avgPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),E(ir(e,i),(function(){return"Error in avgPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),null!=o&&E(T(r),(function(){return"Error in avgPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l={x:s},f={filterSize:n,strides:e,pad:r,dimRoundingMode:o,dataFormat:a,dilations:i},p=Tt.runKernelFunc((function(t,u){null==i&&(i=[1,1,1]);var c=Xe(s.shape,n,e,i,r,o,a);return u([s]),t.avgPool3d(s,c)}),l,null,"AvgPool3D",f);return p=En(p,s.dtype),c?On(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});function lr(t,n){var e=t[0].length;t.forEach((function(t,n){E(t.length===e,(function(){return"Error in concat"+e+"D: rank of tensors["+n+"] must be the same as the rank of the rest ("+e+")"}))})),E(n>=0&&n<e,(function(){return"Error in concat"+e+"D: axis must be between 0 and "+(e-1)+"."}));var r=t[0];t.forEach((function(t,o){for(var a=0;a<e;a++)E(a===n||t[a]===r[a],(function(){return"Error in concat"+e+"D: Shape of tensors["+o+"] ("+t+") does not match the shape of the rest ("+r+") along the non-concatenated axis "+o+"."}))}))}function fr(t,n){for(var e=t[0].slice(),r=1;r<t.length;r++)e[n]+=t[r][n];return e}var pr=qt({concat_:function(t,n){void 0===n&&(n=0),E(t.length>=1,(function(){return"Pass at least one tensor to concat"}));var e=zt(t,"tensors","concat");"complex64"===e[0].dtype&&e.forEach((function(t){if("complex64"!==t.dtype)throw new Error("Cannot concatenate complex64 tensors with a tensor\n          with dtype "+t.dtype+". ")}));var r=e,o={axis:n};return Tt.runKernelFunc((function(t,r){var o=B(n,e[0].shape)[0],a=fr(e.map((function(t){return t.shape})),o);if(0===F(a))return Kt([],a);if(1===(e=e.filter((function(t){return t.size>0}))).length)return e[0];lr(e.map((function(t){return t.shape})),o);var i=t.concat(e,o);return r(e),i}),r,null,"Concat",o)}});var hr=qt({sigmoid_:function(t){var n=Lt(t,"x","sigmoid"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.sigmoid(n);return e([r]),r}),e,null,"Sigmoid")}});var dr=qt({slice_:function(t,n,e){var r=Lt(t,"x","slice");if(0===r.rank)throw new Error("Slicing scalar is not possible");var o={x:r},a={begin:n,size:e};return Tt.runKernelFunc((function(t,o){var a=pe(r,n,e),i=a[0],u=a[1];return te(r,i,u),o([r]),t.slice(r,i,u)}),o,null,"Slice",a)}});var vr=qt({tanh_:function(t){var n=Lt(t,"x","tanh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.tanh(n);return e([r]),r}),e,null,"Tanh")}});var mr=qt({basicLSTMCell_:function(t,n,e,r,o,a){var i=Lt(t,"forgetBias","basicLSTMCell"),u=Lt(n,"lstmKernel","basicLSTMCell"),s=Lt(e,"lstmBias","basicLSTMCell"),c=Lt(r,"data","basicLSTMCell"),l=Lt(o,"c","basicLSTMCell"),f=Lt(a,"h","basicLSTMCell"),p=pr([c,f],1),h=Wn(p,u),d=Ne(h,s),v=d.shape[0],m=d.shape[1]/4,g=[v,m],y=dr(d,[0,0],g),b=dr(d,[0,m],g),w=dr(d,[0,2*m],g),k=dr(d,[0,3*m],g),x=Ne(Ae(hr(y),vr(b)),Ae(l,hr(Ne(i,w))));return[x,Ae(vr(x),hr(k))]}});var gr=qt({batchToSpaceND_:function(t,n,e){var r=Lt(t,"x","batchToSpaceND"),o=n.reduce((function(t,n){return t*n}));E(r.rank>=1+n.length,(function(){return"input rank is "+r.rank+" but should be > than blockShape.length "+n.length})),E(e.length===n.length,(function(){return"crops.length is "+e.length+" but should be equal to blockShape.length  "+n.length})),E(r.shape[0]%o==0,(function(){return"input tensor batch is "+r.shape[0]+" but is not divisible by the product of the elements of blockShape "+n.join(" * ")+" === "+o}));var a={x:r},i={blockShape:n,crops:e};return Tt.runKernelFunc((function(t){return t.batchToSpaceND(r,n,e)}),a,null,"BatchToSpaceND",i)}});function yr(t){return null==t?null:0===t.rank?On(t,[t.size]):1===t.rank?t:2===t.rank?On(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?On(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}var br=qt({batchNorm_:function(t,n,e,r,o,a){null==a&&(a=.001);var i,u,s=Lt(t,"x","batchNorm"),c=Lt(n,"mean","batchNorm"),l=Lt(e,"variance","batchNorm");null!=o&&(i=Lt(o,"scale","batchNorm")),null!=r&&(u=Lt(r,"offset","batchNorm")),E(c.rank===l.rank,(function(){return"Batch normalization gradient requires mean and variance to have equal ranks."})),E(null==u||c.rank===u.rank,(function(){return"Batch normalization gradient requires mean and offset to have equal ranks."})),E(null==i||c.rank===i.rank,(function(){return"Batch normalization gradient requires mean and scale to have equal ranks."}));var f=function(t){return 0===t.rank||1===t.rank?On(t,[1,1,1,t.size]):2===t.rank?On(t,[1,1,t.shape[0],t.shape[1]]):3===t.rank?On(t,[1,t.shape[0],t.shape[1],t.shape[2]]):t}(s),p={x:f,scale:i,offset:u,mean:c,variance:l},h={varianceEpsilon:a},d=Tt.runKernelFunc((function(t,n){return n([f,c,l,i]),t.batchNorm(f,yr(c),yr(l),yr(u),yr(i),a)}),p,null,"FusedBatchNorm",h);return On(d,s.shape)}});var wr=qt({batchNorm2d_:function(t,n,e,r,o,a){var i,u,s=Lt(t,"x","batchNorm"),c=Lt(n,"mean","batchNorm"),l=Lt(e,"variance","batchNorm");return null!=o&&(i=Lt(o,"scale","batchNorm")),null!=r&&(u=Lt(r,"offset","batchNorm")),E(2===s.rank,(function(){return"Error in batchNorm2D: x must be rank 2 but got rank "+s.rank+"."})),E(2===c.rank||1===c.rank,(function(){return"Error in batchNorm2D: mean must be rank 2 or rank 1 but got rank "+c.rank+"."})),E(2===l.rank||1===l.rank,(function(){return"Error in batchNorm2D: variance must be rank 2 or rank 1 but got rank "+l.rank+"."})),null!=i&&E(2===i.rank||1===i.rank,(function(){return"Error in batchNorm2D: scale must be rank 2 or rank 1 but got rank "+i.rank+"."})),null!=u&&E(2===u.rank||1===u.rank,(function(){return"Error in batchNorm2D: offset must be rank 2 or rank 1 but got rank "+u.rank+"."})),br(s,c,l,u,i,a)}});var kr=qt({batchNorm3d_:function(t,n,e,r,o,a){var i,u,s=Lt(t,"x","batchNorm"),c=Lt(n,"mean","batchNorm"),l=Lt(e,"variance","batchNorm");return null!=o&&(i=Lt(o,"scale","batchNorm")),null!=r&&(u=Lt(r,"offset","batchNorm")),E(3===s.rank,(function(){return"Error in batchNorm3D: x must be rank 3 but got rank "+s.rank+"."})),E(3===c.rank||1===c.rank,(function(){return"Error in batchNorm3D: mean must be rank 3 or rank 1 but got rank "+c.rank+"."})),E(3===l.rank||1===l.rank,(function(){return"Error in batchNorm3D: variance must be rank 3 or rank 1 but got rank "+l.rank+"."})),null!=i&&E(3===i.rank||1===i.rank,(function(){return"Error in batchNorm3D: scale must be rank 3 or rank 1 but got rank "+i.rank+"."})),null!=u&&E(3===u.rank||1===u.rank,(function(){return"Error in batchNorm3D: offset must be rank 3 or rank 1 but got rank "+u.rank+"."})),br(s,c,l,u,i,a)}});var xr=qt({batchNorm4d_:function(t,n,e,r,o,a){var i,u,s=Lt(t,"x","batchNorm"),c=Lt(n,"mean","batchNorm"),l=Lt(e,"variance","batchNorm");return null!=o&&(i=Lt(o,"scale","batchNorm")),null!=r&&(u=Lt(r,"offset","batchNorm")),E(4===s.rank,(function(){return"Error in batchNorm4D: x must be rank 4 but got rank "+s.rank+"."})),E(4===c.rank||1===c.rank,(function(){return"Error in batchNorm4D: mean must be rank 4 or rank 1 but got rank "+c.rank+"."})),E(4===l.rank||1===l.rank,(function(){return"Error in batchNorm4D: variance must be rank 4 or rank 1 but got rank "+l.rank+"."})),null!=i&&E(4===i.rank||1===i.rank,(function(){return"Error in batchNorm4D: scale must be rank 4 or rank 1 but got rank "+i.rank+"."})),null!=u&&E(4===u.rank||1===u.rank,(function(){return"Error in batchNorm4D: offset must be rank 4 or rank 1 but got rank "+u.rank+"."})),br(s,c,l,u,i,a)}});var Sr=qt({broadcastTo_:function(t,n){var e=Lt(t,"broadcastTo","x"),r=e.shape;if(n.some((function(t){return!(t>0)||t%1!=0})))throw new Error("broadcastTo(): Invalid broadcast shape ["+n+"].");if(n.length<e.rank)throw new Error("broadcastTo(): shape.length="+n.length+" < input.rank="+e.rank+".");if(n.length>e.rank){for(var o=e.shape.slice();o.length<n.length;)o.unshift(1);e=On(e,o)}for(var a=e.shape,i=Array.from(n),u=n.length-1;u>=0;u--)if(a[u]===n[u])i[u]=1;else if(1!==e.shape[u])throw new Error("broadcastTo(): ["+r+"] cannot be broadcast to ["+n+"].");if(0===i.map((function(t,n){return t>1?n:-1})).filter((function(t){return t>=0})).length)return Dn(e);var s={x:e},c={shape:n,inputShape:a};return Tt.runKernelFunc((function(t){return t.tile(e,i)}),s,null,"BroadcastTo",c)}});var Er=qt({ceil_:function(t){var n=Lt(t,"x","ceil"),e={x:n};return Tt.runKernelFunc((function(t){return t.ceil(n)}),e,null,"Ceil")}});var Dr=qt({clipByValue_:function(t,n,e){var r=Lt(t,"x","clipByValue");E(n<=e,(function(){return"Error in clip: min ("+n+") must be less than or equal to max ("+e+")."}));var o={x:r},a={clipValueMin:n,clipValueMax:e};return Tt.runKernelFunc((function(t,o){var a=t.clip(r,n,e);return o([r]),a}),o,null,"ClipByValue",a)}});var Nr=qt({concat1d_:function(t){return pr(t,0)}});var Ir=qt({concat2d_:function(t,n){return pr(t,n)}});var Fr=qt({concat3d_:function(t,n){return pr(t,n)}});var Ar=qt({concat4d_:function(t,n){return pr(t,n)}});var Tr=qt({conv2d_:function(t,n,e,r,o,a,i){void 0===o&&(o="NHWC"),void 0===a&&(a=[1,1]);var u=Lt(t,"x","conv2d"),s=Lt(n,"filter","conv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=On(u,[1,u.shape[0],u.shape[1],u.shape[2]])),E(4===c.rank,(function(){return"Error in conv2d: input must be rank 4, but got rank "+c.rank+"."})),E(4===s.rank,(function(){return"Error in conv2d: filter must be rank 4, but got rank "+s.rank+"."})),null!=i&&E(T(r),(function(){return"Error in conv2d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var f="NHWC"===o?c.shape[3]:c.shape[1];E(f===s.shape[2],(function(){return"Error in conv2d: depth of input ("+f+") must match input depth for filter "+s.shape[2]+"."})),E(ir(e,a),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"}));var p={x:c,filter:s},h={strides:e,pad:r,dataFormat:o,dilations:a,dimRoundingMode:i},d=Tt.runKernelFunc((function(t,n){var u=ur(o),l=$e(c.shape,s.shape,e,a,r,i,!1,u),f=t.conv2d(c,s,l);return n([c,s]),f}),p,null,"Conv2D",h);return l?On(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});var Mr=qt({conv1d_:function(t,n,e,r,o,a,i){void 0===o&&(o="NWC"),void 0===a&&(a=1);var u=Lt(t,"x","conv1d"),s=Lt(n,"filter","conv1d"),c=u,l=!1;2===u.rank&&(l=!0,c=On(u,[1,u.shape[0],u.shape[1]])),E(3===c.rank,(function(){return"Error in conv1d: input must be rank 3, but got rank "+c.rank+"."})),E(3===s.rank,(function(){return"Error in conv1d: filter must be rank 3, but got rank "+s.rank+"."})),null!=i&&E(T(r),(function(){return"Error in conv1d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."})),E(c.shape[2]===s.shape[1],(function(){return"Error in conv1d: depth of input ("+c.shape[2]+") must match input depth for filter "+s.shape[1]+"."})),E(ir(e,a),(function(){return"Error in conv1D: Either stride or dilation must be 1. Got stride "+e+" and dilation '"+a+"'"})),E("NWC"===o,(function(){return"Error in conv1d: got dataFormat of "+o+" but only NWC is currently supported."}));var f=On(s,[1,s.shape[0],s.shape[1],s.shape[2]]),p=On(c,[c.shape[0],1,c.shape[1],c.shape[2]]),h=Tr(p,f,[1,e],r,"NHWC",[1,a],i);return On(h,l?[h.shape[2],h.shape[3]]:[h.shape[0],h.shape[2],h.shape[3]])}});var _r=qt({conv2DBackpropInput_:function(t,n,e,r,o,a,i){void 0===a&&(a="NHWC"),E(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var u=t,s=n,c=!1;3===n.rank&&(c=!0,s=On(n,[1,n.shape[0],n.shape[1],n.shape[2]]),u=[1,t[0],t[1],t[2]]),E(4===u.length,(function(){return"Error in conv2dDerInput: inShape must be length 4, but got length "+u.length+"."})),E(4===s.rank,(function(){return"Error in conv2dDerInput: dy must be rank 4, but got rank "+s.rank})),E(4===e.rank,(function(){return"Error in conv2dDerInput: filter must be rank 4, but got rank "+e.rank}));var l="NHWC"===a?u[3]:u[1],f="NHWC"===a?s.shape[3]:s.shape[1];E(l===e.shape[2],(function(){return"Error in conv2dDerInput: depth of input ("+l+") must match input depth for filter "+e.shape[2]+"."})),E(f===e.shape[3],(function(){return"Error in conv2dDerInput: depth of output ("+f+") must match output depth for filter "+e.shape[3]+"."})),null!=i&&E(T(o),(function(){return"Error in conv2dDerInput: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var p={dy:s,filter:e},h={strides:r,pad:o,dataFormat:a,dimRoundingMode:i,inputShape:u},d=Tt.runKernelFunc((function(t,n){var c=ur(a),l=$e(u,e.shape,r,1,o,i,!1,c),f=t.conv2dDerInput(s,e,l);return n([s,e]),f}),p,null,"Conv2DBackpropInput",h);return c?On(d,[d.shape[1],d.shape[2],d.shape[3]]):d}});var Br=qt({conv2dTranspose_:function(t,n,e,r,o,a){var i=Lt(t,"x","conv2dTranspose"),u=Lt(n,"filter","conv2dTranspose");return _r(e,i,u,r,o,"NHWC",a)}});var Rr=qt({conv3d_:function(t,n,e,r,o,a){void 0===o&&(o="NDHWC"),void 0===a&&(a=[1,1,1]);var i=Lt(t,"x","conv3d"),u=Lt(n,"filter","conv3d"),s=i,c=!1;4===i.rank&&(c=!0,s=On(i,[1,i.shape[0],i.shape[1],i.shape[2],i.shape[3]])),E(5===s.rank,(function(){return"Error in conv3d: input must be rank 5, but got rank "+s.rank+"."})),E(5===u.rank,(function(){return"Error in conv3d: filter must be rank 5, but got rank "+u.rank+"."})),E(s.shape[4]===u.shape[3],(function(){return"Error in conv3d: depth of input ("+s.shape[4]+") must match input depth for filter "+u.shape[3]+"."})),E(ir(e,a),(function(){return"Error in conv3D: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"})),E("NDHWC"===o,(function(){return"Error in conv3d: got dataFormat of "+o+" but only NDHWC is currently supported."}));var l={x:s,filter:u},f={strides:e,pad:r,dataFormat:o,dilations:a},p=Tt.runKernelFunc((function(t,n){var o=Qe(s.shape,u.shape,e,a,r),i=t.conv3d(s,u,o);return n([s,u]),i}),l,null,"Conv3D",f);return c?On(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});var Cr=qt({conv3DBackpropInput_:function(t,n,e,r,o){E(t.length===n.rank,(function(){return"Length of inShape ("+t.length+") and rank of dy ("+n.rank+") must match"}));var a=t,i=n,u=!1;4===n.rank&&(u=!0,i=On(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]]),a=[1,t[0],t[1],t[2],t[3]]);var s=a[4],c=i.shape[4];E(5===a.length,(function(){return"Error in conv3dDerInput: inShape must be length 5, but got length "+a.length+"."})),E(5===i.rank,(function(){return"Error in conv3dDerInput: dy must be rank 5, but got rank "+i.rank})),E(5===e.rank,(function(){return"Error in conv3dDerInput: filter must be rank 5, but got rank "+e.rank})),E(s===e.shape[3],(function(){return"Error in conv3dDerInput: depth of input ("+s+") must match input depth for filter "+e.shape[3]+"."})),E(c===e.shape[4],(function(){return"Error in conv3dDerInput: depth of output ("+c+") must match output depth for filter "+e.shape[4]+"."}));var l={dy:i},f={pad:o},p=Tt.runKernelFunc((function(t){var n=Qe(a,e.shape,r,1,o);return t.conv3dDerInput(i,e,n)}),l,null,"Conv3DBackpropInputV2",f);return u?On(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});var Pr=qt({conv3dTranspose_:function(t,n,e,r,o){var a=Lt(t,"x","conv3dTranspose"),i=Lt(n,"filter","conv3dTranspose");return Cr(e,a,i,r,o)}});var Lr=qt({cos_:function(t){var n=Lt(t,"x","cos"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.cos(n);return e([n]),r}),e,null,"Cos")}});var zr=qt({cosh_:function(t){var n=Lt(t,"x","cosh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.cosh(n);return e([n]),r}),e,null,"Cosh")}});var qr=qt({cumsum_:function(t,n,e,r){void 0===n&&(n=0),void 0===e&&(e=!1),void 0===r&&(r=!1);var o=Lt(t,"x","cumsum"),a={x:o},i={axis:n,exclusive:e,reverse:r};return Tt.runKernelFunc((function(t,a){var i=ze([n],o.rank),u=o;null!=i&&(u=Un(o,i));var s=Oe(1,o.rank)[0],c=t.cumsum(u,s,e,r);if(a([o]),null!=i){var l=qe(i);c=Un(c,l)}return c}),a,null,"Cumsum",i)}});var Or=qt({depthToSpace_:function(t,n,e){void 0===e&&(e="NHWC");var r=Lt(t,"x","depthToSpace"),o="NHWC"===e?r.shape[1]:r.shape[2],a="NHWC"===e?r.shape[2]:r.shape[3],i="NHWC"===e?r.shape[3]:r.shape[1];E(o*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n    "+o+" and "+n+"  for depthToSpace with input shape\n    "+r.shape})),E(a*n>=0,(function(){return"Negative dimension size caused by overflow when multiplying\n    "+a+" and "+n+" for depthToSpace with input shape\n        "+r.shape})),E(i%(n*n)==0,(function(){return"Dimension size must be evenly divisible by "+n*n+" but is "+i+" for depthToSpace with input shape "+r.shape}));var u={x:r},s={blockSize:n,dataFormat:e};return Tt.runKernelFunc((function(t){return t.depthToSpace(r,n,e)}),u,null,"DepthToSpace",s)}});var Wr=qt({depthwiseConv2d_:function(t,n,e,r,o,a,i){void 0===o&&(o="NHWC"),void 0===a&&(a=[1,1]);var u=Lt(t,"x","depthwiseConv2d"),s=Lt(n,"filter","depthwiseConv2d"),c=u,l=!1;3===u.rank&&(l=!0,c=On(u,[1,u.shape[0],u.shape[1],u.shape[2]])),E(4===c.rank,(function(){return"Error in depthwiseConv2d: input must be rank 4, but got rank "+c.rank+"."})),E(4===s.rank,(function(){return"Error in depthwiseConv2d: filter must be rank 4, but got rank "+s.rank+"."})),E(c.shape[3]===s.shape[2],(function(){return"Error in depthwiseConv2d: number of input channels ("+c.shape[3]+") must match the inChannels dimension in filter "+s.shape[2]+"."})),null!=i&&E(T(r),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+r+"."}));var f={x:c,filter:s},p={strides:e,pad:r,dataFormat:o,dilations:a,dimRoundingMode:i},h=Tt.runKernelFunc((function(t,n){null==a&&(a=[1,1]),E(ir(e,a),(function(){return"Error in depthwiseConv2d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+a+"'"}));var o=$e(c.shape,s.shape,e,a,r,i,!0),u=t.depthwiseConv2D(c,s,o);return n([c,s]),u}),f,null,"DepthwiseConv2dNative",p);return l?On(h,[h.shape[1],h.shape[2],h.shape[3]]):h}});var Kr=qt({diag_:function(t){var n=Lt(t,"x","diag"),e={x:n};return Tt.runKernelFunc((function(e){var r=On(n,[n.size]),o=e.diag(r),a=t.shape.concat(t.shape);return On(o,a)}),e,null,"Diag")}});var Ur=qt({dilation2d_:function(t,n,e,r,o,a){void 0===o&&(o=[1,1]),void 0===a&&(a="NHWC");var i=Lt(t,"x","dilation2d"),u=Lt(n,"filter","dilation2d");E(3===i.rank||4===i.rank,(function(){return"Error in dilation2d: input must be rank 3 or 4, but got rank "+i.rank+"."})),E(3===u.rank,(function(){return"Error in dilation2d: filter must be rank 3, but got rank "+u.rank+"."})),E("NHWC"===a,(function(){return"Error in dilation2d: Only NHWC is currently supported, but got dataFormat of "+a}));var s=i,c=!1;3===i.rank&&(s=On(i,[1,i.shape[0],i.shape[1],i.shape[2]]),c=!0);var l={x:s,filter:u},f={strides:e,pad:r,dilations:o},p=Tt.runKernel("Dilation2D",l,f);return c?On(p,[p.shape[1],p.shape[2],p.shape[3]]):p}});function Gr(t,n){for(var e=[],r=0;r<n.length;r++){var o=t[t.length-r-1],a=n.length-r-1,i=n[a];(null==o||1===o&&i>1)&&e.unshift(a)}return e}function Vr(t,n){for(var e=[],r=Math.max(t.length,n.length),o=0;o<r;o++){var a=t[t.length-o-1];null==a&&(a=1);var i=n[n.length-o-1];if(null==i&&(i=1),1===a)e.unshift(i);else if(1===i)e.unshift(a);else{if(a!==i)throw Error("Operands could not be broadcast together with shapes "+t+" and "+n+".");e.unshift(a)}}return e}var Hr=qt({equal_:function(t,n){var e,r=Lt(t,"a","equal"),o=Lt(n,"b","equal");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t){return t.equal(r,o)}),a,null,"Equal")}});var jr=qt({where_:function(t,n,e){var r=Lt(n,"a","where"),o=Lt(e,"b","where"),a=Lt(t,"condition","where","bool"),i=Vr(r.shape,o.shape),u=Sr(r,i),s=Sr(o,i);1===a.rank&&E(a.shape[0]===r.shape[0],(function(){return"The first dimension of `a` must match the size of `condition`."})),1!==a.rank&&D(a.shape,s.shape,"Error in where: ");var c={condition:a,t:u,e:s};return Tt.runKernelFunc((function(t,n){var e=t.select(a,u,s);return n([a]),e}),c,null,"SelectV2")}});var Jr=qt({zerosLike_:function(t){var n=Lt(t,"x","zerosLike"),e={x:n};return Tt.runKernelFunc((function(t){return t.zerosLike(n)}),e,null,"ZerosLike")}});var Yr=qt({divNoNan_:function(t,n){var e,r=Lt(t,"a","div"),o=Lt(n,"b","div");r=(e=St(r,o))[0],o=e[1];var a=Fe(r,o),i=Jr(a),u=Hr(o,i);return jr(u,i,a)}});var Zr=qt({dot_:function(t,n){var e=Lt(t,"t1","dot"),r=Lt(n,"t2","dot");E(!(1!==e.rank&&2!==e.rank||1!==r.rank&&2!==r.rank),(function(){return"Error in dot: inputs must all be rank 1 or 2, but got ranks "+e.rank+" and "+r.rank+"."}));var o=1===e.rank?e.size:e.shape[1],a=1===r.rank?r.size:r.shape[0];if(E(o===a,(function(){return"Error in dot: inner dimensions of inputs must match, but got "+o+" and "+a+"."})),1===e.rank&&1===r.rank){var i=On(e,[1,-1]),u=On(r,[-1,1]),s=Wn(i,u);return On(s,[])}if(1===e.rank&&2===r.rank){i=On(e,[1,-1]),u=On(r,[r.shape[0],r.shape[1]]),s=Wn(i,u);return On(s,[s.size])}if(2===e.rank&&1===r.rank){u=On(r,[-1,1]),s=Wn(e,u);return On(s,[s.size])}return u=On(r,[r.shape[0],r.shape[1]]),s=Wn(e,u)}});var Xr=qt({elu_:function(t){var n=Lt(t,"x","elu"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.elu(n);return e([r]),r}),e,null,"Elu")}});var $r=qt({erf_:function(t){var n=Lt(t,"x","erf");E("int32"===n.dtype||"float32"===n.dtype,(function(){return"Input dtype must be `int32` or `float32`."})),"int32"===n.dtype&&(n=En(n,"float32"));var e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.erf(n);return e([n]),r}),e,null,"Erf")}});var Qr=qt({exp_:function(t){var n=Lt(t,"x","exp"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.exp(n);return e([r]),r}),e,null,"Exp")}});var to=qt({expandDims_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","expandDims",null);E(n<=e.rank,(function(){return"Axis must be <= rank of the tensor"}));var r=e.shape.slice();return n<0&&(E(-(e.rank+1)<=n,(function(){return"Axis must be in the interval ["+-(e.rank+1)+", "+e.rank+"]"})),n=e.rank+n+1),r.splice(n,0,1),On(e,r)}});var no=qt({expm1_:function(t){var n=Lt(t,"x","expm1"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.expm1(n);return e([n]),r}),e,null,"Expm1")}});var eo=qt({tile_:function(t,n){var e=Lt(t,"x","tile",null);E(e.rank===n.length,(function(){return"Error in transpose: rank of input "+e.rank+" must match length of reps "+n+"."}));var r=[e],o={x:e},a={reps:n};return Tt.runKernelFunc((function(t,r){var o=t.tile(e,n);return r([e]),o}),o,null,"Tile",a,r)}});var ro=qt({eye_:function(t,n,e,r){void 0===r&&(r="float32"),null==n&&(n=t);for(var o=Sn([t,n],r),a=t<=n?t:n,i=0;i<a;++i)o.set(1,i,i);var u=On(o.toTensor(),[t,n]);if(null==e)return u;if(1===e.length)return eo(to(u,0),[e[0],1,1]);if(2===e.length)return eo(to(to(u,0),0),[e[0],e[1],1,1]);if(3===e.length)return eo(to(to(to(u,0),0),0),[e[0],e[1],e[2],1,1]);throw new Error("eye() currently supports only 1D and 2D batchShapes, but received "+e.length+"D.")}});function oo(t,n,e){var r={shape:t,value:n,dtype:e};return Tt.runKernelFunc((function(r){return r.fill(t,n,e)}),{},null,"Fill",r)}var ao=qt({floor_:function(t){var n=Lt(t,"x","floor"),e={x:n};return Tt.runKernelFunc((function(t){return t.floor(n)}),e,null,"Floor")}});function io(t,n,e){for(var r=t.shape[e],o=[],a=1,i=1,u=0;u<e;u++)o.push(t.shape[u]),a*=t.shape[u];for(u=0;u<n.rank;u++)o.push(n.shape[u]);for(u=e+1;u<t.rank;u++)o.push(t.shape[u]),i*=t.shape[u];return{batchSize:a,sliceSize:i,dimSize:r,outputShape:o}}var uo={__proto__:null,segOpComputeOptimalWindowSize:function(t,n){var e,r=!1;for(t<=30?(e=t,r=!0):e=J(t,Math.floor(Math.sqrt(t)));!r;)e>n||e===t?r=!0:e=J(t,e+1);return e},computeOutShape:function(t,n,e){for(var r=[],o=t.length,a=0;a<o;a++)a!==n?r.push(t[a]):r.push(e);return r},collectGatherOpShapeInfo:io};var so=qt({gather_:function(t,n,e){void 0===e&&(e=0);var r=Lt(t,"x","gather"),o=Lt(n,"indices","gather","int32"),a={x:r,indices:o},i={axis:e};return Tt.runKernelFunc((function(t,n){var a=B(e,r.shape)[0],i=io(r,o,a),u=t.gather(r,On(o,[o.size]),a);return n([r,o]),On(u,i.outputShape)}),a,null,"GatherV2",i)}});var co=qt({greater_:function(t,n){var e,r=Lt(t,"a","greater"),o=Lt(n,"b","greater");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t){return t.greater(r,o)}),a,null,"Greater")}});var lo=qt({greaterEqual_:function(t,n){var e,r=Lt(t,"a","greaterEqual"),o=Lt(n,"b","greaterEqual");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.greaterEqual(r,o);return n([r,o]),e}),a,null,"GreaterEqual")}});var fo=qt({imag_:function(t){var n=Lt(t,"input","imag"),e={input:n};return Tt.runKernelFunc((function(t){return t.imag(n)}),e,null,"Imag")}});var po=qt({isFinite_:function(t){var n=Lt(t,"x","isFinite"),e={x:n};return Tt.runKernelFunc((function(t){return t.isFinite(n)}),e,null,"IsFinite")}});var ho=qt({isInf_:function(t){var n=Lt(t,"x","isInf"),e={x:n};return Tt.runKernelFunc((function(t){return t.isInf(n)}),e,null,"IsInf")}});var vo=qt({isNaN_:function(t){var n=Lt(t,"x","isNaN"),e={x:n};return Tt.runKernelFunc((function(t){return t.isNaN(n)}),e,null,"IsNan")}});var mo=qt({maximum_:function(t,n){var e,r=Lt(t,"a","maximum"),o=Lt(n,"b","maximum");e=St(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=En(r,"int32"),o=En(o,"int32")),Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.maximum(r,o);return n([r,o]),e}),a,null,"Maximum")}});function go(t,n){if((O(t)&&"string"!==n||Array.isArray(t))&&"complex64"!==n)throw new Error("Error creating a new Scalar: value must be a primitive (number|boolean|string)");if("string"===n&&O(t)&&!(t instanceof Uint8Array))throw new Error("When making a scalar from encoded string, the value must be `Uint8Array`.");return Wt(t,[],[],n)}var yo=qt({leakyRelu_:function(t,n){void 0===n&&(n=.2);var e=Lt(t,"x","leakyRelu");return mo(Ae(go(n),e),e)}});var bo=qt({less_:function(t,n){var e,r=Lt(t,"a","less"),o=Lt(n,"b","less");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t){return t.less(r,o)}),a,null,"Less")}});var wo=qt({lessEqual_:function(t,n){var e,r=Lt(t,"a","lessEqual"),o=Lt(n,"b","lessEqual");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.lessEqual(r,o);return n([r,o]),e}),a,null,"LessEqual")}});var ko=qt({localResponseNormalization_:function(t,n,e,r,o){void 0===n&&(n=5),void 0===e&&(e=1),void 0===r&&(r=1),void 0===o&&(o=.5);var a=Lt(t,"x","localResponseNormalization");E(4===a.rank||3===a.rank,(function(){return"Error in localResponseNormalization: x must be rank 3 or 4 but got\n               rank "+a.rank+"."})),E(T(n),(function(){return"Error in localResponseNormalization: depthRadius must be an integer but got depthRadius "+n+"."}));var i=a,u=!1;3===a.rank&&(u=!0,i=On(a,[1,a.shape[0],a.shape[1],a.shape[2]]));var s={x:i},c={depthRadius:n,bias:e,alpha:r,beta:o},l=Tt.runKernelFunc((function(t,a){var u=t.localResponseNormalization4D(i,n,e,r,o);return a([i,u]),u}),s,null,"LRN",c);return u?On(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});var xo=qt({log_:function(t){var n=Lt(t,"x","log"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.log(n);return e([n]),r}),e,null,"Log")}});var So=qt({log1p_:function(t){var n=Lt(t,"x","log1p"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.log1p(n);return e([n]),r}),e,null,"Log1p")}});function Eo(t,n){E(j(t),(function(){return"The f passed in variableGrads(f) must be a function"})),E(null==n||Array.isArray(n)&&n.every((function(t){return t instanceof wt})),(function(){return"The varList passed in variableGrads(f, varList) must be an array of variables"}));var e=null!=n;if(!e)for(var r in n=[],Tt.registeredVariables)n.push(Tt.registeredVariables[r]);var o=e?n.filter((function(t){return!t.trainable})):null,a=n.length;E((n=n.filter((function(t){return t.trainable}))).length>0,(function(){return"variableGrads() expects at least one of the input variables to be trainable, but none of the "+a+" variables is trainable."}));var i=Tt.gradients(t,n,null,!0),u=i.value,s=i.grads;E(s.some((function(t){return null!=t})),(function(){return"Cannot find a connection between any variable and the result of the loss function y=f(x). Please make sure the operations that use variables are inside the function f passed to minimize()."})),E(0===u.rank,(function(){return"The f passed in variableGrads(f) must return a scalar, but it returned a rank-"+u.rank+" tensor"}));var c={};return n.forEach((function(t,n){null!=s[n]&&(c[t.name]=s[n])})),null!=o&&o.forEach((function(t){return c[t.name]=null})),{value:u,grads:c}}function Do(t){return Tt.customGrad(t)}function No(t){if(t.filter((function(t){return null==t})).length>0)throw new Error("Cannot compute gradient of y=f(x) with respect to x. Make sure that\n    the f you passed encloses all operations that lead from x to y.")}var Io=qt({neg_:function(t){var n=Lt(t,"x","neg"),e={x:n};return Tt.runKernelFunc((function(t){return t.neg(n)}),e,null,"Negate")}});var Fo=qt({softplus_:function(t){var n=Lt(t,"x","softplus"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.softplus(n);return e([n]),r}),e,null,"Softplus")}});var Ao=qt({logSigmoid_:function(t){var n=Lt(t,"x","logSigmoid");return Do((function(t){return{value:Io(Fo(Io(t))),gradFunc:function(n){return Ae(n,hr(Io(t)))}}}))(n)}});var To=qt({max_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","max"),o={x:r},a={reductionIndices:n,keepDims:e};return Tt.runKernelFunc((function(t,o){var a=B(n,r.shape),i=ze(a,r.rank),u=r;null!=i&&(u=Un(r,i),a=Oe(a.length,u.rank));var s=t.max(u,a);null!=i&&u.dispose();var c=s;if(e){var l=Le(c.shape,B(n,r.shape));c=On(c,l),s.dispose()}return o([r,c]),c}),o,null,"Max",a)}});var Mo=qt({sub_:function(t,n){var e,r=Lt(t,"a","sub"),o=Lt(n,"b","sub");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.subtract(r,o);return n([r,o]),e}),a,null,"Sub")}});var _o=qt({sum_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","sum");"bool"===r.dtype&&(r=En(r,"int32"));var o={x:r},a={axis:n,keepDims:e};return Tt.runKernelFunc((function(t,o){o([r]);var a=B(n,r.shape),i=ze(a,r.rank),u=a,s=r;null!=i&&(s=Un(r,i),u=Oe(u.length,r.rank));var c=t.sum(s,u);if(e){var l=Le(c.shape,a);c=On(c,l)}return c}),o,null,"Sum",a)}});var Bo=qt({logSoftmax_:function(t,n){void 0===n&&(n=-1);var e=Lt(t,"logits","logSoftmax");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Log Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and axis was "+n);var r={logits:e},o={axis:n};return Tt.runKernelFunc((function(e,r){var o=To(t,n,!0),a=Mo(t,o),i=Mo(En(a,"float32"),xo(_o(Qr(a),n,!0)));return r([i]),i}),r,null,"LogSoftmax",o)}});var Ro=qt({logSumExp_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","logSumExp"),o=B(n,r.shape),a=To(r,o,!0),i=Mo(r,a),u=Qr(i),s=_o(u,o),c=xo(s),l=Ne(On(a,c.shape),c);if(e){var f=Le(l.shape,o);return On(l,f)}return l}});var Co=qt({logicalAnd_:function(t,n){var e=Lt(t,"a","logicalAnd","bool"),r=Lt(n,"b","logicalAnd","bool");Vr(e.shape,r.shape);var o={a:e,b:r};return Tt.runKernelFunc((function(t){return t.logicalAnd(e,r)}),o,null,"LogicalAnd")}});var Po=qt({logicalNot_:function(t){var n=Lt(t,"x","logicalNot","bool"),e={x:n};return Tt.runKernelFunc((function(t){return t.logicalNot(n)}),e,null,"LogicalNot")}});var Lo=qt({logicalOr_:function(t,n){var e=Lt(t,"a","logicalOr","bool"),r=Lt(n,"b","logicalOr","bool");Vr(e.shape,r.shape);var o={a:e,b:r};return Tt.runKernelFunc((function(t){return t.logicalOr(e,r)}),o,null,"LogicalOr")}});var zo=qt({logicalXor_:function(t,n){var e=Lt(t,"a","logicalXor","bool"),r=Lt(n,"b","logicalXor","bool");return Vr(e.shape,r.shape),Co(Lo(t,n),Po(Co(t,n)))}});var qo=qt({maxPool_:function(t,n,e,r,o){var a=Lt(t,"x","maxPool"),i=a,u=!1;3===a.rank&&(u=!0,i=On(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(4===i.rank,(function(){return"Error in maxPool: input must be rank 4 but got rank "+i.rank+"."})),E(ir(e,1),(function(){return"Error in maxPool: Either strides or dilations must be 1. Got strides "+e+" and dilations '1'"})),null!=o&&E(T(r),(function(){return"Error in maxPool: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var s={x:i},c={filterSize:n,strides:e,pad:r,dimRoundingMode:o},l=Tt.runKernelFunc((function(t,a){var u,s=Ze(i.shape,n,e,1,r,o);return u=1===s.filterWidth&&1===s.filterHeight&&A(s.inShape,s.outShape)?i.clone():t.maxPool(i,s),a([i,u]),u}),s,null,"MaxPool",c);return u?On(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});var Oo=qt({maxPool3d_:function(t,n,e,r,o,a,i){void 0===n&&(n=[1,1,1]),void 0===a&&(a="NDHWC"),null==i?i=[1,1,1]:xe("dilations is deprecated, this field will be gone in v3.0.0.");var u=Lt(t,"x","maxPool3d"),s=u,c=!1;4===u.rank&&(c=!0,s=On(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]])),E(5===s.rank,(function(){return"Error in maxPool3d: x must be rank 5 but got rank "+s.rank+"."})),E("NDHWC"===a,(function(){return"Error in maxPool3d: Only NDHWC is currently supported, but got dataFormat of "+a})),E(ir(e,i),(function(){return"Error in maxPool3d: Either strides or dilations must be 1. Got strides "+e+" and dilations '"+i+"'"})),null!=o&&E(T(r),(function(){return"Error in maxPool3d: pad must be an integer when using, dimRoundingMode "+o+" but got pad "+r+"."}));var l={x:s},f={filterSize:n,strides:e,pad:r,dimRoundingMode:o,dataFormat:a,dilations:i},p=Tt.runKernelFunc((function(t,u){null==i&&(i=[1,1,1]);var c=Xe(s.shape,n,e,i,r,o,a),l=t.maxPool3d(s,c);return u([s,l]),l}),l,null,"MaxPool3D",f);return c?On(p,[p.shape[1],p.shape[2],p.shape[3],p.shape[4]]):p}});var Wo=qt({maxPoolWithArgmax_:function(t,n,e,r,o){void 0===o&&(o=!1);var a={x:Lt(t,"x","maxPoolWithArgmax")},i={filterSize:n,strides:e,pad:r,includeBatchInIndex:o},u=Tt.runKernel("MaxPoolWithArgmax",a,i);return{result:u[0],indexes:u[1]}}});function Ko(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Ko(t,"float32"),r=Ko(t,"float32");return Ot(e,r)}var o=Q(F(t),n);return Tt.makeTensor(o,t,n)}function Uo(t,n){if(void 0===n&&(n="float32"),"complex64"===n){var e=Uo(t,"float32"),r=Ko(t,"float32");return Ot(e,r)}var o=$(F(t),n);return Tt.makeTensor(o,t,n)}var Go=qt({mean_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","mean"),o=B(n,r.shape),a=F(Pe(r.shape,o)[1]);return Do((function(t){var r=go(a),i=r.dtype===t.dtype?t:En(t,r.dtype),u=Fe(i,r);return{value:_o(u,n,e),gradFunc:function(n){var e=t.shape.slice();o.forEach((function(t){e[t]=1}));var r=On(n,e);return Fe(Ae(r,Uo(t.shape,"float32")),a)}}}))(r)}});var Vo=qt({min_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","min"),o={x:r},a={axis:n,keepDims:e};return Tt.runKernelFunc((function(t,o){var a=B(n,r.shape),i=a,u=ze(i,r.rank),s=r;null!=u&&(s=Un(r,u),i=Oe(i.length,r.rank));var c=t.min(s,i);null!=u&&s.dispose();var l=c;if(e){var f=Le(l.shape,a);l=On(c,f),c.dispose()}return o([r,l]),l}),o,null,"Min",a)}});var Ho=qt({minimum_:function(t,n){var e,r=Lt(t,"a","minimum"),o=Lt(n,"b","minimum");e=St(r,o),r=e[0],o=e[1],"bool"===r.dtype&&(r=En(r,"int32"),o=En(o,"int32")),Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.minimum(r,o);return n([r,o]),e}),a,null,"Minimum")}});var jo=qt({mod_:function(t,n){var e,r=Lt(t,"a","mod"),o=Lt(n,"b","mod");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.mod(r,o);return n([r,o]),e}),a,null,"Mod")}});var Jo=qt({square_:function(t){var n=Lt(t,"x","square"),e=[n];return Tt.runKernelFunc((function(t,e){return e([n]),t.square(n)}),{x:n},null,"Square",{},e,[])}});var Yo=qt({moments_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=B(n,(t=Lt(t,"x","moments")).shape),o=Go(t,r,e),a=o.shape;e||(a=Le(o.shape,r));var i=Jo(Mo(En(t,"float32"),On(o,a)));return{mean:o,variance:Go(i,r,e)}}});var Zo=qt({multiRNNCell_:function(t,n,e,r){for(var o=Lt(n,"data","multiRNNCell"),a=zt(e,"c","multiRNNCell"),i=zt(r,"h","multiRNNCell"),u=o,s=[],c=0;c<t.length;c++){var l=t[c](u,a[c],i[c]);s.push(l[0]),s.push(l[1]),u=l[1]}var f=[],p=[];for(c=0;c<s.length;c+=2)f.push(s[c]),p.push(s[c+1]);return[f,p]}});var Xo=qt({multinomial_:function(t,n,e,r){void 0===r&&(r=!1);var o=Lt(t,"logits","multinomial"),a=o.size,i=o.rank;if(a<2)throw new Error("Error in multinomial: you need at least 2 outcomes, but got "+a+".");if(i>2)throw new Error("Rank of probabilities must be 1 or 2, but is "+i);e=e||Math.random();var u=1===i?On(o,[1,-1]):o,s=Tt.runKernelFunc((function(t){return t.multinomial(u,r,n,e)}),{logits2D:u});return 1===i?On(s,[s.size]):s}});var $o=qt({notEqual_:function(t,n){var e,r=Lt(t,"a","notEqual"),o=Lt(n,"b","notEqual");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t){return t.notEqual(r,o)}),a,null,"NotEqual")}});var Qo=qt({real_:function(t){var n=Lt(t,"input","real"),e={input:n};return Tt.runKernelFunc((function(t){return t.real(n)}),e,null,"Real")}});var ta=qt({onesLike_:function(t){var n=Lt(t,"x","onesLike"),e={x:n};return Tt.runKernelFunc((function(t,e){if("complex64"===n.dtype){var r=ta(Qo(n)),o=Jr(fo(n));return Ot(r,o)}return t.onesLike(n)}),e,null,"OnesLike")}});var na=qt({outerProduct_:function(t,n){var e=Lt(t,"v1","outerProduct"),r=Lt(n,"v2","outerProduct");E(1===e.rank&&1===r.rank,(function(){return"Error in outerProduct: inputs must be rank 1, but got ranks "+e.rank+" and "+r.rank+"."}));var o=On(e,[-1,1]),a=On(r,[1,-1]);return Wn(o,a)}});var ea=qt({pad_:function(t,n,e){void 0===e&&(e=0);var r=Lt(t,"x","pad");if(0===r.rank)throw new Error("pad(scalar) is not defined. Pass non-scalar to pad");var o={paddings:n,constantValue:e},a={x:r};return Tt.runKernelFunc((function(t,o){return o([r]),t.pad(r,n,e)}),a,null,"PadV2",o)}});var ra=qt({pad1d_:function(t,n,e){return void 0===e&&(e=0),E(2===n.length,(function(){return"Invalid number of paddings. Must be length of 2."})),ea(t,[n],e)}});var oa=qt({pad2d_:function(t,n,e){return void 0===e&&(e=0),E(2===n.length&&2===n[0].length&&2===n[1].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ea(t,n,e)}});var aa=qt({pad3d_:function(t,n,e){return void 0===e&&(e=0),E(3===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ea(t,n,e)}});var ia=qt({pad4d_:function(t,n,e){return void 0===e&&(e=0),E(4===n.length&&2===n[0].length&&2===n[1].length&&2===n[2].length&&2===n[3].length,(function(){return"Invalid number of paddings. Must be length of 2 each."})),ea(t,n,e)}});var ua=qt({spaceToBatchND_:function(t,n,e){var r=Lt(t,"x","spaceToBatchND");E(r.rank>=1+n.length,(function(){return"input rank "+r.rank+" should be > than [blockShape] "+n.length})),E(e.length===n.length,(function(){return"paddings.shape[0] "+e.length+" must be equal to [blockShape] "+n.length})),E(r.shape.reduce((function(t,r,o){return o>0&&o<=n.length?t&&(r+e[o-1][0]+e[o-1][1])%n[o-1]==0:t}),!0),(function(){return"input spatial dimensions "+r.shape.slice(1)+" with paddings "+e.toString()+" must be divisible by blockShapes "+n.toString()}));var o={x:r},a={blockShape:n,paddings:e};return Tt.runKernelFunc((function(t){return t.spaceToBatchND(r,n,e)}),o,null,"SpaceToBatchND",a)}});var sa=qt({pool_:function(t,n,e,r,o,a){null==o&&(o=[1,1]),null==a&&(a=1),0===r&&(r="valid");var i=Lt(t,"x","maxPool"),u=i,s=!1;3===i.rank&&(s=!0,u=On(i,[1,i.shape[0],i.shape[1],i.shape[2]])),E(ir(a,o),(function(){return"Error in pool: Either strides or dilations must be 1. Got strides "+a+" and dilations '"+o+"'"}));var c,l=Ze(u.shape,n,a,o,r),f=[l.dilationHeight,l.dilationWidth];c="same"===r?function(t,n){var e=t.map((function(t,e){return t+(t-1)*(n[e]-1)})).map((function(t){return t-1})),r=e.map((function(t){return Math.floor(t/2)})),o=e.map((function(t,n){return t-r[n]}));return e.map((function(t,n){return[r[n],o[n]]}))}([l.filterHeight,l.filterWidth],f):[[0,0],[0,0]];var p=1===f[0]&&1===f[1],h=function(t,n,e){var r=e.map((function(t){return t[0]})),o=e.map((function(t){return t[1]})),a=t.concat(r,o),i=n.map((function(t,n){return(t-a[n]%t)%t})),u=o.map((function(t,n){return t+i[n]})),s=n.map((function(t,n){return[r[n],u[n]]})),c=n.map((function(t,n){return[0,i[n]]}));return[s,c]}([l.inHeight,l.inWidth],f,c),d=h[0],v=h[1],m=p?r:"valid",g=p?u:ua(u,f,d),y=("avg"===e?function(){return sr(g,n,a,m)}:function(){return qo(g,n,a,m)})(),b=p?y:gr(y,f,v);return s?On(b,[b.shape[1],b.shape[2],b.shape[3]]):b}});var ca=qt({pow_:function(t,n){var e,r=Lt(t,"base","pow"),o=Lt(n,"exp","pow");e=St(r,o),r=e[0],o=e[1];var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.pow(r,o);return n([r,o,e]),e}),a,null,"Pow")}});var la=qt({prelu_:function(t,n){var e=Lt(t,"x","prelu"),r=Lt(n,"alpha","prelu"),o={x:e,alpha:r};return Tt.runKernelFunc((function(t,n){var o=t.prelu(e,r);return n([e,r]),o}),o,null,"Prelu")}});var fa=qt({prod_:function(t,n,e){void 0===n&&(n=null),void 0===e&&(e=!1);var r=Lt(t,"x","prod"),o={x:r},a={axis:n,keepDims:e};return Tt.runKernelFunc((function(t){"bool"===r.dtype&&(r=En(r,"int32"));var o=B(n,r.shape),a=ze(o,r.rank),i=o,u=r;null!=a&&(u=Un(r,a),i=Oe(i.length,r.rank));var s=t.prod(u,i);if(e){var c=Le(s.shape,o);s=On(s,c)}return s}),o,null,"Prod",a)}});var pa=qt({rand_:function(t,n,e){var r=F(t),o=null;if(null==e||"float32"===e)o=new Float32Array(r);else if("int32"===e)o=new Int32Array(r);else{if("bool"!==e)throw new Error("Unknown data type "+e);o=new Uint8Array(r)}for(var a=0;a<r;a++)o[a]=n();return Tt.makeTensor(o,t,e)}});"undefined"!=typeof globalThis?globalThis:"undefined"!=typeof window?window:"undefined"!=typeof global?global:"undefined"!=typeof self&&self;function ha(t,n){return t(n={exports:{}},n.exports),n.exports}var da=ha((function(t){!function(t,n,e){function r(t){var n,e=this,r=(n=4022871197,function(t){t=t.toString();for(var e=0;e<t.length;e++){var r=.02519603282416938*(n+=t.charCodeAt(e));r-=n=r>>>0,n=(r*=n)>>>0,n+=4294967296*(r-=n)}return 2.3283064365386963e-10*(n>>>0)});e.next=function(){var t=2091639*e.s0+2.3283064365386963e-10*e.c;return e.s0=e.s1,e.s1=e.s2,e.s2=t-(e.c=0|t)},e.c=1,e.s0=r(" "),e.s1=r(" "),e.s2=r(" "),e.s0-=r(t),e.s0<0&&(e.s0+=1),e.s1-=r(t),e.s1<0&&(e.s1+=1),e.s2-=r(t),e.s2<0&&(e.s2+=1),r=null}function o(t,n){return n.c=t.c,n.s0=t.s0,n.s1=t.s1,n.s2=t.s2,n}function a(t,n){var e=new r(t),a=n&&n.state,i=e.next;return i.int32=function(){return 4294967296*e.next()|0},i.double=function(){return i()+11102230246251565e-32*(2097152*i()|0)},i.quick=i,a&&("object"==typeof a&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.alea=a}(0,t,!1)})),va=ha((function(t){!function(t,n,e){function r(t){var n=this,e="";n.x=0,n.y=0,n.z=0,n.w=0,n.next=function(){var t=n.x^n.x<<11;return n.x=n.y,n.y=n.z,n.z=n.w,n.w^=n.w>>>19^t^t>>>8},t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n}function a(t,n){var e=new r(t),a=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,a&&("object"==typeof a&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.xor128=a}(0,t,!1)})),ma=ha((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.x^n.x>>>2;return n.x=n.y,n.y=n.z,n.z=n.w,n.w=n.v,(n.d=n.d+362437|0)+(n.v=n.v^n.v<<4^t^t<<1)|0},n.x=0,n.y=0,n.z=0,n.w=0,n.v=0,t===(0|t)?n.x=t:e+=t;for(var r=0;r<e.length+64;r++)n.x^=0|e.charCodeAt(r),r==e.length&&(n.d=n.x<<10^n.x>>>4),n.next()}function o(t,n){return n.x=t.x,n.y=t.y,n.z=t.z,n.w=t.w,n.v=t.v,n.d=t.d,n}function a(t,n){var e=new r(t),a=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,a&&("object"==typeof a&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.xorwow=a}(0,t,!1)})),ga=ha((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.x,o=n.i;return t=r[o],e=(t^=t>>>7)^t<<24,e^=(t=r[o+1&7])^t>>>10,e^=(t=r[o+3&7])^t>>>3,e^=(t=r[o+4&7])^t<<7,t=r[o+7&7],e^=(t^=t<<13)^t<<9,r[o]=e,n.i=o+1&7,e},function(t,n){var e,r=[];if(n===(0|n))r[0]=n;else for(n=""+n,e=0;e<n.length;++e)r[7&e]=r[7&e]<<15^n.charCodeAt(e)+r[e+1&7]<<13;for(;r.length<8;)r.push(0);for(e=0;e<8&&0===r[e];++e);for(8==e?r[7]=-1:r[e],t.x=r,t.i=0,e=256;e>0;--e)t.next()}(n,t)}function o(t,n){return n.x=t.x.slice(),n.i=t.i,n}function a(t,n){null==t&&(t=+new Date);var e=new r(t),a=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,a&&(a.x&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.xorshift7=a}(0,t,!1)})),ya=ha((function(t){!function(t,n,e){function r(t){var n=this;n.next=function(){var t,e,r=n.w,o=n.X,a=n.i;return n.w=r=r+1640531527|0,e=o[a+34&127],t=o[a=a+1&127],e^=e<<13,t^=t<<17,e^=e>>>15,t^=t>>>12,e=o[a]=e^t,n.i=a,e+(r^r>>>16)|0},function(t,n){var e,r,o,a,i,u=[],s=128;for(n===(0|n)?(r=n,n=null):(n+="\0",r=0,s=Math.max(s,n.length)),o=0,a=-32;a<s;++a)n&&(r^=n.charCodeAt((a+32)%n.length)),0===a&&(i=r),r^=r<<10,r^=r>>>15,r^=r<<4,r^=r>>>13,a>=0&&(i=i+1640531527|0,o=0==(e=u[127&a]^=r+i)?o+1:0);for(o>=128&&(u[127&(n&&n.length||0)]=-1),o=127,a=512;a>0;--a)r=u[o+34&127],e=u[o=o+1&127],r^=r<<13,e^=e<<17,r^=r>>>15,e^=e>>>12,u[o]=r^e;t.w=i,t.X=u,t.i=o}(n,t)}function o(t,n){return n.i=t.i,n.w=t.w,n.X=t.X.slice(),n}function a(t,n){null==t&&(t=+new Date);var e=new r(t),a=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,a&&(a.X&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.xor4096=a}(0,t,!1)})),ba=ha((function(t){!function(t,n,e){function r(t){var n=this,e="";n.next=function(){var t=n.b,e=n.c,r=n.d,o=n.a;return t=t<<25^t>>>7^e,e=e-r|0,r=r<<24^r>>>8^o,o=o-t|0,n.b=t=t<<20^t>>>12^e,n.c=e=e-r|0,n.d=r<<16^e>>>16^o,n.a=o-t|0},n.a=0,n.b=0,n.c=-1640531527,n.d=1367130551,t===Math.floor(t)?(n.a=t/4294967296|0,n.b=0|t):e+=t;for(var r=0;r<e.length+20;r++)n.b^=0|e.charCodeAt(r),n.next()}function o(t,n){return n.a=t.a,n.b=t.b,n.c=t.c,n.d=t.d,n}function a(t,n){var e=new r(t),a=n&&n.state,i=function(){return(e.next()>>>0)/4294967296};return i.double=function(){do{var t=((e.next()>>>11)+(e.next()>>>0)/4294967296)/(1<<21)}while(0===t);return t},i.int32=e.next,i.quick=i,a&&("object"==typeof a&&o(a,e),i.state=function(){return o(e,{})}),i}n&&n.exports?n.exports=a:e&&e.amd?e((function(){return a})):this.tychei=a}(0,t,!1)})),wa=ha((function(t){!function(n,e){var r,o=this,a=e.pow(256,6),i=e.pow(2,52),u=2*i;function s(t,s,h){var d=[],v=f(function t(n,e){var r,o=[],a=typeof n;if(e&&"object"==a)for(r in n)try{o.push(t(n[r],e-1))}catch(t){}return o.length?o:"string"==a?n:n+"\0"}((s=1==s?{entropy:!0}:s||{}).entropy?[t,p(n)]:null==t?function(){try{var t;return r&&(t=r.randomBytes)?t=t(256):(t=new Uint8Array(256),(o.crypto||o.msCrypto).getRandomValues(t)),p(t)}catch(t){var e=o.navigator,a=e&&e.plugins;return[+new Date,o,a,o.screen,p(n)]}}():t,3),d),m=new c(d),g=function(){for(var t=m.g(6),n=a,e=0;t<i;)t=256*(t+e),n*=256,e=m.g(1);for(;t>=u;)t/=2,n/=2,e>>>=1;return(t+e)/n};return g.int32=function(){return 0|m.g(4)},g.quick=function(){return m.g(4)/4294967296},g.double=g,f(p(m.S),n),(s.pass||h||function(t,n,r,o){return o&&(o.S&&l(o,m),t.state=function(){return l(m,{})}),r?(e.random=t,n):t})(g,v,"global"in s?s.global:this==e,s.state)}function c(t){var n,e=t.length,r=this,o=0,a=r.i=r.j=0,i=r.S=[];for(e||(t=[e++]);o<256;)i[o]=o++;for(o=0;o<256;o++)i[o]=i[a=255&a+t[o%e]+(n=i[o])],i[a]=n;(r.g=function(t){for(var n,e=0,o=r.i,a=r.j,i=r.S;t--;)n=i[o=255&o+1],e=256*e+i[255&(i[o]=i[a=255&a+n])+(i[a]=n)];return r.i=o,r.j=a,e})(256)}function l(t,n){return n.i=t.i,n.j=t.j,n.S=t.S.slice(),n}function f(t,n){for(var e,r=t+"",o=0;o<r.length;)n[255&o]=255&(e^=19*n[255&o])+r.charCodeAt(o++);return p(n)}function p(t){return String.fromCharCode.apply(0,t)}if(e.seedrandom=s,f(e.random(),n),t.exports){t.exports=s;try{r=require("crypto")}catch(t){}}}([],Math)}));wa.alea=da,wa.xor128=va,wa.xorwow=ma,wa.xorshift7=ga,wa.xor4096=ya,wa.tychei=ba;var ka=wa.alea,xa=function(){function t(t,n,e,r,o){this.mean=t,this.stdDev=n,this.dtype=e,this.nextVal=NaN,this.truncated=r,this.truncated&&(this.upper=this.mean+2*this.stdDev,this.lower=this.mean-2*this.stdDev);var a=o||Math.random();this.random=ka(a.toString())}return t.prototype.nextValue=function(){if(!isNaN(this.nextVal)){var t=this.nextVal;return this.nextVal=NaN,t}for(var n,e,r=!1;!r;){var o=void 0,a=void 0,i=void 0;do{i=(o=2*this.random()-1)*o+(a=2*this.random()-1)*a}while(i>=1||0===i);var u=Math.sqrt(-2*Math.log(i)/i);n=this.mean+this.stdDev*o*u,e=this.mean+this.stdDev*a*u,this.truncated&&!this.isValidTruncated(n)||(r=!0)}return this.truncated&&!this.isValidTruncated(e)||(this.nextVal=this.convertValue(e)),this.convertValue(n)},t.prototype.convertValue=function(t){return null==this.dtype||"float32"===this.dtype?t:Math.round(t)},t.prototype.isValidTruncated=function(t){return t<=this.upper&&t>=this.lower},t}(),Sa=function(){function t(t,n,e,r){this.alpha=t,this.beta=1/n,this.dtype=e;var o=r||Math.random();this.randu=ka(o.toString()),this.randn=new xa(0,1,e,!1,this.randu()),this.d=t<1?t+2/3:t-1/3,this.c=1/Math.sqrt(9*this.d)}return t.prototype.nextValue=function(){for(var t,n,e,r,o,a;;){do{r=this.randn.nextValue(),a=1+this.c*r}while(a<=0);if(a*=a*a,n=1-.331*(t=r*r)*t,e=.5*t+this.d*(1-a+Math.log(a)),(o=this.randu())<n||Math.log(o)<e)break}return a=1/this.beta*this.d*a,this.alpha<1&&(a*=Math.pow(this.randu(),1/this.alpha)),this.convertValue(a)},t.prototype.convertValue=function(t){return"float32"===this.dtype?t:Math.round(t)},t}(),Ea=function(){function t(t,n,e,r){var o=this;if(void 0===t&&(t=0),void 0===n&&(n=1),this.canReturnFloat=function(){return null==o.dtype||"float32"===o.dtype},this.min=t,this.range=n-t,this.dtype=e,null==r&&(r=Math.random()),"number"==typeof r&&(r=r.toString()),!this.canReturnFloat()&&this.range<=1)throw new Error("The difference between "+t+" - "+n+" <= 1 and dtype is not float");this.random=ka(r)}return t.prototype.convertValue=function(t){return this.canReturnFloat()?t:Math.round(t)},t.prototype.nextValue=function(){return this.convertValue(this.min+this.range*this.random())},t}();var Da=qt({randomGamma_:function(t,n,e,r,o){if(void 0===e&&(e=1),void 0===r&&(r="float32"),null==e&&(e=1),null==r&&(r="float32"),"float32"!==r&&"int32"!==r)throw new Error("Unsupported data type "+r);for(var a=new Sa(n,e,r,o),i=Sn(t,r),u=0;u<i.values.length;u++)i.values[u]=a.nextValue();return i.toTensor()}});var Na=qt({randomNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type "+r);for(var a=new xa(n,e,r,!1,o),i=Sn(t,r),u=0;u<i.values.length;u++)i.values[u]=a.nextValue();return i.toTensor()}});var Ia=qt({randomUniform_:function(t,n,e,r,o){void 0===n&&(n=0),void 0===e&&(e=1),void 0===r&&(r="float32");for(var a=Sn(t,r),i=new Ea(n,e,null,o),u=0;u<a.values.length;u++)a.values[u]=i.nextValue();return a.toTensor()}});function Fa(t,n){N(t);var e=Ct(t,n);if(1!==e.length)throw new Error("tensor1d() requires values to be a flat/TypedArray");return Wt(t,null,e,n)}function Aa(t,n,e,r){if(void 0===e&&(e=1),void 0===r&&(r="float32"),0===e)throw new Error("Cannot have a step of zero");var o={start:t,stop:n,step:e,dtype:r};return Tt.runKernelFunc((function(){if(t===n||t<n&&e<0||n<t&&e>1)return Ko([0],r);var o=Q(Math.abs(Math.ceil((n-t)/e)),r);n<t&&1===e&&(e=-1),o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+e;return Fa(o,r)}),{},null,"Range",o)}var Ta=qt({reciprocal_:function(t){var n=Lt(t,"x","reciprocal"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.reciprocal(n);return e([n]),r}),e,null,"Reciprocal")}});var Ma=qt({relu_:function(t){var n=Lt(t,"x","relu"),e={x:n};return Tt.runKernelFunc((function(t,e){return e([n]),"bool"===n.dtype?En(n,"int32"):t.relu(n)}),e,null,"Relu")}});var _a=qt({relu6_:function(t){var n=Lt(t,"x","relu6"),e={x:n};return Tt.runKernelFunc((function(t,e){return e([n]),"bool"===n.dtype?En(n,"int32"):t.relu6(n)}),e,null,"Relu6")}});var Ba=qt({reverse_:function(t,n){var e=Lt(t,"x","reverse"),r={x:e},o={dims:n};return Tt.runKernelFunc((function(t){var r=B(n,e.shape);if(0===e.rank)return Dn(e);var o=t.reverse(e,r);return On(o,e.shape)}),r,null,"Reverse",o)}});var Ra=qt({reverse1d_:function(t){var n=Lt(t,"x","reverse");return E(1===n.rank,(function(){return"Error in reverse1D: x must be rank 1 but got rank "+n.rank+"."})),Ba(n,0)}});var Ca=qt({reverse2d_:function(t,n){var e=Lt(t,"x","reverse");return E(2===e.rank,(function(){return"Error in reverse2D: x must be rank 2 but got rank "+e.rank+"."})),Ba(e,n)}});var Pa=qt({reverse3d_:function(t,n){var e=Lt(t,"x","reverse");return E(3===e.rank,(function(){return"Error in reverse3D: x must be rank 3 but got rank "+e.rank+"."})),Ba(e,n)}});var La=qt({reverse4d_:function(t,n){var e=Lt(t,"x","reverse");return E(4===e.rank,(function(){return"Error in reverse4D: x must be rank 4 but got rank "+e.rank+"."})),Ba(e,n)}});var za=qt({round_:function(t){var n=Lt(t,"x","round"),e={x:n};return Tt.runKernelFunc((function(t){return t.round(n)}),e,null,"Round")}});var qa=qt({rsqrt_:function(t){var n=Lt(t,"x","rsqrt"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.rsqrt(n);return e([n]),r}),e,null,"Rsqrt")}});var Oa=qt({selu_:function(t){var n=Lt(t,"x","selu"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.selu(n);return e([n]),r}),e,null,"Selu")}});var Wa=qt({separableConv2d_:function(t,n,e,r,o,a,i){void 0===a&&(a=[1,1]),void 0===i&&(i="NHWC");var u=Lt(t,"x","separableConv2d"),s=Lt(n,"depthwiseFilter","separableConv2d"),c=Lt(e,"pointwiseFilter","separableConv2d"),l=u,f=!1;if(3===u.rank&&(f=!0,l=On(u,[1,u.shape[0],u.shape[1],u.shape[2]])),"NCHW"===i)throw new Error("separableConv2d currently does not support dataFormat NCHW; only NHWC is supported");E(4===l.rank,(function(){return"Error in separableConv2d: input must be rank 4, but got rank "+l.rank+"."})),E(4===s.rank,(function(){return"Error in separableConv2d: depthwise filter must be rank 4, but got rank "+s.rank+"."})),E(4===c.rank,(function(){return"Error in separableConv2d: pointwise filter must be rank 4, but got rank "+s.rank+"."})),E(1===c.shape[0],(function(){return"Error in separableConv2d: the first dimension of pointwise filter  must be 1, but got "+c.shape[0]+"."})),E(1===c.shape[1],(function(){return"Error in separableConv2d: the second dimension of pointwise filter must be 1, but got "+c.shape[1]+"."}));var p=s.shape[2],h=s.shape[3];E(c.shape[2]===p*h,(function(){return"Error in separableConv2d: the third dimension of pointwise filter must be "+p*h+", but got "+c.shape[2]+"."}));var d=Wr(l,s,r,o,i,a),v=Tr(d,c,1,"valid",i);return f?On(v,[v.shape[1],v.shape[2],v.shape[3]]):v}});var Ka=function(t,n){return r(this,void 0,void 0,(function(){var e,r,a,i,u,s,c,l,f,p;return o(this,(function(o){switch(o.label){case 0:return e=Lt(t,"x","setdiff1d"),r=Lt(n,"y","setdiff1d"),E(e.dtype===r.dtype,(function(){return"x and y should have the same dtype, but got x ("+e.dtype+") and y ("+r.dtype+")."})),E(1===e.rank,(function(){return"x should be 1D tensor, but got x ("+e.shape+")."})),E(1===r.rank,(function(){return"y should be 1D tensor, but got y ("+r.shape+")."})),[4,e.data()];case 1:return a=o.sent(),[4,r.data()];case 2:for(i=o.sent(),u=new Set(i),s=0,f=0;f<a.length;f++)u.has(a[f])||s++;for(c=new ft([s],e.dtype),l=new ft([s],"int32"),f=0,p=0;f<a.length;f++)u.has(a[f])||(c.values[p]=a[f],l.values[p]=f,p++);return[2,[c.toTensor(),l.toTensor()]]}}))}))};var Ua=qt({sign_:function(t){var n=Lt(t,"x","sign"),e={x:n};return Tt.runKernelFunc((function(t){return t.sign(n)}),e,null,"Sign")}});var Ga=qt({sin_:function(t){var n=Lt(t,"x","sin"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.sin(n);return e([n]),r}),e,null,"Sin")}});var Va=qt({sinh_:function(t){var n=Lt(t,"x","sinh"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.sinh(n);return e([n]),r}),e,null,"Sinh")}});var Ha=qt({slice1d_:function(t,n,e){var r=Lt(t,"x","slice1d");return E(1===r.rank,(function(){return"slice1d expects a rank-1 tensor, but got a rank-"+r.rank+" tensor"})),dr(r,[n],[e])}});var ja=qt({slice2d_:function(t,n,e){var r=Lt(t,"x","slice2d");return E(2===r.rank,(function(){return"slice2d expects a rank-2 tensor, but got a rank-"+r.rank+" tensor"})),dr(r,n,e)}});var Ja=qt({slice3d_:function(t,n,e){var r=Lt(t,"x","slice3d");return E(3===r.rank,(function(){return"slice3d expects a rank-3 tensor, but got a rank-"+r.rank+" tensor"})),dr(r,n,e)}});var Ya=qt({slice4d_:function(t,n,e){var r=Lt(t,"x","slice4d");return E(4===r.rank,(function(){return"slice4d expects a rank-4 tensor, but got a rank-"+r.rank+" tensor"})),dr(r,n,e)}});var Za=qt({softmax_:function(t,n){void 0===n&&(n=-1);var e=Lt(t,"logits","softmax","float32");if(-1===n&&(n=e.rank-1),n!==e.rank-1)throw Error("Softmax along a non-last dimension is not yet supported. Logits was rank "+e.rank+" and dim was "+n);var r={logits:e},o={dim:n};return Tt.runKernelFunc((function(t,r){var o=t.softmax(e,n);return r([o]),o}),r,null,"Softmax",o)}});var Xa=qt({fft_:function(t){E("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.fft() must be complex64 but got "+t.dtype+"."}));var n={input:t};return Tt.runKernelFunc((function(n){var e=t.shape[t.shape.length-1],r=t.size/e,o=t.as2D(r,e);return n.fft(o).reshape(t.shape)}),n,null,"FFT")}});var $a=qt({ifft_:function(t){E("complex64"===t.dtype,(function(){return"The dtype for tf.spectral.ifft() must be complex64 but got "+t.dtype+"."}));var n={input:t};return Tt.runKernelFunc((function(n){var e=t.shape[t.shape.length-1],r=t.size/e,o=On(t,[r,e]),a=n.ifft(o);return On(a,t.shape)}),n,null,"IFFT")}});var Qa=qt({irfft_:function(t){var n,e=t.shape[t.shape.length-1],r=t.size/e;if(e<=2){var o=On(t,[r,e]);n=$a(o)}else{var a=[r,2*(e-1)],i=On(Qo(t),[r,e]),u=On(fo(t),[r,e]),s=Ba(dr(i,[0,1],[r,e-2]),1),c=Ae(Ba(dr(u,[0,1],[r,e-2]),1),go(-1)),l=pr([i,s],1),f=pr([u,c],1);o=On(Ot(l,f),[a[0],a[1]]);n=$a(o)}if(n=Qo(n),3===t.rank&&0!==t.shape[0]){var p=n,h=t.shape[0];n=On(n,[h,n.shape[0]/h,n.shape[1]]),p.dispose()}return n}});function ti(t,n,e){void 0===e&&(e=0);var r=[];if("number"==typeof n)E(t.shape[e]%n==0,(function(){return"Number of splits must evenly divide the axis."})),r=new Array(n).fill(t.shape[e]/n);else{E(n.reduce((function(t,n){return-1===n&&(t+=1),t}),0)<=1,(function(){return"There should be only one negative value in split array."}));var o=n.indexOf(-1);if(-1!==o){var a=n.reduce((function(t,n){return n>0?t+n:t}));n[o]=t.shape[e]-a}E(t.shape[e]===n.reduce((function(t,n){return t+n})),(function(){return"The sum of sizes must match the size of the axis dimension."})),r=n}return r}var ni=qt({split_:function(t,n,e){void 0===e&&(e=0);var r=Lt(t,"x","split"),o={x:r},a={numOrSizeSplits:n,axis:e};return Tt.runKernelFunc((function(t,o){var a=B(e,r.shape)[0],i=ti(r,n,a);return t.split(r,i,a)}),o,null,"SplitV",a)}});var ei=qt({rfft_:function(t,n){E("float32"===t.dtype,(function(){return"The dtype for rfft() must be real value but got "+t.dtype}));var e,r=t.shape[t.shape.length-1],o=t.size/r;if(null!=n&&n<r){var a=t.shape.map((function(t){return 0})),i=t.shape.map((function(t){return t}));i[t.shape.length-1]=n,e=dr(t,a,i),r=n}else if(null!=n&&n>r){var u=t.shape.map((function(t){return t}));u[t.shape.length-1]=n-r,e=pr([t,Ko(u)],t.shape.length-1),r=n}else e=t;var s=Jr(e),c=On(Ot(e,s),[o,r]),l=Xa(c),f=Math.floor(r/2)+1,p=Qo(l),h=fo(l),d=ni(p,[f,r-f],p.shape.length-1),v=ni(h,[f,r-f],h.shape.length-1),m=e.shape.slice();return m[e.shape.length-1]=f,On(Ot(d[0],v[0]),m)}});var ri=qt({sqrt_:function(t){var n=Lt(t,"x","sqrt"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.sqrt(n);return e([n]),r}),e,null,"Sqrt")}});var oi=qt({squaredDifference_:function(t,n){var e,r=Lt(t,"a","squaredDifference"),o=Lt(n,"b","squaredDifference");e=St(r,o),r=e[0],o=e[1],Vr(r.shape,o.shape);var a={a:r,b:o};return Tt.runKernelFunc((function(t,n){var e=t.squaredDifference(r,o);return n([r,o]),e}),a,null,"SquaredDifference",{})}});var ai=qt({squeeze_:function(t,n){var e=Lt(t,"x","squeeze");return On(e,R(e.shape,n).newShape)}});var ii=qt({stack_:function(t,n){void 0===n&&(n=0);var e=zt(t,"tensors","stack");if(E(e.length>=1,(function(){return"Pass at least one tensor to tf.stack"})),1===e.length)return to(e[0],n);var r=e[0].rank,o=e[0].shape,a=e[0].dtype;E(n<=r,(function(){return"Axis must be <= rank of the tensor"})),e.forEach((function(t){D(o,t.shape,"All tensors passed to stack must have matching shapes"),E(a===t.dtype,(function(){return"All tensors passed to stack must have matching dtypes"}))}));var i=e.map((function(t){return to(t,n)}));return pr(i,n)}});var ui=qt({step_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","step"),r={x:e},o={alpha:n};return Tt.runKernelFunc((function(t){return t.step(e,n)}),r,null,"Step",o)}});var si=qt({stridedSlice_:function(t,n,e,r,o,a,i,u,s){void 0===o&&(o=0),void 0===a&&(a=0),void 0===i&&(i=0),void 0===u&&(u=0),void 0===s&&(s=0);var c=Lt(t,"x","stridedSlice"),l={x:c},f={begin:n,end:e,strides:r,beginMask:o,endMask:a,ellipsisMask:i,newAxisMask:u,shrinkAxisMask:s};return Tt.runKernelFunc((function(t){null==r&&(r=new Array(n.length));var l=ne(i);if(l.length>1)throw new Error("Multiple ellipses in slice is not allowed.");if(0!==i&&0!==u)throw new Error("Using both ellipsisMask and newAxisMask is not yet supported.");if(0!==i&&0!==s)throw new Error("Using both ellipsisMask and shrinkAxisMask is not yet supported.");var f=c.rank-n.length,p=ne(u),h=c.shape.slice();p.forEach((function(t){n[t]=0,e[t]=1,h.splice(t,0,1)}));var d=ie((c=On(c,h)).shape,l,f,n,e,r,o,a,i),v=d.begin,m=d.end,g=d.strides;n=v,e=m,r=g;var y=ne(s);y.forEach((function(t){e[t]=n[t]+1,r[t]=1}));var b=ee(n,e,r),w=b.filter((function(t,n){return-1===y.indexOf(n)}));if(r.every((function(t){return 1===t})))return On(dr(c,n,b),w);var k=t.stridedSlice(c,n,e,r);return On(k,w)}),l,null,"StridedSlice",f)}});var ci=qt({tan_:function(t){var n=Lt(t,"x","tan"),e={x:n};return Tt.runKernelFunc((function(t,e){var r=t.tan(n);return e([n]),r}),e,null,"Tan")}});function li(t,n,e){if(N(t),null!=n&&2!==n.length)throw new Error("tensor2d() requires shape to have two numbers");var r=Ct(t,e);if(2!==r.length&&1!==r.length)throw new Error("tensor2d() requires values to be number[][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor2d() requires shape to be provided when `values` are a flat/TypedArray");return Wt(t,n,r,e)}var fi=qt({topk_:function(t,n,e){void 0===n&&(n=1),void 0===e&&(e=!0);var r=Lt(t,"x","topk");if(0===r.rank)throw new Error("topk() expects the input to be of rank 1 or higher");var o=r.shape[r.shape.length-1];if(n>o)throw new Error("'k' passed to topk() must be <= the last dimension ("+o+") but got "+n);var a={x:r},i={k:n,sorted:e},u=Tt.runKernelFunc((function(t){return t.topk(r,n,e)}),a,null,"TopK",i);return{values:u[0],indices:u[1]}}});var pi=qt({truncatedNormal_:function(t,n,e,r,o){if(void 0===n&&(n=0),void 0===e&&(e=1),null!=r&&"bool"===r)throw new Error("Unsupported data type $ { dtype }");for(var a=new xa(n,e,r,!0,o),i=Sn(t,r),u=0;u<i.values.length;u++)i.values[u]=a.nextValue();return i.toTensor()}});var hi=qt({unique_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","unique",null);E(e.rank>0,(function(){return"The input tensor must be at least 1D"}));var r={x:e},o={axis:n},a=Tt.runKernel("Unique",r,o);return{values:a[0],indices:a[1]}}});var di=qt({unsortedSegmentSum_:function(t,n,e){var r=Lt(t,"x","unsortedSegmentSum"),o=Lt(n,"segmentIds","unsortedSegmentSum","int32");E(T(e),(function(){return"numSegments must be of dtype int"}));var a={x:r,segmentIds:o},i={numSegments:e};return Tt.runKernelFunc((function(t,n){var a=t.unsortedSegmentSum(r,o,e);return n([o]),a}),a,null,"UnsortedSegmentSum",i)}});var vi=qt({unstack_:function(t,n){void 0===n&&(n=0);var e=Lt(t,"x","unstack");E(n>=-e.shape.length&&n<e.shape.length,(function(){return"Axis = "+n+" is not in [-"+e.shape.length+", "+e.shape.length+")"})),n<0&&(n+=e.shape.length);var r={value:e},o={axis:n};return Tt.runKernelFunc((function(t){return t.unstack(e,n)}),r,null,"Unpack",o)}});function mi(t,n){for(var e=[],r=0;r<n.length;r++)n[r]&&e.push(r);var o=Sn(t,"int32"),a=Sn([e.length,t.length],"int32");for(r=0;r<e.length;r++){var i=o.indexToLoc(e[r]),u=r*t.length;a.values.set(i,u)}return a.toTensor()}var gi=function(t){return r(this,void 0,void 0,(function(){var n,e,r;return o(this,(function(o){switch(o.label){case 0:return[4,(n=Lt(t,"condition","whereAsync","bool")).data()];case 1:return e=o.sent(),r=mi(n.shape,e),t!==n&&n.dispose(),[2,r]}}))}))};var yi=function(t,n,e){return r(this,void 0,void 0,(function(){var r,a,i,u,s,c,l,f,p,h,d,v,m;return o(this,(function(o){switch(o.label){case 0:for(r=Lt(t,"tensor","boolMask"),a=Lt(n,"mask","boolMask","bool"),i=null==e?0:e,u=a.rank,s=r.shape,E(u>0,(function(){return"mask cannot be scalar"})),D(s.slice(i,i+u),a.shape,"mask's shape must match the first K dimensions of tensor's shape,"),c=1,l=i;l<i+u;l++)c*=s[l];return f=s.slice(0,i).concat([c],s.slice(i+u)),p=On(r,f),h=On(a,[-1]),[4,gi(h)];case 1:return d=o.sent(),v=ai(d,[1]),m=so(p,v,i),t!==r&&r.dispose(),n!==a&&a.dispose(),v.dispose(),p.dispose(),h.dispose(),d.dispose(),[2,m]}}))}))};var bi=qt({equalStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","equalStrict"),r=Lt(n,"b","equalStrict");return D(e.shape,r.shape,"Error in equalStrict: "),Hr(e,r)}}),wi=qt({greaterEqualStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","greaterEqualStrict"),r=Lt(n,"b","greaterEqualStrict");return D(e.shape,r.shape,"Error in greaterEqualStrict: "),lo(e,r)}}),ki=qt({greaterStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","greaterStrict"),r=Lt(n,"b","greaterStrict");return D(e.shape,r.shape,"Error in greaterStrict: "),co(e,r)}}),xi=qt({lessEqualStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","lessEqualStrict"),r=Lt(n,"b","lessEqualStrict");return D(e.shape,r.shape,"Error in lessEqualStrict: "),wo(e,r)}}),Si=qt({lessStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","lessStrict"),r=Lt(n,"b","lessStrict");return D(e.shape,r.shape,"Error in lessStrict: "),bo(e,r)}}),Ei=qt({notEqualStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","notEqualStrict"),r=Lt(n,"b","notEqualStrict");return D(e.shape,r.shape,"Error in notEqualStrict: "),$o(e,r)}});var Di=qt({addStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","addStrict"),r=Lt(n,"b","addStrict");return D(e.shape,r.shape,"Error in addStrict: "),Ne(e,r)}}),Ni=qt({divStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","div"),r=Lt(n,"b","div");return D(e.shape,r.shape,"Error in divideStrict: "),Fe(e,r)}}),Ii=qt({maximumStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","maximumStrict"),r=Lt(n,"b","maximumStrict");return D(e.shape,r.shape,"Error in maximumStrict: "),mo(e,r)}}),Fi=qt({minimumStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","minimumStrict"),r=Lt(n,"b","minimumStrict");return D(e.shape,r.shape,"Error in minimumStrict: "),Ho(e,r)}}),Ai=qt({modStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","modStrict"),r=Lt(n,"b","modStrict");return D(e.shape,r.shape,"Error in modStrict: "),jo(e,r)}}),Ti=qt({mulStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","mul"),r=Lt(n,"b","mul");return D(e.shape,r.shape,"Error in multiplyStrict: "),Ae(e,r)}}),Mi=qt({powStrict_:function(t,n){return xe("strict variants of ops have been deprecated and will be removed in future"),D(t.shape,n.shape,"Error in powStrict: "),ca(t,n)}}),_i=qt({squaredDifferenceStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","squaredDifferenceStrict"),r=Lt(n,"b","squaredDifferenceStrict");return D(e.shape,r.shape,"Error in squaredDifferenceStrict: "),oi(e,r)}}),Bi=qt({subStrict_:function(t,n){xe("strict variants of ops have been deprecated and will be removed in future");var e=Lt(t,"a","subStrict"),r=Lt(n,"b","subStrict");return D(e.shape,r.shape,"Error in subStrict: "),Mo(e,r)}});var Ri=qt({norm_:function(t,n,e,r){void 0===n&&(n="euclidean"),void 0===e&&(e=null),void 0===r&&(r=!1);var o=function t(n,e,r){void 0===r&&(r=null);if(0===n.rank)return Te(n);if(1!==n.rank&&null===r)return t(On(n,[-1]),e,r);if(1===n.rank||"number"==typeof r||Array.isArray(r)&&1===r.length){if(1===e)return _o(Te(n),r);if(e===1/0)return To(Te(n),r);if(e===-1/0)return Vo(Te(n),r);if("euclidean"===e||2===e)return ri(_o(ca(Te(n),go(2,"int32")),r));throw new Error("Error in norm: invalid ord value: "+e)}if(Array.isArray(r)&&2===r.length){if(1===e)return To(_o(Te(n),r[0]),r[1]-1);if(e===1/0)return To(_o(Te(n),r[1]),r[0]);if(e===-1/0)return Vo(_o(Te(n),r[1]),r[0]);if("fro"===e||"euclidean"===e)return ri(_o(Jo(n),r));throw new Error("Error in norm: invalid ord value: "+e)}throw new Error("Error in norm: invalid axis: "+r)}(t=Lt(t,"x","norm"),n,e),a=o.shape;if(r){var i=B(e,t.shape);a=Le(o.shape,i)}return On(o,a)}});var Ci=qt({movingAverage_:function(t,n,e,r,o){void 0===o&&(o=!0);var a=Lt(t,"v","movingAverage"),i=Lt(n,"x","movingAverage"),u=Lt(e,"decay","movingAverage");Et(a,i),E(A(a.shape,i.shape),(function(){return"Shape mismatch in v and x"}));var s=go(1),c=Mo(s,u),l=Ae(Mo(i,a),c);if(o){E(null!=r,(function(){return"When using zeroDebias: true, step is required."}));var f=Lt(r,"step","movingAverage");l=Fe(l,Mo(s,ca(u,f)))}return Ne(a,l)}});var Pi=qt({scatterND_:function(t,n,e){var r=Lt(t,"indices","scatterND","int32"),o=Lt(n,"updates","scatterND");Xn(o,r,e);var a={indices:r,updates:o},i={shape:e};return Tt.runKernelFunc((function(t){return t.scatterND(r,o,e)}),a,null,"ScatterNd",i)}});var Li=qt({sparseToDense_:function(t,n,e,r){void 0===r&&(r=0);var o=Lt(t,"sparseIndices","sparseToDense","int32"),a=Lt(n,"sparseValues","sparseToDense"),i=Lt(r,"defaultValue","sparseToDense",a.dtype);!function(t,n,e,r){if("int32"!==t.dtype)throw new Error("tf.sparseToDense() expects the indices to be int32 type, but the dtype was "+t.dtype+".");if(t.rank>2)throw new Error("sparseIndices should be a scalar, vector, or matrix, but got shape "+t.shape+".");var o=t.rank>0?t.shape[0]:1,a=t.rank>1?t.shape[1]:1;if(e.length!==a)throw new Error("outputShape has incorrect number of elements:, "+e.length+", should be: "+a+".");var i=n.size;if(0!==n.rank&&(1!==n.rank||i!==o))throw new Error("sparseValues has incorrect shape "+n.shape+", should be [] or ["+o+"]");if(n.dtype!==r.dtype)throw new Error("sparseValues.dtype must match defaultValues.dtype")}(o,a,e,i);var u={sparseIndices:o,sparseValues:a,defaultValue:i},s={outputShape:e};return Tt.runKernelFunc((function(t){return t.sparseToDense(o,a,e,i)}),u,null,"SparseToDense",s)}});var zi=qt({gatherND_:function(t,n){var e=Lt(n,"indices","gatherND","int32"),r=Lt(t,"x","gatherND"),o={params:r,indices:e};return Tt.runKernelFunc((function(t){return t.gatherND(r,e)}),o,null,"GatherNd")}});var qi=qt({dropout_:function(t,n,e,r){var o=Lt(t,"x","dropout");if(E("float32"===o.dtype,(function(){return"x has to be a floating point tensor since it's going to be scaled, but got a "+o.dtype+" tensor instead."})),E(n>=0&&n<1,(function(){return"rate must be a float in the range [0, 1), but got "+n+"."})),0===n)return t instanceof dt?o.clone():o;var a=function(t,n){if(null==n)return t.shape.slice();if(A(t.shape,n))return n;if(t.shape.length===n.length){for(var e=[],r=0;r<t.shape.length;r++)null==n[r]&&null!=t.shape[r]?e.push(t.shape[r]):e.push(n[r]);return e}return n}(o,e),i=1-n,u=Fe(ao(Ne(Ia(a,0,1,"float32",r),i)),i);return Ae(o,u)}});function Oi(t){return Math.floor(Math.pow(2,Math.ceil(Math.log(t)/Math.log(2))))}function Wi(t,n,e){for(var r=1-t%2,o=new Float32Array(t),a=0;a<t;++a){var i=2*Math.PI*a/(t+r-1);o[a]=n-e*Math.cos(i)}return Fa(o,"float32")}var Ki=function(t,n,e){return void 0===e&&(e=1),r(this,void 0,void 0,(function(){var r,a,i,u,s,c,l,f,p,h,d,v,m,g;return o(this,(function(o){switch(o.label){case 0:return r=Lt(t,"predictions","inTopK"),a=Lt(n,"targets","inTopK"),E(r.rank>1,(function(){return"inTopK() expects the predictions to be of rank 2 or higher, but got "+r.rank})),E(r.rank-1===a.rank,(function(){return"predictions rank should be 1 larger than targets rank, but got predictions rank "+r.rank+" and targets rank "+a.rank})),D(r.shape.slice(0,r.shape.length-1),a.shape,"predictions's shape should be align with the targets' shape, except the last dimension."),i=r.shape[r.shape.length-1],E(e>0&&e<=i,(function(){return"'k' passed to inTopK() must be > 0 && <= the predictions last dimension ("+i+"), but got "+e})),[4,r.data()];case 1:return u=o.sent(),[4,a.data()];case 2:for(s=o.sent(),c=[u.length/i,i],f=c[1],p=C("bool",l=c[0]),h=0;h<l;h++){for(d=h*f,v=u.subarray(d,d+f),m=[],g=0;g<v.length;g++)m.push({value:v[g],index:g});for(m.sort((function(t,n){return n.value-t.value})),p[h]=0,g=0;g<e;g++)if(m[g].index===s[h]){p[h]=1;break}}return t!==r&&r.dispose(),n!==a&&a.dispose(),[2,Kt(p,a.shape,"bool")]}}))}))};var Ui=qt({conv2DBackpropFilter_:function(t,n,e,r,o,a,i){void 0===a&&(a="NHWC");var u=t;3===t.rank&&(u=On(t,[1,t.shape[0],t.shape[1],t.shape[2]]));var s=n;3===s.rank&&(s=On(n,[1,n.shape[0],n.shape[1],n.shape[2]])),E(4===u.rank,(function(){return"Error in conv2dDerFilter: input must be rank 4, but got shape "+u.shape+"."})),E(4===s.rank,(function(){return"Error in conv2dDerFilter: dy must be rank 4, but got shape "+s.shape+"."})),E(4===e.length,(function(){return"Error in conv2dDerFilter: filterShape must be length 4, but got "+e+"."}));var c="NHWC"===a?u.shape[3]:u.shape[1],l="NHWC"===a?s.shape[3]:s.shape[1];E(c===e[2],(function(){return"Error in conv2dDerFilter: depth of input "+c+") must match input depth in filter ("+e[2]+"."})),E(l===e[3],(function(){return"Error in conv2dDerFilter: depth of dy ("+l+") must match output depth for filter ("+e[3]+")."})),null!=i&&E(T(o),(function(){return"Error in conv2dDerFilter: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+o+"."}));var f={x:u,dy:s},p={strides:r,pad:o,dataFormat:a,dimRoundingMode:i};return Tt.runKernelFunc((function(t){var n=ur(a),c=$e(u.shape,e,r,1,o,i,!1,n);return t.conv2dDerFilter(u,s,c)}),f,null,"Conv2DBackpropFilter",p)}});function Gi(t,n,e){if(null==e||"linear"===e)return t;if("relu"===e)return Ae(t,ui(n));throw new Error("Cannot compute gradient for fused activation "+e+".")}function Vi(t,n){var e=n,r=Gr(t.shape,n.shape);return r.length>0&&(e=_o(e,r)),On(e,t.shape)}function Hi(t,n,e){if("linear"===n)return t;if("relu"===n)return Ma(t);if("elu"===n)return Xr(t);if("relu6"===n)return _a(t);if("prelu"===n)return la(t,e);throw new Error("Unknown fused activation "+n+".")}var ji=function(t,n){return!(t>0)||"linear"===n};var Ji=qt({fusedConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?"NHWC":a,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,p=void 0===f?"linear":f,h=t.preluActivationWeights;if(p=p||"linear",!1===ji(Tt.state.gradientDepth,p)){var d=Tr(n,e,r,o,i,s,c);return null!=l&&(d=Ne(d,l)),Hi(d,p,h)}var v=Lt(n,"x","conv2d"),m=Lt(e,"filter","conv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=On(v,[1,v.shape[0],v.shape[1],v.shape[2]])),E(4===g.rank,(function(){return"Error in fused conv2d: input must be rank 4, but got rank "+g.rank+"."})),E(4===m.rank,(function(){return"Error in fused conv2d: filter must be rank 4, but got rank "+m.rank+"."})),null!=c&&E(T(o),(function(){return"Error in fused conv2d: pad must be an integer when using, dimRoundingMode "+c+" but got pad "+o+"."})),E(g.shape[3]===m.shape[2],(function(){return"Error in conv2d: depth of input ("+g.shape[3]+") must match input depth for filter "+m.shape[2]+"."})),E(ir(r,s),(function(){return"Error in conv2D: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),E("NHWC"===i,(function(){return"Error in conv2d: got dataFormat of "+i+" but only NHWC is currently supported."}));var b,w,k=$e(g.shape,m.shape,r,s,o,c);null!=l&&(b=St(b=Lt(l,"bias","fused conv2d"),v)[0],Vr(k.outShape,b.shape)),null!=h&&(w=Lt(h,"prelu weights","fused conv2d"));var x=function(t,n){var e=n,a=e[0],i=e[1],u=e[2],c=e[3],l=Gi(t,u,p);E(ar(s),(function(){return"Error in gradient of fused conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+s+"'"}));var f=[_r(i.shape,l,a,r,o),Ui(i,l,a.shape,r,o)];if(null!=c){var h=Vi(c,l);f.push(h)}return f},S=function(t){return t.fusedConv2d({input:g,filter:m,convInfo:k,bias:b,activation:p,preluActivationWeights:w})},D={x:g,filter:m,bias:b,preluActivationWeights:w},N={strides:r,pad:o,dataFormat:i,dilations:s,dimRoundingMode:c,activation:p};return null==l?Do((function(t,n,e){var r=Tt.runKernelFunc(S,D,null,"FusedConv2D",N);return e([n,t,r]),y&&(r=On(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(g,m):Do((function(t,n,e,r){var o=Tt.runKernelFunc(S,D,null,"FusedConv2D",N);return r([n,t,o,e]),y&&(o=On(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:x}}))(g,m,b)}});var Yi=qt({depthwiseConv2dNativeBackpropFilter_:function(t,n,e,r){var o=t;3===t.rank&&(o=On(t,[1,t.shape[0],t.shape[1],t.shape[2]]));var a=n;3===a.rank&&(a=On(n,[1,n.shape[0],n.shape[1],n.shape[2]]));var i={x:o,dy:a};return Tt.runKernelFunc((function(t){return t.depthwiseConv2DDerFilter(o,a,r)}),i,null,"DepthwiseConv2dNativeBackpropFilter")}});var Zi=qt({depthwiseConv2dNativeBackpropInput_:function(t,n,e,r){var o=n,a=!1;3===n.rank&&(a=!0,o=On(n,[1,n.shape[0],n.shape[1],n.shape[2]]));var i={dy:o},u=Tt.runKernelFunc((function(t){return t.depthwiseConv2DDerInput(o,e,r)}),i,null,"DepthwiseConv2dNativeBackpropInput");return a?On(u,[u.shape[1],u.shape[2],u.shape[3]]):u}});var Xi={__proto__:null,conv2d:Ji,depthwiseConv2d:qt({fusedDepthwiseConv2d_:function(t){var n=t.x,e=t.filter,r=t.strides,o=t.pad,a=t.dataFormat,i=void 0===a?"NHWC":a,u=t.dilations,s=void 0===u?[1,1]:u,c=t.dimRoundingMode,l=t.bias,f=t.activation,p=void 0===f?"linear":f,h=t.preluActivationWeights;if(!1===ji(Tt.state.gradientDepth,p)){var d=Wr(n,e,r,o,i,s,c);return null!=l&&(d=Ne(d,l)),Hi(d,p,h)}var v=Lt(n,"x","depthwiseConv2d"),m=Lt(e,"filter","depthwiseConv2d"),g=v,y=!1;3===v.rank&&(y=!0,g=On(v,[1,v.shape[0],v.shape[1],v.shape[2]])),E(4===g.rank,(function(){return"Error in fused depthwiseConv2d: input must be rank 4, but got rank "+g.rank+"."})),E(4===m.rank,(function(){return"Error in fused depthwiseConv2d: filter must be rank 4, but got rank "+m.rank+"."})),E(g.shape[3]===m.shape[2],(function(){return"Error in fused depthwiseConv2d: number of input channels ("+g.shape[3]+") must match the inChannels dimension in filter "+m.shape[2]+"."})),null==s&&(s=[1,1]),E(ir(r,s),(function(){return"Error in fused depthwiseConv2d: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+s+"'"})),null!=c&&E(T(o),(function(){return"Error in fused depthwiseConv2d: pad must be an integer when using dimRoundingMode "+c+" but got pad "+o+"."}));var b,w,k=$e(g.shape,m.shape,r,s,o,c,!0);null!=l&&(b=St(b=Lt(l,"bias","fused conv2d"),v)[0],Vr(k.outShape,b.shape)),null!=h&&(w=Lt(h,"prelu weights","fused depthwiseConv2d"));var x=function(t,n){E(ar(s),(function(){return"Error in gradient of fused depthwiseConv2d: dilation rates greater than 1 are not yet supported. Got dilations '"+s+"'"}));var e=n[0],r=n[1],o=n[2],a=n[3],i=Gi(t,o,p),u=Zi(r.shape,i,e,k),c=Yi(r,i,e.shape,k);return null!=a?[u,c,Vi(b,i)]:[u,c]},S=function(t){return t.fusedDepthwiseConv2D({input:g,filter:m,convInfo:k,bias:b,activation:p,preluActivationWeights:w})},D={x:g,filter:m,bias:b,preluActivationWeights:w},N={strides:r,pad:o,dataFormat:i,dilations:s,dimRoundingMode:c,activation:p};return null==l?Do((function(t,n,e){var r=Tt.runKernelFunc(S,D,null,"FusedDepthwiseConv2D",N);return e([n,t,r]),y&&(r=On(r,[r.shape[1],r.shape[2],r.shape[3]])),{value:r,gradFunc:x}}))(g,m):Do((function(t,n,e,r){var o=Tt.runKernelFunc(S,D,null,"FusedDepthwiseConv2D",N);return r([n,t,o,e]),y&&(o=On(o,[o.shape[1],o.shape[2],o.shape[3]])),{value:o,gradFunc:x}}))(g,m,b)}}),matMul:qt({fusedMatMul_:function(t){var n,e=t.a,r=t.b,o=t.transposeA,a=void 0!==o&&o,i=t.transposeB,u=void 0!==i&&i,s=t.bias,c=t.activation,l=void 0===c?"linear":c,f=t.preluActivationWeights;if(!1===ji(Tt.state.gradientDepth,l)){var p=Wn(e,r,a,u);return null!=s&&(p=Ne(p,s)),Hi(p,l,f)}var h=Lt(e,"a","fused matMul"),d=Lt(r,"b","fused matMul");n=St(h,d),h=n[0],d=n[1];var v=a?h.shape[h.rank-2]:h.shape[h.rank-1],m=u?d.shape[d.rank-1]:d.shape[d.rank-2],g=a?h.shape[h.rank-1]:h.shape[h.rank-2],y=u?d.shape[d.rank-2]:d.shape[d.rank-1],b=h.shape.slice(0,-2),w=d.shape.slice(0,-2),k=F(b),x=F(w);E(h.rank>=2&&d.rank>=2&&h.rank===d.rank,(function(){return"Error in fused matMul: inputs must have the same rank of at least 2, got ranks "+h.rank+" and "+d.rank+"."})),E(A(b,w),(function(){return"Error in fused matMul: outer dimensions ("+b+") and ("+w+") of Tensors with shapes "+h.shape+" and "+d.shape+" must match."})),E(v===m,(function(){return"Error in fused matMul: inner shapes ("+v+") and ("+m+") of Tensors with shapes "+h.shape+" and "+d.shape+" and transposeA="+a+" and transposeB="+u+" must match."}));var S,D,N=h.shape.slice(0,-2).concat([g,y]),I=On(h,a?[k,v,g]:[k,g,v]),T=On(d,u?[x,y,m]:[x,m,y]);null!=s&&(S=St(S=Lt(s,"bias","fused matMul"),h)[0],Vr(N,S.shape)),null!=f&&(D=Lt(f,"prelu weights","fused matMul"));var M=function(t,n){var e,r,o=n[0],i=n[1],c=n[2],f=n[3],p=Gi(On(t,c.shape),c,l);return a||u?!a&&u?(e=Wn(p,i,!1,!1),r=Wn(p,o,!0,!1)):a&&!u?(e=Wn(i,p,!1,!0),r=Wn(o,p,!1,!1)):(e=Wn(i,p,!0,!0),r=Wn(p,o,!0,!0)):(e=Wn(p,i,!1,!0),r=Wn(o,p,!0,!1)),null!=s?[e,r,Vi(f,p)]:[e,r]},_=function(t){return t.fusedBatchMatMul({a:I,b:T,transposeA:a,transposeB:u,bias:S,activation:l,preluActivationWeights:D})},B={a:I,b:T,bias:S,preluActivationWeights:D},R={transposeA:a,transposeB:u,activation:l};return null==s?Do((function(t,n,e){var r=Tt.runKernelFunc(_,B,null,"_FusedMatMul",R);return e([t,n,r]),{value:On(r,N),gradFunc:M}}))(I,T):Do((function(t,n,e,r){var o=Tt.runKernelFunc(_,B,null,"_FusedMatMul",R);return r([t,n,o,e]),{value:On(o,N),gradFunc:M}}))(I,T,S)}})};var $i=qt({hammingWindow_:function(t){return Wi(t,.54,.46)}});var Qi=qt({hannWindow_:function(t){return Wi(t,.5,.5)}});var tu=qt({frame_:function(t,n,e,r,o){void 0===r&&(r=!1),void 0===o&&(o=0);for(var a=0,i=[];a+n<=t.size;)i.push(dr(t,a,n)),a+=e;if(r)for(;a<t.size;){var u=a+n-t.size,s=pr([dr(t,a,n-u),oo([u],o)]);i.push(s),a+=e}return 0===i.length?li([],[0,n]):On(pr(i),[i.length,n])}});var nu=qt({stft_:function(t,n,e,r,o){void 0===o&&(o=Qi),null==r&&(r=Oi(n));for(var a=tu(t,n,e),i=Ae(a,o(n)),u=[],s=0;s<a.shape[0];s++)u.push(ei(dr(i,[s,0],[1,n]),r));return pr(u)}});var eu=qt({cropAndResize_:function(t,n,e,r,o,a){var i=Lt(t,"image","cropAndResize"),u=Lt(n,"boxes","cropAndResize","float32"),s=Lt(e,"boxInd","cropAndResize","int32");o=o||"bilinear",a=a||0;var c=u.shape[0];E(4===i.rank,(function(){return"Error in cropAndResize: image must be rank 4,but got rank "+i.rank+"."})),E(2===u.rank&&4===u.shape[1],(function(){return"Error in cropAndResize: boxes must be have size ["+c+",4] but had shape "+u.shape+"."})),E(1===s.rank&&s.shape[0]===c,(function(){return"Error in cropAndResize: boxInd must be have size ["+c+"] but had shape "+u.shape+"."})),E(2===r.length,(function(){return"Error in cropAndResize: cropSize must be of length 2, but got length "+r.length+"."})),E(r[0]>=1&&r[1]>=1,(function(){return"cropSize must be atleast [1,1], but was "+r})),E("bilinear"===o||"nearest"===o,(function(){return"method must be bilinear or nearest, but was "+o}));var l={image:i,boxes:u,boxInd:s},f={method:o,extrapolationValue:a,cropSize:r};return Tt.runKernelFunc((function(t){return t.cropAndResize(i,u,s,r,o,a)}),l,null,"CropAndResize",f)}});var ru=qt({flipLeftRight_:function(t){var n=Lt(t,"image","flipLeftRight","float32");E(4===n.rank,(function(){return"Error in flipLeftRight: image must be rank 4,but got rank "+n.rank+"."}));var e={image:n};return Tt.runKernel("FlipLeftRight",e,{})}});var ou=qt({rotateWithOffset_:function(t,n,e,r){void 0===e&&(e=0),void 0===r&&(r=.5);var o=Lt(t,"image","rotateWithOffset","float32");E(4===o.rank,(function(){return"Error in rotateWithOffset: image must be rank 4,but got rank "+o.rank+"."}));var a={image:o},i={radians:n,fillValue:e,center:r};return Tt.runKernel("RotateWithOffset",a,i)}});function au(t,n,e,r,o,a){null==r&&(r=.5),null==o&&(o=Number.NEGATIVE_INFINITY),null==a&&(a=0);var i=t.shape[0];return e=Math.min(e,i),E(0<=r&&r<=1,(function(){return"iouThreshold must be in [0, 1], but was '"+r+"'"})),E(2===t.rank,(function(){return"boxes must be a 2D tensor, but was of rank '"+t.rank+"'"})),E(4===t.shape[1],(function(){return"boxes must have 4 columns, but 2nd dimension was "+t.shape[1]})),E(1===n.rank,(function(){return"scores must be a 1D tensor"})),E(n.shape[0]===i,(function(){return"scores has incompatible shape with boxes. Expected "+i+", but was "+n.shape[0]})),E(0<=a&&a<=1,(function(){return"softNmsSigma must be in [0, 1], but was '"+a+"'"})),{maxOutputSize:e,iouThreshold:r,scoreThreshold:o,softNmsSigma:a}}var iu=qt({nonMaxSuppression_:function(t,n,e,r,o){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY);var a=Lt(t,"boxes","nonMaxSuppression"),i=Lt(n,"scores","nonMaxSuppression"),u=au(a,i,e,r,o);e=u.maxOutputSize,r=u.iouThreshold,o=u.scoreThreshold;var s={maxOutputSize:e,iouThreshold:r,scoreThreshold:o};return Tt.runKernelFunc((function(t){return t.nonMaxSuppression(a,i,e,r,o)}),{boxes:a,scores:i},null,"NonMaxSuppressionV3",s)}});function uu(t,n,e){var r=function(t,n,e){return function(t,n,e){var r=0,o=t.length,a=0,i=!1;for(;r<o;){var u=e(n,t[a=r+(o-r>>>1)]);u>0?r=a+1:(o=a,i=!u)}return i?r:-r-1}(t,n,e||su)}(t,n,e),o=r<0?-(r+1):r;t.splice(o,0,n)}function su(t,n){return t>n?1:t<n?-1:0}function cu(t,n,e,r,o){return pu(t,n,e,r,o,0).selectedIndices}function lu(t,n,e,r,o,a){return pu(t,n,e,r,o,0,!1,a,!0)}function fu(t,n,e,r,o,a){return pu(t,n,e,r,o,a,!0)}function pu(t,n,e,r,o,a,i,u,s){void 0===i&&(i=!1),void 0===u&&(u=!1),void 0===s&&(s=!1);for(var c=[],l=0;l<n.length;l++)n[l]>o&&c.push({score:n[l],boxIndex:l,suppressBeginIndex:0});c.sort(vu);for(var f=a>0?-.5/a:0,p=[],h=[];p.length<e&&c.length>0;){var d=c.pop(),v=d.score,m=d.boxIndex,g=d.suppressBeginIndex;if(v<o)break;for(var y=!1,b=p.length-1;b>=g;--b){var w=hu(t,m,p[b]);if(w>=r){y=!0;break}if(d.score=d.score*du(r,f,w),d.score<=o)break}d.suppressBeginIndex=p.length,y||(d.score===v?(p.push(m),h.push(d.score)):d.score>o&&uu(c,d,vu))}var k=p.length,x=e-k;u&&x>0&&(p.push.apply(p,new Array(x).fill(0)),h.push.apply(h,new Array(x).fill(0)));var S={selectedIndices:Fa(p,"int32")};return i&&(S.selectedScores=Fa(h,"float32")),s&&(S.validOutputs=go(k,"int32")),S}function hu(t,n,e){var r=t.subarray(4*n,4*n+4),o=t.subarray(4*e,4*e+4),a=Math.min(r[0],r[2]),i=Math.min(r[1],r[3]),u=Math.max(r[0],r[2]),s=Math.max(r[1],r[3]),c=Math.min(o[0],o[2]),l=Math.min(o[1],o[3]),f=Math.max(o[0],o[2]),p=Math.max(o[1],o[3]),h=(u-a)*(s-i),d=(f-c)*(p-l);if(h<=0||d<=0)return 0;var v=Math.max(a,c),m=Math.max(i,l),g=Math.min(u,f),y=Math.min(s,p),b=Math.max(g-v,0)*Math.max(y-m,0);return b/(h+d-b)}function du(t,n,e){var r=Math.exp(n*e*e);return e<=t?r:0}function vu(t,n){return t.score-n.score||t.score===n.score&&n.boxIndex-t.boxIndex}var mu=function(t,n,e,a,i){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),r(this,void 0,void 0,(function(){var r,u,s,c,l,f,p;return o(this,(function(o){switch(o.label){case 0:return r=Lt(t,"boxes","nonMaxSuppressionAsync"),u=Lt(n,"scores","nonMaxSuppressionAsync"),s=au(r,u,e,a,i),e=s.maxOutputSize,a=s.iouThreshold,i=s.scoreThreshold,[4,Promise.all([r.data(),u.data()])];case 1:return c=o.sent(),l=c[0],f=c[1],p=cu(l,f,e,a,i),r!==t&&r.dispose(),u!==n&&u.dispose(),[2,p]}}))}))};var gu=qt({nonMaxSuppressionWithScore_:function(t,n,e,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=0);var i=Lt(t,"boxes","nonMaxSuppression"),u=Lt(n,"scores","nonMaxSuppression"),s=au(i,u,e,r,o,a),c={boxes:i,scores:u},l={maxOutputSize:e=s.maxOutputSize,iouThreshold:r=s.iouThreshold,scoreThreshold:o=s.scoreThreshold,softNmsSigma:a=s.softNmsSigma},f=Tt.runKernel("NonMaxSuppressionV5",c,l);return{selectedIndices:f[0],selectedScores:f[1]}}});var yu=function(t,n,e,a,i,u){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===u&&(u=0),r(this,void 0,void 0,(function(){var r,s,c,l,f,p,h;return o(this,(function(o){switch(o.label){case 0:return r=Lt(t,"boxes","nonMaxSuppressionAsync"),s=Lt(n,"scores","nonMaxSuppressionAsync"),c=au(r,s,e,a,i,u),e=c.maxOutputSize,a=c.iouThreshold,i=c.scoreThreshold,u=c.softNmsSigma,[4,Promise.all([r.data(),s.data()])];case 1:return l=o.sent(),f=l[0],p=l[1],h=fu(f,p,e,a,i,u),r!==t&&r.dispose(),s!==n&&s.dispose(),[2,h]}}))}))};var bu=qt({nonMaxSuppressionPadded_:function(t,n,e,r,o,a){void 0===r&&(r=.5),void 0===o&&(o=Number.NEGATIVE_INFINITY),void 0===a&&(a=!1);var i=Lt(t,"boxes","nonMaxSuppression"),u=Lt(n,"scores","nonMaxSuppression"),s=au(i,u,e,r,o,null),c={boxes:i,scores:u},l={maxOutputSize:s.maxOutputSize,iouThreshold:s.iouThreshold,scoreThreshold:s.scoreThreshold,padToMaxOutputSize:a},f=Tt.runKernel("NonMaxSuppressionV4",c,l);return{selectedIndices:f[0],validOutputs:f[1]}}});var wu=function(t,n,e,a,i,u){return void 0===a&&(a=.5),void 0===i&&(i=Number.NEGATIVE_INFINITY),void 0===u&&(u=!1),r(this,void 0,void 0,(function(){var r,s,c,l,f,p,h,d,v,m;return o(this,(function(o){switch(o.label){case 0:return r=Lt(t,"boxes","nonMaxSuppressionAsync"),s=Lt(n,"scores","nonMaxSuppressionAsync"),c=au(r,s,e,a,i,null),l=c.maxOutputSize,f=c.iouThreshold,p=c.scoreThreshold,[4,Promise.all([r.data(),s.data()])];case 1:return h=o.sent(),d=h[0],v=h[1],m=lu(d,v,l,f,p,u),r!==t&&r.dispose(),s!==n&&s.dispose(),[2,m]}}))}))};var ku=qt({resizeBilinear_:function(t,n,e){void 0===e&&(e=!1);var r=Lt(t,"images","resizeBilinear");E(3===r.rank||4===r.rank,(function(){return"Error in resizeBilinear: x must be rank 3 or 4, but got rank "+r.rank+"."})),E(2===n.length,(function(){return"Error in resizeBilinear: new shape must 2D, but got shape "+n+"."}));var o=r,a=!1;3===r.rank&&(a=!0,o=On(r,[1,r.shape[0],r.shape[1],r.shape[2]]));var i=n[0],u=n[1],s={images:o},c={alignCorners:e,size:n},l=Tt.runKernelFunc((function(t,n){return n([o]),t.resizeBilinear(o,i,u,e)}),s,null,"ResizeBilinear",c);return a?On(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});var xu=qt({resizeNearestNeighbor_:function(t,n,e){void 0===e&&(e=!1);var r=Lt(t,"images","resizeNearestNeighbor");E(3===r.rank||4===r.rank,(function(){return"Error in resizeNearestNeighbor: x must be rank 3 or 4, but got rank "+r.rank+"."})),E(2===n.length,(function(){return"Error in resizeNearestNeighbor: new shape must 2D, but got shape "+n+"."})),E("float32"===r.dtype||"int32"===r.dtype,(function(){return"`images` must have `int32` or `float32` as dtype"}));var o=r,a=!1;3===r.rank&&(a=!0,o=On(r,[1,r.shape[0],r.shape[1],r.shape[2]]));var i=n[0],u=n[1],s={images:o},c={alignCorners:e,size:n},l=Tt.runKernelFunc((function(t,n){return n([o]),t.resizeNearestNeighbor(o,i,u,e)}),s,null,"ResizeNearestNeighbor",c);return a?On(l,[l.shape[1],l.shape[2],l.shape[3]]):l}});var Su=qt({bandPart_:function(t,n,e){E(n%1==0,(function(){return"bandPart(): numLower must be an integer, got "+n+"."})),E(e%1==0,(function(){return"bandPart(): numUpper must be an integer, got "+e+"."}));var r=Lt(t,"a","bandPart");E(r.rank>=2,(function(){return"bandPart(): Rank must be at least 2, got "+r.rank+"."}));var o=r.shape,a=r.shape.slice(-2),i=a[0],u=a[1];if(!(n<=i))throw new Error("bandPart(): numLower ("+n+") must not be greater than the number of rows ("+i+").");if(!(e<=u))throw new Error("bandPart(): numUpper ("+e+") must not be greater than the number of columns ("+u+").");n<0&&(n=i),e<0&&(e=u);var s=On(Aa(0,i,1,"int32"),[-1,1]),c=Aa(0,u,1,"int32"),l=Mo(s,c),f=Co(wo(l,go(+n,"int32")),lo(l,go(-e,"int32"))),p=Ko([i,u],r.dtype);return On(ii(vi(On(r,[-1,i,u])).map((function(t){return jr(f,t,p)}))),o)}});var Eu=qt({gramSchmidt_:function(t){var n;if(Array.isArray(t)){n=!1,E(null!=t&&t.length>0,(function(){return"Gram-Schmidt process: input must not be null, undefined, or empty"}));for(var e=t[0].shape[0],r=function(n){E(t[n].shape[0]===e,(function(){return"Gram-Schmidt: Non-unique lengths found in the input vectors: ("+t[n].shape[0]+" vs. "+e+")"}))},o=1;o<t.length;++o)r(o)}else n=!0,t=ni(t,t.shape[0],0).map((function(t){return ai(t,[0])}));E(t.length<=t[0].shape[0],(function(){return"Gram-Schmidt: Number of vectors ("+t.length+") exceeds number of dimensions ("+t[0].shape[0]+")."}));var a=[],i=t,u=function(t){a.push(Tt.tidy((function(){var n=i[t];if(t>0)for(var e=0;e<t;++e){var r=Ae(_o(Ae(a[e],n)),a[e]);n=Mo(n,r)}return Fe(n,Ri(n,"euclidean"))})))};for(o=0;o<t.length;++o)u(o);return n?ii(a,0):a}});function Du(t,n){return void 0===n&&(n=!1),Tt.tidy((function(){E(2===t.shape.length,(function(){return"qr2d() requires a 2D Tensor, but got a "+t.shape.length+"D Tensor."}));for(var e=t.shape[0],r=t.shape[1],o=ro(e),a=Dn(t),i=li([[1]],[1,1]),u=Dn(i),s=e>=r?r:e,c=function(t){var n,s=a,c=u,l=o;n=Tt.tidy((function(){var n=dr(a,[t,t],[e-t,1]),s=Ri(n),c=dr(a,[t,t],[1,1]),l=jr(co(c,0),li([[-1]]),li([[1]])),f=Mo(c,Ae(l,s)),p=Fe(n,f);u=1===p.shape[0]?Dn(i):pr([i,dr(p,[1,0],[p.shape[0]-1,p.shape[1]])],0);var h=Io(Fe(Wn(l,f),s)),d=dr(a,[t,0],[e-t,r]),v=Ae(h,u),m=Un(u);if(0===t)a=Mo(d,Wn(v,Wn(m,d)));else{var g=Mo(d,Wn(v,Wn(m,d)));a=pr([dr(a,[0,0],[t,r]),g],0)}var y=Un(v),b=dr(o,[0,t],[e,o.shape[1]-t]);if(0===t)o=Mo(b,Wn(Wn(b,u),y));else{var w=Mo(b,Wn(Wn(b,u),y));o=pr([dr(o,[0,0],[e,t]),w],1)}return[u,a,o]})),u=n[0],a=n[1],o=n[2],Ee([s,c,l])},l=0;l<s;++l)c(l);return!n&&e>r&&(o=dr(o,[0,0],[e,r]),a=dr(a,[0,0],[r,r])),[o,a]}))}var Nu,Iu=qt({qr_:function(t,n){if(void 0===n&&(n=!1),E(t.rank>=2,(function(){return"qr() requires input tensor to have a rank >= 2, but got rank "+t.rank})),2===t.rank)return Du(t,n);var e=t.shape.slice(0,t.shape.length-2).reduce((function(t,n){return t*n})),r=vi(On(t,[e,t.shape[t.shape.length-2],t.shape[t.shape.length-1]]),0),o=[],a=[];return r.forEach((function(t){var e=Du(t,n),r=e[0],i=e[1];o.push(r),a.push(i)})),[On(ii(o,0),t.shape),On(ii(a,0),t.shape)]}});(Nu=t.Reduction||(t.Reduction={}))[Nu.NONE=0]="NONE",Nu[Nu.MEAN=1]="MEAN",Nu[Nu.SUM=2]="SUM",Nu[Nu.SUM_BY_NONZERO_WEIGHTS=3]="SUM_BY_NONZERO_WEIGHTS";var Fu=qt({computeWeightedLoss_:function(n,e,r){void 0===r&&(r=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var o=Lt(n,"losses","computeWeightedLoss"),a=null;null!=e&&(a=Lt(e,"weights","computeWeightedLoss"));var i=null==a?o:Ae(o,a);if(r===t.Reduction.NONE)return i;if(r===t.Reduction.SUM)return _o(i);if(r===t.Reduction.MEAN){if(null==a)return Go(i);var u=o.size/a.size,s=Fe(_o(i),_o(a));return u>1?Fe(s,go(u)):s}if(r===t.Reduction.SUM_BY_NONZERO_WEIGHTS){if(null==a)return Fe(_o(i),go(o.size));var c=Ae(a,Uo(o.shape)),l=En(_o($o(c,go(0))),"float32");return Fe(_o(i),l)}throw Error("Unknown reduction: "+r)}});var Au=qt({absoluteDifference_:function(n,e,r,o){void 0===o&&(o=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var a=Lt(n,"labels","absoluteDifference"),i=Lt(e,"predictions","absoluteDifference"),u=null;null!=r&&(u=Lt(r,"weights","absoluteDifference")),D(a.shape,i.shape,"Error in absoluteDifference: ");var s=Te(Mo(a,i));return Fu(s,u,o)}});var Tu=qt({cosineDistance_:function(n,e,r,o,a){void 0===a&&(a=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var i=Lt(n,"labels","cosineDistance"),u=Lt(e,"predictions","cosineDistance"),s=null;null!=o&&(s=Lt(o,"weights","cosineDistance")),D(i.shape,u.shape,"Error in cosineDistance: ");var c=go(1),l=Mo(c,_o(Ae(i,u),r,!0));return Fu(l,s,a)}});var Mu=qt({hingeLoss_:function(n,e,r,o){void 0===o&&(o=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var a=Lt(n,"labels","hingeLoss"),i=Lt(e,"predictions","hingeLoss"),u=null;null!=r&&(u=Lt(r,"weights","hingeLoss")),D(a.shape,i.shape,"Error in hingeLoss: ");var s=go(1);a=Mo(Ae(go(2),a),s);var c=Ma(Mo(s,Ae(a,i)));return Fu(c,u,o)}});var _u=qt({huberLoss_:function(n,e,r,o,a){void 0===o&&(o=1),void 0===a&&(a=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var i=Lt(n,"labels","huberLoss"),u=Lt(e,"predictions","huberLoss"),s=null;null!=r&&(s=Lt(r,"weights","huberLoss")),D(i.shape,u.shape,"Error in huberLoss: ");var c=go(o),l=Te(Mo(u,i)),f=Ho(l,c),p=Mo(l,f),h=Ne(Ae(go(.5),Jo(f)),Ae(c,p));return Fu(h,s,a)}});var Bu=qt({logLoss_:function(n,e,r,o,a){void 0===o&&(o=1e-7),void 0===a&&(a=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var i=Lt(n,"labels","logLoss"),u=Lt(e,"predictions","logLoss"),s=null;null!=r&&(s=Lt(r,"weights","logLoss")),D(i.shape,u.shape,"Error in logLoss: ");var c=go(1),l=go(o),f=Io(Ae(i,xo(Ne(u,l)))),p=Ae(Mo(c,i),xo(Ne(Mo(c,u),l))),h=Mo(f,p);return Fu(h,s,a)}});var Ru=qt({meanSquaredError_:function(n,e,r,o){void 0===o&&(o=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var a=Lt(n,"labels","meanSquaredError"),i=Lt(e,"predictions","meanSquaredError"),u=null;null!=r&&(u=Lt(r,"weights","meanSquaredError")),D(a.shape,i.shape,"Error in meanSquaredError: ");var s=oi(a,i);return Fu(s,u,o)}});var Cu=qt({sigmoidCrossEntropy_:function(n,e,r,o,a){void 0===o&&(o=0),void 0===a&&(a=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var i=Lt(n,"multiClassLabels","sigmoidCrossEntropy"),u=Lt(e,"logits","sigmoidCrossEntropy"),s=null;if(null!=r&&(s=Lt(r,"weights","sigmoidCrossEntropy")),D(i.shape,u.shape,"Error in sigmoidCrossEntropy: "),o>0){var c=go(o),l=go(1),f=go(.5);i=Ne(Ae(i,Mo(l,c)),Ae(f,c))}var p=function(t,n){var e=Lt(t,"labels","sigmoidCrossEntropyWithLogits"),r=Lt(n,"logits","sigmoidCrossEntropyWithLogits");D(e.shape,r.shape,"Error in sigmoidCrossEntropyWithLogits: ");var o=Ma(r),a=Ae(r,e),i=So(Qr(Io(Te(r))));return Ne(Mo(o,a),i)}(i,u);return Fu(p,s,a)}});var Pu=qt({softmaxCrossEntropy_:function(n,e,r,o,a){void 0===o&&(o=0),void 0===a&&(a=t.Reduction.SUM_BY_NONZERO_WEIGHTS);var i=Lt(n,"onehotLabels","softmaxCrossEntropy"),u=Lt(e,"logits","softmaxCrossEntropy"),s=null;if(null!=r&&(s=Lt(r,"weights","softmaxCrossEntropy")),D(i.shape,u.shape,"Error in softmaxCrossEntropy: "),o>0){var c=go(o),l=go(1),f=go(i.shape[1]);i=Ne(Ae(i,Mo(l,c)),Fe(c,f))}var p=function(t,n,e){if(void 0===e&&(e=-1),-1===e&&(e=n.rank-1),e!==n.rank-1)throw Error("Softmax cross entropy along a non-last dimension is not yet supported. Labels / logits was rank "+n.rank+" and dim was "+e);return Do((function(t,n,r){var o=Ro(n,[e],!0),a=Mo(En(n,"float32"),o);r([t,a]);var i=Io(Ae(a,t));return{value:_o(i,[e]),gradFunc:function(t,n){var r=n[0],o=n[1],a=Le(t.shape,[e]);return[Ae(On(t,a),Mo(En(r,"float32"),Qr(o))),Ae(On(t,a),Mo(Qr(o),En(r,"float32")))]}}}))(t,n)}(i,u);return Fu(p,s,a)}}),Lu={fft:Xa,ifft:$a,rfft:ei,irfft:Qa},zu={hammingWindow:$i,hannWindow:Qi,frame:tu,stft:nu},qu={flipLeftRight:ru,resizeNearestNeighbor:xu,resizeBilinear:ku,rotateWithOffset:ou,cropAndResize:eu,nonMaxSuppression:iu,nonMaxSuppressionAsync:mu,nonMaxSuppressionWithScore:gu,nonMaxSuppressionWithScoreAsync:yu,nonMaxSuppressionPadded:bu,nonMaxSuppressionPaddedAsync:wu},Ou={bandPart:Su,gramSchmidt:Eu,qr:Iu},Wu={absoluteDifference:Au,computeWeightedLoss:Fu,cosineDistance:Tu,hingeLoss:Mu,huberLoss:_u,logLoss:Bu,meanSquaredError:Ru,sigmoidCrossEntropy:Cu,softmaxCrossEntropy:Pu},Ku=function(t){function n(){return null!==t&&t.apply(this,arguments)||this}return e(n,t),n.prototype.minimize=function(t,n,e){void 0===n&&(n=!1);var r=this.computeGradients(t,e),o=r.value,a=r.grads;if(null!=e){var i=e.map((function(t){return{name:t.name,tensor:a[t.name]}}));this.applyGradients(i)}else this.applyGradients(a);return Ee(a),n?o:(o.dispose(),null)},Object.defineProperty(n.prototype,"iterations",{get:function(){return null==this.iterations_&&(this.iterations_=0),this.iterations_},enumerable:!0,configurable:!0}),n.prototype.incrementIterations=function(){this.iterations_=this.iterations+1},n.prototype.computeGradients=function(t,n){return Eo(t,n)},n.prototype.dispose=function(){null!=this.iterations_&&Ee(this.iterations_)},n.prototype.saveIterations=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){return null==this.iterations_&&(this.iterations_=0),[2,{name:"iter",tensor:go(this.iterations_,"int32")}]}))}))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){throw new Error("getWeights() is not implemented for this optimizer yet.")}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(t){throw new Error("setWeights() is not implemented for this optimizer class "+this.getClassName())}))}))},n.prototype.extractIterations=function(t){return r(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return n=this,[4,t[0].tensor.data()];case 1:return n.iterations_=e.sent()[0],[2,t.slice(1)]}}))}))},n}(de);Object.defineProperty(Ku,Symbol.hasInstance,{value:function(t){return null!=t.minimize&&null!=t.computeGradients&&null!=t.applyGradients}});var Uu=function(t){function n(n,e,r){void 0===r&&(r=null);var o=t.call(this)||this;return o.learningRate=n,o.rho=e,o.epsilon=r,o.accumulatedGrads=[],o.accumulatedUpdates=[],null==r&&(o.epsilon=Tt.backend.epsilon()),o}return e(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Tt.registeredVariables[e];null==n.accumulatedGrads[r]&&(n.accumulatedGrads[r]={originalName:e+"/accum_grad",variable:Se((function(){return Jr(o).variable(!1)}))}),null==n.accumulatedUpdates[r]&&(n.accumulatedUpdates[r]={originalName:e+"/accum_var",variable:Se((function(){return Jr(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[e];if(null!=a){var i=n.accumulatedGrads[r].variable,u=n.accumulatedUpdates[r].variable;Se((function(){var t=Ne(Ae(i,n.rho),Ae(Jo(a),1-n.rho)),e=Ae(Fe(ri(Ne(u,n.epsilon)),ri(Ne(i,n.epsilon))),a),r=Ne(Ae(u,n.rho),Ae(Jo(e),1-n.rho));i.assign(t),u.assign(r);var s=Ne(Ae(e,-n.learningRate),o);o.assign(s)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedUpdates&&(Ee(this.accumulatedGrads.map((function(t){return t.variable}))),Ee(this.accumulatedUpdates.map((function(t){return t.variable}))))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return t=this.accumulatedGrads.concat(this.accumulatedUpdates),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=t.length/2,!1,this.accumulatedGrads=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedUpdates=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,rho:this.rho,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.rho,n.epsilon)},n.className="Adadelta",n}(Ku);me(Uu);var Gu=function(t){function n(n,e){void 0===e&&(e=.1);var r=t.call(this)||this;return r.learningRate=n,r.initialAccumulatorValue=e,r.accumulatedGrads=[],r}return e(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Tt.registeredVariables[e];if(null==n.accumulatedGrads[r]){n.accumulatedGrads[r]={originalName:e+"/accumulator",variable:Se((function(){return oo(o.shape,n.initialAccumulatorValue).variable(!1)}))}}var a=Array.isArray(t)?t[r].tensor:t[e];if(null!=a){var i=n.accumulatedGrads[r].variable;Se((function(){var t=Ne(i,Jo(a));i.assign(t);var e=Ne(Ae(Fe(a,ri(Ne(t,Tt.backend.epsilon()))),-n.learningRate),o);o.assign(e)}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedGrads&&Ee(this.accumulatedGrads.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulatedGrads.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),!1,this.accumulatedGrads=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,initialAccumulatorValue:this.initialAccumulatorValue}},n.fromConfig=function(t,n){return new t(n.learningRate,n.initialAccumulatorValue)},n.className="Adagrad",n}(Ku);me(Gu);var Vu=function(t){function n(n,e,r,o){void 0===o&&(o=null);var a=t.call(this)||this;return a.learningRate=n,a.beta1=e,a.beta2=r,a.epsilon=o,a.accumulatedFirstMoment=[],a.accumulatedSecondMoment=[],Se((function(){a.accBeta1=go(e).variable(),a.accBeta2=go(r).variable()})),null==o&&(a.epsilon=Tt.backend.epsilon()),a}return e(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Se((function(){var r=Mo(1,n.accBeta1),o=Mo(1,n.accBeta2);e.forEach((function(e,a){var i=Tt.registeredVariables[e];null==n.accumulatedFirstMoment[a]&&(n.accumulatedFirstMoment[a]={originalName:e+"/m",variable:Se((function(){return Jr(i).variable(!1)}))}),null==n.accumulatedSecondMoment[a]&&(n.accumulatedSecondMoment[a]={originalName:e+"/v",variable:Se((function(){return Jr(i).variable(!1)}))});var u=Array.isArray(t)?t[a].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[a].variable,c=n.accumulatedSecondMoment[a].variable,l=Ne(Ae(s,n.beta1),Ae(u,1-n.beta1)),f=Ne(Ae(c,n.beta2),Ae(Jo(u),1-n.beta2)),p=Fe(l,r),h=Fe(f,o);s.assign(l),c.assign(f);var d=Ne(Ae(Fe(p,Ne(ri(h),n.epsilon)),-n.learningRate),i);i.assign(d)}})),n.accBeta1.assign(Ae(n.accBeta1,n.beta1)),n.accBeta2.assign(Ae(n.accBeta2,n.beta2))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.accBeta2.dispose(),null!=this.accumulatedFirstMoment&&Ee(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedSecondMoment&&Ee(this.accumulatedSecondMoment.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return t=this.accumulatedFirstMoment.concat(this.accumulatedSecondMoment),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){var n,e=this;return o(this,(function(r){switch(r.label){case 0:return[4,this.extractIterations(t)];case 1:return t=r.sent(),Se((function(){e.accBeta1.assign(ca(e.beta1,e.iterations_+1)),e.accBeta2.assign(ca(e.beta2,e.iterations_+1))})),n=t.length/2,!1,this.accumulatedFirstMoment=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedSecondMoment=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon)},n.className="Adam",n}(Ku);me(Vu);var Hu=function(t){function n(n,e,r,o,a){void 0===o&&(o=null),void 0===a&&(a=0);var i=t.call(this)||this;return i.learningRate=n,i.beta1=e,i.beta2=r,i.epsilon=o,i.decay=a,i.accumulatedFirstMoment=[],i.accumulatedWeightedInfNorm=[],Se((function(){i.iteration=go(0).variable(),i.accBeta1=go(e).variable()})),null==o&&(i.epsilon=Tt.backend.epsilon()),i}return e(n,t),n.prototype.applyGradients=function(t){var n=this,e=Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t);Se((function(){var r=Mo(1,n.accBeta1),o=Fe(-n.learningRate,Ne(Ae(n.iteration,n.decay),1));e.forEach((function(e,a){var i=Tt.registeredVariables[e];null==n.accumulatedFirstMoment[a]&&(n.accumulatedFirstMoment[a]={originalName:e+"/m",variable:Jr(i).variable(!1)}),null==n.accumulatedWeightedInfNorm[a]&&(n.accumulatedWeightedInfNorm[a]={originalName:e+"/v",variable:Jr(i).variable(!1)});var u=Array.isArray(t)?t[a].tensor:t[e];if(null!=u){var s=n.accumulatedFirstMoment[a].variable,c=n.accumulatedWeightedInfNorm[a].variable,l=Ne(Ae(s,n.beta1),Ae(u,1-n.beta1)),f=Ae(c,n.beta2),p=Te(u),h=mo(f,p);s.assign(l),c.assign(h);var d=Ne(Ae(Fe(o,r),Fe(l,Ne(h,n.epsilon))),i);i.assign(d)}})),n.iteration.assign(Ne(n.iteration,1)),n.accBeta1.assign(Ae(n.accBeta1,n.beta1))})),this.incrementIterations()},n.prototype.dispose=function(){this.accBeta1.dispose(),this.iteration.dispose(),null!=this.accumulatedFirstMoment&&Ee(this.accumulatedFirstMoment.map((function(t){return t.variable}))),null!=this.accumulatedWeightedInfNorm&&Ee(this.accumulatedWeightedInfNorm.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){throw new Error("getWeights() is not implemented for Adamax yet.")}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(t){throw new Error("setWeights() is not implemented for Adamax yet.")}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,beta1:this.beta1,beta2:this.beta2,epsilon:this.epsilon,decay:this.decay}},n.fromConfig=function(t,n){return new t(n.learningRate,n.beta1,n.beta2,n.epsilon,n.decay)},n.className="Adamax",n}(Ku);me(Hu);var ju=function(t){function n(n){var e=t.call(this)||this;return e.learningRate=n,e.setLearningRate(n),e}return e(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Array.isArray(t)?t[r].tensor:t[e];if(null!=o){var a=Tt.registeredVariables[e];Se((function(){var t=Ne(Ae(n.c,o),a);a.assign(t)}))}})),this.incrementIterations()},n.prototype.setLearningRate=function(t){this.learningRate=t,null!=this.c&&this.c.dispose(),this.c=De(go(-t))},n.prototype.dispose=function(){this.c.dispose()},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()]]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:if(0!==(t=n.sent()).length)throw new Error("SGD optimizer does not have settable weights.");return[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate}},n.fromConfig=function(t,n){return new t(n.learningRate)},n.className="SGD",n}(Ku);me(ju);var Ju=function(t){function n(n,e,r){void 0===r&&(r=!1);var o=t.call(this,n)||this;return o.learningRate=n,o.momentum=e,o.useNesterov=r,o.accumulations=[],o.m=go(o.momentum),o}return e(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Tt.registeredVariables[e];if(null==n.accumulations[r]){n.accumulations[r]={originalName:e+"/momentum",variable:Se((function(){return Jr(o).variable(!1)}))}}var a=n.accumulations[r].variable,i=Array.isArray(t)?t[r].tensor:t[e];null!=i&&Se((function(){var t,e=Ne(Ae(n.m,a),i);t=n.useNesterov?Ne(Ae(n.c,Ne(i,Ae(e,n.m))),o):Ne(Ae(n.c,e),o),a.assign(e),o.assign(t)}))})),this.incrementIterations()},n.prototype.dispose=function(){this.m.dispose(),null!=this.accumulations&&Ee(this.accumulations.map((function(t){return t.variable})))},n.prototype.setMomentum=function(t){this.momentum=t},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){return o(this,(function(t){switch(t.label){case 0:return[4,this.saveIterations()];case 1:return[2,[t.sent()].concat(this.accumulations.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){return o(this,(function(n){switch(n.label){case 0:return[4,this.extractIterations(t)];case 1:return t=n.sent(),!1,this.accumulations=t.map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,momentum:this.momentum,useNesterov:this.useNesterov}},n.fromConfig=function(t,n){return new t(n.learningRate,n.momentum,n.useNesterov)},n.className="Momentum",n}(ju);me(Ju);var Yu=function(t){function n(n,e,r,o,a){void 0===e&&(e=.9),void 0===r&&(r=0),void 0===o&&(o=null),void 0===a&&(a=!1);var i=t.call(this)||this;if(i.learningRate=n,i.decay=e,i.momentum=r,i.epsilon=o,i.accumulatedMeanSquares=[],i.accumulatedMoments=[],i.accumulatedMeanGrads=[],i.centered=a,null==o&&(i.epsilon=Tt.backend.epsilon()),null==n)throw new Error("learningRate for RMSPropOptimizer must be defined.");return i}return e(n,t),n.prototype.applyGradients=function(t){var n=this;(Array.isArray(t)?t.map((function(t){return t.name})):Object.keys(t)).forEach((function(e,r){var o=Tt.registeredVariables[e];null==n.accumulatedMeanSquares[r]&&(n.accumulatedMeanSquares[r]={originalName:e+"/rms",variable:Se((function(){return Jr(o).variable(!1)}))}),null==n.accumulatedMoments[r]&&(n.accumulatedMoments[r]={originalName:e+"/momentum",variable:Se((function(){return Jr(o).variable(!1)}))}),null==n.accumulatedMeanGrads[r]&&n.centered&&(n.accumulatedMeanGrads[r]={originalName:e+"/mg",variable:Se((function(){return Jr(o).variable(!1)}))});var a=Array.isArray(t)?t[r].tensor:t[e];if(null!=a){var i=n.accumulatedMeanSquares[r].variable,u=n.accumulatedMoments[r].variable;Se((function(){var t=Ne(Ae(i,n.decay),Ae(Jo(a),1-n.decay));if(n.centered){var e=n.accumulatedMeanGrads[r].variable,s=Ne(Ae(e,n.decay),Ae(a,1-n.decay)),c=Fe(Ae(a,n.learningRate),ri(Mo(t,Ne(Jo(s),n.epsilon)))),l=Ne(Ae(u,n.momentum),c);i.assign(t),e.assign(s),u.assign(l);var f=Mo(o,l);o.assign(f)}else{var p=Ne(Ae(i,n.decay),Ae(Jo(a),1-n.decay));l=Ne(Ae(u,n.momentum),Fe(Ae(a,n.learningRate),ri(Ne(p,n.epsilon))));i.assign(p),u.assign(l);f=Mo(o,l);o.assign(f)}}))}})),this.incrementIterations()},n.prototype.dispose=function(){null!=this.accumulatedMeanSquares&&Ee(this.accumulatedMeanSquares.map((function(t){return t.variable}))),null!=this.accumulatedMeanGrads&&this.centered&&Ee(this.accumulatedMeanGrads.map((function(t){return t.variable}))),null!=this.accumulatedMoments&&Ee(this.accumulatedMoments.map((function(t){return t.variable})))},n.prototype.getWeights=function(){return r(this,void 0,void 0,(function(){var t;return o(this,(function(n){switch(n.label){case 0:return t=this.accumulatedMeanSquares.concat(this.accumulatedMoments),this.centered&&t.push.apply(t,this.accumulatedMeanGrads),[4,this.saveIterations()];case 1:return[2,[n.sent()].concat(t.map((function(t){return{name:t.originalName,tensor:t.variable}})))]}}))}))},n.prototype.setWeights=function(t){return r(this,void 0,void 0,(function(){var n;return o(this,(function(e){switch(e.label){case 0:return[4,this.extractIterations(t)];case 1:return t=e.sent(),n=this.centered?t.length/3:t.length/2,!1,this.accumulatedMeanSquares=t.slice(0,n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.accumulatedMoments=t.slice(n,2*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}})),this.centered&&(this.accumulatedMeanGrads=t.slice(2*n,3*n).map((function(t){return{originalName:t.name,variable:t.tensor.variable(!1)}}))),[2]}}))}))},n.prototype.getConfig=function(){return{learningRate:this.learningRate,decay:this.decay,momentum:this.momentum,epsilon:this.epsilon,centered:this.centered}},n.fromConfig=function(t,n){return new t(n.learningRate,n.decay,n.momentum,n.epsilon,n.centered)},n.className="RMSProp",n}(Ku);me(Yu);var Zu=function(){function t(){}return t.sgd=function(t){return new ju(t)},t.momentum=function(t,n,e){return void 0===e&&(e=!1),new Ju(t,n,e)},t.rmsprop=function(t,n,e,r,o){return void 0===n&&(n=.9),void 0===e&&(e=0),void 0===r&&(r=null),void 0===o&&(o=!1),new Yu(t,n,e,r,o)},t.adam=function(t,n,e,r){return void 0===t&&(t=.001),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),new Vu(t,n,e,r)},t.adadelta=function(t,n,e){return void 0===t&&(t=.001),void 0===n&&(n=.95),void 0===e&&(e=null),new Uu(t,n,e)},t.adamax=function(t,n,e,r,o){return void 0===t&&(t=.002),void 0===n&&(n=.9),void 0===e&&(e=.999),void 0===r&&(r=null),void 0===o&&(o=0),new Hu(t,n,e,r,o)},t.adagrad=function(t,n){return void 0===n&&(n=.1),new Gu(t,n)},t}(),Xu={sgd:Zu.sgd,momentum:Zu.momentum,adadelta:Zu.adadelta,adagrad:Zu.adagrad,rmsprop:Zu.rmsprop,adamax:Zu.adamax,adam:Zu.adam},$u="undefined"!=typeof requestAnimationFrame?requestAnimationFrame:"undefined"!=typeof setImmediate?setImmediate:function(t){return t()};var Qu={__proto__:null,slice_util:he,segment_util:uo,castTensor:function(t,n,e){if("complex64"===n){if("complex64"===t.dtype)return t.clone();var r=Ko(t.shape),o=En(t,"float32"),a=e.complex(o,r);return r.dispose(),o.dispose(),a}if(!q(t.dtype,n))return Tt.makeTensorFromDataId(t.dataId,t.shape,n);if("complex64"===t.dtype){var i=e.real(t);a=En(i,n);return i.dispose(),a}if("int32"===n)return e.int(t);if("bool"===n){var u=go(0,t.dtype);a=e.notEqual(t,u);return u.dispose(),a}throw new Error("Error in Cast: failed to cast "+t.dtype+" to "+n)},reshapeTensor:function(t,n){return Tt.makeTensorFromDataId(t.dataId,n,t.dtype)},linspaceImpl:function(t,n,e){var r=(n-t)/(e-1),o=Q(e,"float32");o[0]=t;for(var a=1;a<o.length;a++)o[a]=o[a-1]+r;return Fa(o,"float32")},upcastType:xt,axesAreInnerMostDims:Re,combineLocations:Ce,computeOutAndReduceShapes:Pe,expandShapeToKeepDim:Le,assertAxesAreInnerMostDims:function(t,n,e){E(Re(n,e),(function(){return t+" supports only inner-most axes for now. Got axes "+n+" and rank-"+e+" input."}))},getAxesPermutation:ze,getUndoAxesPermutation:qe,getInnerMostAxes:Oe,getBroadcastDims:function(t,n){for(var e=t.length,r=[],o=0;o<e;o++){var a=e-1-o,i=t[a]||1;(n[n.length-1-o]||1)>1&&1===i&&r.unshift(a)}return r},getReductionAxes:Gr,assertAndGetBroadcastShape:Vr,assertParamsConsistent:lr,computeOutShape:fr,computeDilation2DInfo:function(t,n,e,r,o,a){void 0===o&&(o="NHWC");var i=t[3];return $e(t,n.concat([i]),e,a,r,null,null,ur(o))},computePool2DInfo:Ze,computePool3DInfo:Xe,computeConv2DInfo:$e,computeConv3DInfo:Qe,computeDefaultPad:tr,tupleValuesAreOne:ar,eitherStridesOrDilationsAreOne:ir,convertConv2DDataFormat:ur,getFusedDyActivation:Gi,getFusedBiasGradient:Vi,applyActivation:Hi,shouldFuse:ji,PARALLELIZE_THRESHOLD:30,computeOptimalWindowSize:function(t){return t<=30?t:J(t,Math.floor(Math.sqrt(t)))},getImageCenter:function(t,n,e){return[e*("number"==typeof t?t:t[0]),n*("number"==typeof t?t:t[1])]},getReshaped:function(t,n,e,r){void 0===r&&(r=!0);var o=[];if(r)(o=o.concat(n.slice(0))).push(t[0]/e),o=o.concat(t.slice(1));else{o=o.concat(t[0]);for(var a=n.length,i=0;i<a;++i)o=o.concat([t[i+1]/n[i],n[i]]);o=o.concat(t.slice(a+1))}return o},getPermuted:function(t,n,e){void 0===e&&(e=!0);var r=[];if(e){r.push(n);for(var o=n+1;o<t;++o)o<=2*n?(r.push(o),r.push(o-(n+1))):r.push(o)}else{var a=[],i=[];for(o=1;o<t;++o)o>=2*n+1||o%2==1?i.push(o):a.push(o);r.push.apply(r,a),r.push(0),r.push.apply(r,i)}return r},getReshapedPermuted:function(t,n,e,r){void 0===r&&(r=!0);var o=[];r?o.push(t[0]/e):o.push(t[0]*e);for(var a=1;a<t.length;++a)a<=n.length?r?o.push(n[a-1]*t[a]):o.push(t[a]/n[a-1]):o.push(t[a]);return o},getSliceBeginCoords:function(t,n){for(var e=[0],r=0;r<n;++r)e.push(t[r][0]);return e},getSliceSize:function(t,n,e){for(var r=t.slice(0,1),o=0;o<e;++o)r.push(t[o+1]-n[o][0]-n[o][1]);return r},prepareAndValidate:Jn,validateUpdateShape:Zn,validateInput:Xn,calculateShapes:$n,SELU_SCALEALPHA:1.7580993408473768,SELU_SCALE:1.0507009873554805,ERF_P:.3275911,ERF_A1:.254829592,ERF_A2:-.284496736,ERF_A3:1.421413741,ERF_A4:-1.453152027,ERF_A5:1.061405429,warn:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];f().getBool("IS_TEST")||console.warn.apply(console,t)},log:function(){for(var t=[],n=0;n<arguments.length;n++)t[n]=arguments[n];f().getBool("IS_TEST")||console.log.apply(console,t)},mergeRealAndImagArrays:function(t,n){if(t.length!==n.length)throw new Error("Cannot merge real and imag arrays of different lengths. real:"+t.length+", imag: "+n.length+".");for(var e=new Float32Array(2*t.length),r=0;r<e.length;r+=2)e[r]=t[r/2],e[r+1]=n[r/2];return e},splitRealAndImagArrays:function(t){for(var n=new Float32Array(t.length/2),e=new Float32Array(t.length/2),r=0;r<t.length;r+=2)n[r/2]=t[r],e[r/2]=t[r+1];return{real:n,imag:e}},complexWithEvenIndex:function(t){for(var n=Math.ceil(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=0;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}},complexWithOddIndex:function(t){for(var n=Math.floor(t.length/4),e=new Float32Array(n),r=new Float32Array(n),o=2;o<t.length;o+=4)e[Math.floor(o/4)]=t[o],r[Math.floor(o/4)]=t[o+1];return{real:e,imag:r}},getComplexWithIndex:function(t,n){return{real:t[2*n],imag:t[2*n+1]}},assignToTypedArray:function(t,n,e,r){t[2*r]=n,t[2*r+1]=e},exponents:function(t,n){for(var e=new Float32Array(t/2),r=new Float32Array(t/2),o=0;o<Math.ceil(t/2);o++){var a=(n?2:-2)*Math.PI*(o/t);e[o]=Math.cos(a),r[o]=Math.sin(a)}return{real:e,imag:r}},exponent:function(t,n,e){var r=(e?2:-2)*Math.PI*(t/n);return{real:Math.cos(r),imag:Math.sin(r)}},prepareSplitSize:ti};var ts={__proto__:null,nonMaxSuppressionV3Impl:cu,nonMaxSuppressionV4Impl:lu,nonMaxSuppressionV5Impl:fu,split:function(t,n,e){var r=new Array(t.rank).fill(0),o=t.shape.slice();return n.map((function(n){var a=o.slice();a[e]=n;var i=dr(t,r,a);return r[e]+=n,i}))},tile:function(t,n){for(var e=new Array(t.rank),r=0;r<e.length;r++)e[r]=t.shape[r]*n[r];var o=Sn(e,t.dtype);for(r=0;r<o.values.length;++r){for(var a=o.indexToLoc(r),i=new Array(t.rank),u=0;u<i.length;u++)i[u]=a[u]%t.shape[u];var s=t.locToIndex(i);o.values[r]=t.values[s]}return o.toTensor()},topkImpl:function(t,n,e,r,o){for(var a=n[n.length-1],i=[t.length/a,a],u=i[0],s=i[1],c=C(e,u*r),l=C("int32",u*r),f=0;f<u;f++){for(var p=f*s,h=t.subarray(p,p+s),d=[],v=0;v<h.length;v++)d.push({value:h[v],index:v});d.sort((function(t,n){return n.value-t.value}));var m=f*r,g=c.subarray(m,m+r),y=l.subarray(m,m+r);for(v=0;v<r;v++)g[v]=d[v].value,y[v]=d[v].index}var b=n.slice();return b[b.length-1]=r,[Kt(c,b,e),Kt(l,b,"int32")]},whereImpl:mi},ns={kernelName:"Abs",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,ui(En(e,"float32"),-1))}}}},es={kernelName:"Acos",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){var n=Jo(En(e,"float32")),r=ri(Mo(go(1),n));return Io(Fe(t,r))}}}},rs={kernelName:"Acosh",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){var n=ri(Mo(Jo(En(e,"float32")),1));return Fe(t,n)}}}},os={kernelName:"Add",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=t,r=Gr(e.shape,o);return r.length>0&&(n=_o(n,r)),On(n,e.shape)},b:function(){var n=t,e=Gr(r.shape,o);return e.length>0&&(n=_o(n,e)),On(n,r.shape)}}}},as={kernelName:"AddN",saveAllInputs:!0,gradFunc:function(t,n){var e={};return n.forEach((function(n,r){e[r]=function(){return t.clone()}})),e}},is={kernelName:"ArgMax",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Jr(e)}}}},us={kernelName:"ArgMin",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Jr(e)}}}},ss={kernelName:"Asin",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,ri(Mo(go(1),Jo(En(e,"float32")))))}}}},cs={kernelName:"Asinh",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){var n=ri(Ne(go(1),Jo(En(e,"float32"))));return Fe(t,n)}}}},ls={kernelName:"Atan2",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=Ne(Jo(e),Jo(r)),a=Ae(t,Fe(r,n)),i=Gr(e.shape,o);return i.length>0&&(a=_o(a,i)),On(a,e.shape)},b:function(){var n=Ne(Jo(e),Jo(r)),a=Io(Ae(t,Fe(e,n))),i=Gr(r.shape,o);return i.length>0&&(a=_o(a,i)),On(a,r.shape)}}}},fs={kernelName:"Atan",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Ne(Jo(En(e,"float32")),1))}}}},ps={kernelName:"Atanh",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Mo(go(1),Jo(En(e,"float32"))))}}}};var hs=qt({avgPool3dBackprop_:function(t,n,e,r,o,a,i){void 0===o&&(o=[1,1,1]);var u=Lt(t,"dy","avgPool3dBackprop"),s=Lt(n,"input","avgPool3dBackprop"),c=u,l=s,f=!1;4===s.rank&&(f=!0,c=On(u,[1,u.shape[0],u.shape[1],u.shape[2],u.shape[3]]),l=On(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]])),E(5===c.rank,(function(){return"Error in avgPool3dBackprop: dy must be rank 5 but got rank "+c.rank+"."})),E(5===l.rank,(function(){return"Error in avgPool3dBackprop: input must be rank 5 but got rank "+l.rank+"."})),E(ir(r,o),(function(){return"Error in avgPool3dBackprop: Either strides or dilations must be 1. Got strides "+r+" and dilations '"+o+"'"})),null!=i&&E(T(a),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+a+"."}));var p={dy:c,input:l},h={filterSize:e,strides:r,dilations:o,pad:a,dimRoundingMode:i},d=Tt.runKernelFunc((function(t){var n=Xe(l.shape,e,r,o,a,i);return t.avgPool3dBackprop(c,l,n)}),p,null,"AvgPool3DBackprop",h);return f?On(d,[d.shape[1],d.shape[2],d.shape[3],d.shape[4]]):d}}),ds={kernelName:"AvgPool3D",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e,a=o.filterSize,i=o.strides,u=o.dilations,s=o.pad,c=o.dimRoundingMode,l=null==u?[1,1,1]:u;return{x:function(){return hs(t,r,a,i,l,s,c)}}}};var vs=qt({avgPoolBackprop_:function(t,n,e,r,o){var a=Lt(t,"dy","avgPoolBackprop"),i=Lt(n,"input","avgPoolBackprop");E(i.rank===a.rank,(function(){return"Rank of input ("+i.rank+") does not match rank of dy ("+a.rank+")"}));var u=i,s=a,c=!1;3===i.rank&&(c=!0,u=On(i,[1,i.shape[0],i.shape[1],i.shape[2]]),s=On(a,[1,a.shape[0],a.shape[1],a.shape[2]])),E(4===s.rank,(function(){return"Error in avgPoolBackprop: dy must be rank 4 but got rank "+s.rank+"."})),E(4===u.rank,(function(){return"Error in avgPoolBackprop: input must be rank 4 but got rank "+u.rank+"."}));var l={dy:s,input:u},f={filterSize:e,strides:r,pad:o},p=Tt.runKernelFunc((function(t){var n=Ze(u.shape,e,r,1,o);return t.avgPoolBackprop(s,u,n)}),l,null,"AvgPoolBackprop",f);return c?On(p,[p.shape[1],p.shape[2],p.shape[3]]):p}}),ms={kernelName:"AvgPool",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e,a=o.filterSize,i=o.strides,u=o.pad;return{x:function(){return vs(t,r,a,i,u)}}}},gs={kernelName:"BatchMatMul",inputsToSave:["a","b"],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.transposeA,s=i.transposeB;return u||s?!u&&s?{a:function(){return Wn(t,a,!1,!1)},b:function(){return Wn(t,o,!0,!1)}}:u&&!s?{a:function(){return Wn(a,t,!1,!0)},b:function(){return Wn(o,t,!1,!1)}}:{a:function(){return Wn(a,t,!0,!0)},b:function(){return Wn(t,o,!0,!0)}}:{a:function(){return Wn(t,a,!1,!0)},b:function(){return Wn(o,t,!0,!1)}}}},ys={kernelName:"BatchToSpaceND",gradFunc:function(t,n,e){var r=e,o=r.blockShape,a=r.crops;return{x:function(){return ua(t,o,a)}}}},bs={kernelName:"BroadcastTo",gradFunc:function(t,n,e){for(var r=e,o=r.inputShape,a=r.shape,i=Array.from(a),u=o.length-1;u>=0;u--)if(o[u]===a[u])i[u]=1;else if(1!==o[u])throw new Error("broadcastTo(): ["+o+"] cannot be broadcast to ["+a+"].");var s=[];for(u=0;u<i.length;u++)i[u]>1&&s.push(u);return{x:function(){return _o(t,s,!0)}}}},ws={kernelName:"Cast",gradFunc:function(t){return{x:function(){return t.clone()}}}},ks={kernelName:"Ceil",gradFunc:function(t){return{x:function(){return Jr(t)}}}},xs={kernelName:"ClipByValue",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e,a=o.clipValueMin,i=o.clipValueMax;return{x:function(){return jr(Co(lo(r,a),wo(r,i)),t,Jr(t))}}}},Ss={kernelName:"Concat",saveAllInputs:!0,gradFunc:function(t,n,e){var r=n.map((function(t){return t.shape})),o=B(e.axis,n[0].shape)[0],a=r.map((function(t){return t[o]}));return ni(t,a,o).map((function(t){return function(){return t}}))}},Es={kernelName:"Conv2D",inputsToSave:["x","filter"],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.dilations,s=i.strides,c=i.pad,l=i.dataFormat;return E(ar(u),(function(){return"Error in gradient of conv2D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+u+"'"})),{x:function(){return _r(o.shape,t,a,s,c,l)},filter:function(){return Ui(o,t,a.shape,s,c,l)}}}},Ds={kernelName:"Conv2DBackpropInput",inputsToSave:["dy","filter"],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.strides,s=i.pad,c=i.dataFormat,l=i.dimRoundingMode;return{dy:function(){return Tr(t,a,u,s,c,1,l)},filter:function(){return Ui(t,o,a.shape,u,s,c,l)}}}};var Ns=qt({conv3DBackpropFilter_:function(t,n,e,r,o){var a=t;4===t.rank&&(a=On(t,[1,t.shape[0],t.shape[1],t.shape[2],t.shape[3]]));var i=n;4===i.rank&&(i=On(n,[1,n.shape[0],n.shape[1],n.shape[2],n.shape[3]])),E(5===a.rank,(function(){return"Error in conv3dDerFilter: input must be rank 5, but got shape "+a.shape+"."})),E(5===i.rank,(function(){return"Error in conv3dDerFilter: dy must be rank 5, but got shape "+i.shape+"."})),E(5===e.length,(function(){return"Error in conv3dDerFilter: filterShape must be length 5, but got "+e+"."})),E(a.shape[4]===e[3],(function(){return"Error in conv3dDerFilter: depth of input "+a.shape[4]+") must match input depth in filter ("+e[3]+"."})),E(i.shape[4]===e[4],(function(){return"Error in conv3dDerFilter: depth of dy ("+i.shape[4]+") must match output depth for filter ("+e[4]+")."}));var u={x:a,y:i},s={strides:r,pad:o};return Tt.runKernelFunc((function(t){var n=Qe(a.shape,e,r,1,o);return t.conv3dDerFilter(a,i,n)}),u,null,"Conv3DBackpropFilterV2",s)}}),Is={kernelName:"Conv3D",inputsToSave:["x","filter"],gradFunc:function(t,n,e){var r=e,o=r.dilations,a=r.strides,i=r.pad;E(ar(o),(function(){return"Error in gradient of conv3D: dilation rates greater than 1 are not yet supported in gradients. Got dilations '"+o+"'"}));var u=n[0],s=n[1];return{x:function(){return Cr(u.shape,t,s,a,i)},filter:function(){return Ns(u,t,s.shape,a,i)}}}},Fs={kernelName:"Cos",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(Io(Ga(En(e,"float32"))),t)}}}},As={kernelName:"Cosh",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(Va(En(e,"float32")),t)}}}},Ts={kernelName:"Cumsum",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e,a=o.axis,i=o.exclusive,u=o.reverse;return{x:function(){var n=ze([a],r.rank),e=qr(t,a,i,!u);return null!=n&&(e=Un(e,n)),e}}}},Ms={kernelName:"DepthwiseConv2dNative",inputsToSave:["x","filter"],gradFunc:function(t,n,e){var r=e,o=r.dilations,a=r.strides,i=r.pad,u=r.dimRoundingMode,s=null==o?[1,1]:o;E(ar(s),(function(){return"Error in gradient of depthwiseConv2dNative: dilation rates greater than 1 are not yet supported. Got dilations '"+s+"'"}));var c=n,l=c[0],f=c[1];E(4===l.rank,(function(){return"Error in gradient of depthwiseConv2dNative: input must be rank 4, but got rank "+l.rank+"."})),E(4===f.rank,(function(){return"Error in gradient of depthwiseConv2dNative: filter must be rank 4, but got rank "+f.rank+"."})),E(l.shape[3]===f.shape[2],(function(){return"Error in gradient of depthwiseConv2d: number of input channels ("+l.shape[3]+") must match the inChannels dimension in filter "+f.shape[2]+"."})),E(ir(a,s),(function(){return"Error in gradient of depthwiseConv2d: Either strides or dilations must be  1. Got strides "+a+" and dilations '"+s+"'."})),null!=u&&E(T(i),(function(){return"Error in depthwiseConv2d: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+i+"."}));var p=$e(l.shape,f.shape,a,s,i,u,!0);return{x:function(){return Zi(l.shape,t,f,p)},filter:function(){return Yi(l,t,f.shape,p)}}}},_s={kernelName:"Dilation2D",inputsToSave:["x","filter"],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i={x:o,filter:a,dy:t},u={x:o,filter:a,dy:t};return{x:function(){return Tt.runKernel("Dilation2DBackpropInput",i,e)},filter:function(){return Tt.runKernel("Dilation2DBackpropFilter",u,e)}}}},Bs={kernelName:"Div",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=Fe(t,En(r,"float32")),a=Gr(e.shape,o);return a.length>0?On(_o(n,a),e.shape):n},b:function(){var n=Ae(t,En(e,"float32")),a=Gr(r.shape,o);a.length>0&&(n=On(_o(n,a),r.shape));var i=Jo(r);return Io(Fe(n,En(i,"float32")))}}}},Rs={kernelName:"Elu",outputsToSave:[!0],gradFunc:function(t,n){var e=n[0],r=function(n){return n.eluDer(t,e)},o={dy:t,y:e};return{x:function(){return Tt.runKernelFunc(r,o,null,"EluGrad")}}}},Cs={kernelName:"Erf",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0],r=Ae(Qr(Io(Jo(e))),2/Math.sqrt(Math.PI));return{x:function(){return Ae(t,r)}}}},Ps={kernelName:"Exp",outputsToSave:[!0],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,e)}}}},Ls={kernelName:"Expm1",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,Qr(e))}}}},zs={kernelName:"Floor",gradFunc:function(t){return{x:function(){return Jr(t)}}}},qs={kernelName:"FloorDiv",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=Fe(t,En(r,"float32")),a=Gr(e.shape,o);return a.length>0?On(_o(n,a),e.shape):n},b:function(){var n=Ae(t,En(e,"float32")),a=Gr(r.shape,o);a.length>0&&(n=On(_o(n,a),r.shape));var i=Jo(r);return Io(Fe(n,En(i,"float32")))}}}},Os={kernelName:"FusedBatchNorm",inputsToSave:["x","mean","variance","scale"],gradFunc:function(t,n,e){var r=e.varianceEpsilon,o=n[0],a=n[1],i=n[2],u=n[3],s=null==u?go(1):u,c=Gr(a.shape,o.shape),l=[];if(1===a.rank){for(var f=0;f<o.shape.length-1;++f)l.push(o.shape[f]);l.push(1)}var p=Mo(o,a),h=Ae(t,s),d=qa(Ne(i,go(r))),v=Ae(Ae(Ae(d,d),d),go(-.5));return{x:function(){return 1===a.rank?On(Ae(Ae(t,eo(On(d,[1,1,1,a.shape[0]]),l)),s),o.shape):On(Ae(Ae(t,d),s),o.shape)},mean:function(){var t=Ae(Ae(d,go(-1)),h);return 1===a.rank&&(t=_o(t,c)),On(t,a.shape)},variance:function(){var t=Ae(Ae(v,p),h);return 1===a.rank&&(t=_o(t,c)),On(t,a.shape)},scale:function(){var n=Ae(p,d),e=Ae(t,n);return 1===a.rank&&(e=_o(e,c)),On(e,a.shape)},offset:function(){var n=t;return 1===a.rank&&(n=_o(n,c)),On(n,a.shape)}}}},Ws={kernelName:"GatherV2",inputsToSave:["x","indices"],gradFunc:function(t,n,e){var r=n[0],o=n[1],a=e.axis,i=B(a,r.shape)[0];return{x:function(){var n=r.shape,e=o.size,u=n.slice(0,i),s=u.length,c=n.slice(a,n.length).slice(1),l=c.length,f=Ks(0,s),p=Ks(s+1,s+1+l),h=Us([u,[e],c]),d=On(t,h),v=On(o,[e]),m=Us([[s],f,p]),g=Un(d,m),y=di(g,v,r.shape[i]),b=qe(m);return y=Un(y,b)},indices:function(){return o}}}};function Ks(t,n){for(var e=[],r=t;r<n;++r)e.push(r);return e}function Us(t){for(var n=[],e=0;e<t.length;++e)for(var r=0;r<t[e].length;++r)n.push(t[e][r]);return n}var Gs={kernelName:"GreaterEqual",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1];return{a:function(){return Jr(e)},b:function(){return Jr(r)}}}},Vs={kernelName:"Identity",gradFunc:function(t){return{x:function(){return En(t,"float32")}}}},Hs={kernelName:"IsFinite",gradFunc:function(t){return{x:function(){return Jr(t)}}}},js={kernelName:"IsInf",gradFunc:function(t){return{x:function(){return Jr(t)}}}},Js={kernelName:"IsNan",gradFunc:function(t){return{x:function(){return Jr(t)}}}},Ys={kernelName:"Log1p",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Ne(e,1))}}}},Zs={kernelName:"Log",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,En(e,"float32"))}}}},Xs={kernelName:"LogSoftmax",inputsToSave:[],outputsToSave:[!0],gradFunc:function(t,n,e){var r=n[0],o=e.axis;return{logits:function(){var n=Qr(r);return Mo(t,Ae(_o(t,o,!0),n))}}}};var $s=qt({localResponseNormalizationBackprop_:function(t,n,e,r,o,a,i){void 0===r&&(r=5),void 0===o&&(o=1),void 0===a&&(a=1),void 0===i&&(i=.5);var u={x:t,y:n,dy:e},s={depthRadius:r,bias:o,alpha:a,beta:i};return Tt.runKernelFunc((function(u){return u.LRNGrad(e,t,n,r,o,a,i)}),u,null,"LRNBackprop",s)}}),Qs={kernelName:"LRN",inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.depthRadius,s=i.bias,c=i.alpha,l=i.beta;return{x:function(){return $s(o,a,t,u,s,c,l)}}}};function tc(t,n,e,r,o){return n.rank<e.rank&&(n=On(n,Le(n.shape,r))),t.rank<e.rank&&(t=On(t,Le(t.shape,r))),{x:function(){var r=Ae(t,En(Hr(e,n),t.dtype));return null==o?r:Un(r,o)}}}var nc={kernelName:"Max",inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(t,n,e){var r=e.reductionIndices,o=n[0],a=n[1],i=B(r,o.shape),u=ze(i,o.rank),s=tc(t,a,o,i,u);return{x:function(){var t=s.x();return null!=u&&(t=Un(t)),t}}}},ec={kernelName:"Maximum",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1];return{a:function(){return Ae(t,En(lo(e,r),"float32"))},b:function(){return Ae(t,En(bo(e,r),"float32"))}}}};var rc=qt({maxPool3dBackprop_:function(t,n,e,r,o,a,i,u){void 0===a&&(a=[1,1,1]);var s=Lt(t,"dy","maxPool3dBackprop"),c=Lt(n,"input","maxPool3dBackprop"),l=Lt(e,"output","maxPool3dBackprop"),f=s,p=c,h=l,d=!1;4===c.rank&&(d=!0,f=On(s,[1,s.shape[0],s.shape[1],s.shape[2],s.shape[3]]),p=On(c,[1,c.shape[0],c.shape[1],c.shape[2],c.shape[3]]),h=On(l,[1,l.shape[0],l.shape[1],l.shape[2],l.shape[3]])),E(5===f.rank,(function(){return"Error in maxPool3dBackprop: dy must be rank 5 but got rank "+f.rank+"."})),E(5===p.rank,(function(){return"Error in maxPool3dBackprop: input must be rank 5 but got rank "+p.rank+"."})),E(5===h.rank,(function(){return"Error in maxPool3dBackprop: output must be rank 5 but got rank "+h.rank+"."})),E(ir(o,a),(function(){return"Error in maxPool3dBackprop: Either strides or dilations must be 1. Got strides "+o+" and dilations '"+a+"'"})),null!=u&&E(T(i),(function(){return"Error in maxPool3dBackprop: pad must be an integer when using, dimRoundingMode "+u+" but got pad "+i+"."}));var v={dy:f,input:p,output:h},m={filterSize:r,strides:o,dilations:a,pad:i,dimRoundingMode:u},g=Tt.runKernelFunc((function(t){var n=Xe(p.shape,r,o,a,i,u);return t.maxPool3dBackprop(f,p,h,n)}),v,null,"MaxPool3DBackprop",m);return d?On(g,[g.shape[1],g.shape[2],g.shape[3],g.shape[4]]):g}}),oc={kernelName:"MaxPool3D",inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.filterSize,s=i.strides,c=i.dilations,l=i.pad,f=i.dimRoundingMode,p=null==c?[1,1,1]:c;return{x:function(){return rc(t,o,a,u,s,p,l,f)}}}};var ac=qt({maxPoolBackprop_:function(t,n,e,r,o,a,i){var u=Lt(t,"dy","maxPoolBackprop"),s=Lt(n,"input","maxPoolBackprop"),c=Lt(e,"output","maxPoolBackprop");E(s.rank===u.rank,(function(){return"Rank of input ("+s.rank+") does not match rank of dy ("+u.rank+")"})),E(4===u.rank,(function(){return"Error in maxPoolBackprop: dy must be rank 4 but got rank "+u.rank+"."})),E(4===s.rank,(function(){return"Error in maxPoolBackprop: input must be rank 4 but got rank "+s.rank+"."})),null!=i&&E(T(a),(function(){return"Error in maxPoolBackprop: pad must be an integer when using, dimRoundingMode "+i+" but got pad "+a+"."}));var l={dy:u,input:s,output:c},f={filterSize:r,strides:o,pad:a,dimRoundingMode:i};return Tt.runKernelFunc((function(t){var n=Ze(s.shape,r,o,1,a,i);return t.maxPoolBackprop(u,s,c,n)}),l,null,"MaxPoolBackprop",f)}}),ic={kernelName:"PadV2",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e.paddings.map((function(t){return t[0]}));return{x:function(){return dr(t,o,r.shape)}}}},uc={kernelName:"SpaceToBatchND",gradFunc:function(t,n,e){var r=e,o=r.blockShape,a=r.paddings;return{x:function(){return gr(t,o,a)}}}},sc={kernelName:"SplitV",gradFunc:function(t,n,e){var r=e.axis;return{x:function(){return pr(t,r)}}}};for(var cc=0,lc=[ns,es,rs,os,as,is,us,ss,cs,ls,fs,ps,ds,ms,gs,ys,bs,ws,ks,xs,Ss,Ds,Es,Is,Fs,As,Ts,Ms,_s,Bs,Rs,Cs,Ps,Ls,qs,zs,Os,Ws,Gs,Vs,Hs,js,Js,Ys,Zs,Xs,Qs,nc,nc,ec,oc,{kernelName:"MaxPool",inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(t,n,e){var r=n,o=r[0],a=r[1],i=e,u=i.filterSize,s=i.strides,c=i.pad;return{x:function(){return ac(t,o,a,u,s,c)}}}},{kernelName:"Min",inputsToSave:["x"],outputsToSave:[!0],gradFunc:function(t,n,e){var r=e.axis,o=n[0],a=n[1],i=B(r,o.shape),u=ze(i,o.rank),s=tc(t,a,o,i,u);return{x:function(){var t=s.x();return null!=u&&(t=Un(t)),t}}}},{kernelName:"Minimum",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1];return{a:function(){return Ae(t,En(wo(e,r),"float32"))},b:function(){return Ae(t,En(co(e,r),"float32"))}}}},{kernelName:"Mod",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=Gr(e.shape,o);return n.length>0?On(_o(t,n),e.shape):t},b:function(){var n=Ae(t,Io(ao(Fe(e,r)))),a=Gr(r.shape,o);return a.length>0?On(_o(n,a),r.shape):n}}}},{kernelName:"Multiply",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=Ae(t,En(r,"float32")),a=Gr(e.shape,o);return a.length>0?On(_o(n,a),e.shape):n},b:function(){var n=Ae(t,En(e,"float32")),a=Gr(r.shape,o);return a.length>0?On(_o(n,a),r.shape):n}}}},{kernelName:"Negate",gradFunc:function(t){return{x:function(){return Io(t)}}}},{kernelName:"OneHot",inputsToSave:["indices"],gradFunc:function(t,n){var e=n[0];return{indices:function(){return Ko(e.shape,"float32")}}}},{kernelName:"OnesLike",gradFunc:function(t){return{x:function(){return Jr(t)}}}},ic,ic,{kernelName:"Pow",inputsToSave:["a","b"],outputsToSave:[!0],gradFunc:function(t,n){var e=n[0],r=n[1],o=n[2],a=e,i=r,u=Vr(a.shape,i.shape);return{a:function(){var n=En(i,"float32"),e=Ae(t,Ae(n,ca(a,Mo(n,go(1))))),r=Gr(a.shape,u);return r.length>0&&(e=_o(e,r)),On(e,a.shape)},b:function(){var n=co(a,0),e=jr(n,xo(a),Jr(a)),r=Ae(t,Ae(o,e)),s=Gr(i.shape,u);return s.length>0&&(r=_o(r,s)),On(r,i.shape)}}}},{kernelName:"Prelu",inputsToSave:["x","alpha"],gradFunc:function(t,n){var e=n[0],r=n[1],o=co(e,0);return{x:function(){return jr(o,t,Ae(t,r))},alpha:function(){var n=jr(o,Jr(t),Ae(t,e)),a=Gr(r.shape,t.shape);return a.length>0&&(n=_o(n,a)),On(n,r.shape)}}}},{kernelName:"Reciprocal",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Io(Jo(e)))}}}},{kernelName:"Relu6",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0],r=Ae(wo(e,6),ui(e));return{x:function(){return Ae(t,En(r,"float32"))}}}},{kernelName:"Relu",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,En(ui(e),"float32"))}}}},{kernelName:"Reshape",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return On(t,e.shape)}}}},{kernelName:"ResizeBilinear",inputsToSave:["images"],gradFunc:function(t,n,e){var r=n[0],o=function(n){var o=e.alignCorners;return n.resizeBilinearBackprop(t,r,o)},a={images:r};return{images:function(){return Tt.runKernelFunc(o,a,null,"ResizeBilinearGrad",e)}}}},{kernelName:"ResizeNearestNeighbor",inputsToSave:["images"],gradFunc:function(t,n,e){var r=n[0],o=function(n){var o=e.alignCorners;return n.resizeNearestNeighborBackprop(t,r,o)},a={images:r};return{images:function(){return Tt.runKernelFunc(o,a,null,"ResizeNearestNeighborGrad",e)}}}},{kernelName:"Reverse",gradFunc:function(t,n,e){var r=B(e.dims,t.shape);return{x:function(){return Ba(t,r)}}}},{kernelName:"Round",gradFunc:function(t){return{x:function(){return Jr(t)}}}},{kernelName:"Rsqrt",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Io(Fe(t,Ae(ca(e,1.5),2)))}}}},{kernelName:"SelectV2",inputsToSave:["condition"],gradFunc:function(t,n){var e=n[0];return{condition:function(){return En(Jr(e),"float32")},t:function(){return Ae(t,En(e,t.dtype))},e:function(){return Ae(t,En(Po(e),t.dtype))}}}},{kernelName:"Selu",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){var n=co(e,go(0)),r=go(1.7580993408473768),o=go(1.0507009873554805),a=Ae(t,o),i=Ae(Ae(t,r),Qr(En(e,"float32")));return jr(n,a,i)}}}},{kernelName:"Sigmoid",outputsToSave:[!0],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,Ae(e,Mo(go(1),e)))}}}},{kernelName:"Sign",gradFunc:function(t){return{x:function(){return Jr(t)}}}},{kernelName:"Sin",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(Lr(En(e,"float32")),t)}}}},{kernelName:"Sinh",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(zr(En(e,"float32")),t)}}}},{kernelName:"Slice",inputsToSave:["x"],gradFunc:function(t,n,e){for(var r=n[0],o=e,a=o.begin,i=o.size,u=r.shape,s=pe(r,a,i),c=s[0],l=s[1],f=[],p=0;p<t.rank;p++)f.push([c[p],u[p]-c[p]-l[p]]);return{x:function(){return ea(t,f)}}}},{kernelName:"Softmax",outputsToSave:[!0],gradFunc:function(t,n,e){var r=n[0],o=e.dim,a=Ae(t,r);return{logits:function(){return Mo(a,Ae(_o(a,[o],!0),r))}}}},{kernelName:"Softplus",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,hr(e))}}}},uc,uc,sc,sc,{kernelName:"Sqrt",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Ae(ri(En(e,"float32")),2))}}}},{kernelName:"SquaredDifference",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=go(2);return{a:function(){return Ae(t,Ae(o,Mo(e,r)))},b:function(){return Ae(t,Ae(o,Mo(r,e)))}}}},{kernelName:"Square",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(t,Ae(En(e,"float32"),2))}}}},{kernelName:"Step",gradFunc:function(t){return{x:function(){return Jr(t)}}}},{kernelName:"Sub",inputsToSave:["a","b"],gradFunc:function(t,n){var e=n[0],r=n[1],o=Vr(e.shape,r.shape);return{a:function(){var n=t,r=Gr(e.shape,o);return r.length>0&&(n=_o(n,r)),On(n,e.shape)},b:function(){var n=t,e=Gr(r.shape,o);return e.length>0&&(n=_o(n,e)),On(Io(n),r.shape)}}}},{kernelName:"Sum",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=r.shape.slice();B(e.axis,r.shape).forEach((function(t){o[t]=1}));var a=On(t,o),i=Ae(a,Uo(r.shape,"float32"));return{x:function(){return i}}}},{kernelName:"Tan",inputsToSave:["x"],gradFunc:function(t,n){var e=n[0];return{x:function(){return Fe(t,Jo(Lr(e)))}}}},{kernelName:"Tanh",outputsToSave:[!0],gradFunc:function(t,n){var e=n[0];return{x:function(){return Ae(Mo(go(1),Jo(e)),t)}}}},{kernelName:"Tile",inputsToSave:["x"],gradFunc:function(t,n,e){var r=n[0],o=e.reps;return{x:function(){var n=Jr(r);if(1===r.rank)for(var e=0;e<o[0];++e)n=Ne(n,dr(t,[e*r.shape[0]],[r.shape[0]]));else if(2===r.rank)for(e=0;e<o[0];++e)for(var a=0;a<o[1];++a)n=Ne(n,dr(t,[e*r.shape[0],a*r.shape[1]],[r.shape[0],r.shape[1]]));else if(3===r.rank)for(e=0;e<o[0];++e)for(a=0;a<o[1];++a)for(var i=0;i<o[2];++i)n=Ne(n,dr(t,[e*r.shape[0],a*r.shape[1],i*r.shape[2]],[r.shape[0],r.shape[1],r.shape[2]]));else{if(4!==r.rank)throw new Error("Gradient for tile operation is not implemented for rank-"+r.rank+" tensors yet.");for(e=0;e<o[0];++e)for(a=0;a<o[1];++a)for(i=0;i<o[2];++i)for(var u=0;u<o[3];++u)n=Ne(n,dr(t,[e*r.shape[0],a*r.shape[1],i*r.shape[2],u*r.shape[3]],[r.shape[0],r.shape[1],r.shape[2],r.shape[3]]))}return n}}}},{kernelName:"Transpose",gradFunc:function(t,n,e){var r=qe(e.perm);return{x:function(){return Un(t,r)}}}},{kernelName:"Unpack",gradFunc:function(t,n,e){var r=e.axis;return{value:function(){return ii(t,r)}}}},{kernelName:"UnsortedSegmentSum",inputsToSave:["segmentIds"],gradFunc:function(t,n){var e=n[0];return{x:function(){return function(t,n){for(var e=mo(n,Jr(n)),r=so(t,e),o=lo(n,go(0,"int32")),a=r.rank-o.rank,i=0;i<a;++i)o=to(o,i+1);o=Co(o,Uo(r.shape,"bool"));var u=Jr(r);return jr(o,r,u)}(t,e)}}}},{kernelName:"ZerosLike",gradFunc:function(t){return{x:function(){return Jr(t)}}}}];cc<lc.length;cc++){w(lc[cc])}dt.prototype.abs=function(){return this.throwIfDisposed(),Te(this)},dt.prototype.acos=function(){return this.throwIfDisposed(),Me(this)},dt.prototype.acosh=function(){return this.throwIfDisposed(),_e(this)},dt.prototype.addStrict=function(t){return this.throwIfDisposed(),Di(this,t)},dt.prototype.add=function(t){return this.throwIfDisposed(),Ne(this,t)},dt.prototype.all=function(t,n){return this.throwIfDisposed(),We(this,t,n)},dt.prototype.any=function(t,n){return this.throwIfDisposed(),Ke(this,t,n)},dt.prototype.argMax=function(t){return this.throwIfDisposed(),Ue(this,t)},dt.prototype.argMin=function(t){return this.throwIfDisposed(),Ge(this,t)},dt.prototype.asScalar=function(){return this.throwIfDisposed(),E(1===this.size,(function(){return"The array must have only 1 element."})),On(this,[])},dt.prototype.asType=function(t){return this.throwIfDisposed(),En(this,t)},dt.prototype.as1D=function(){return this.throwIfDisposed(),On(this,[this.size])},dt.prototype.as2D=function(t,n){return this.throwIfDisposed(),On(this,[t,n])},dt.prototype.as3D=function(t,n,e){return this.throwIfDisposed(),On(this,[t,n,e])},dt.prototype.as4D=function(t,n,e,r){return this.throwIfDisposed(),On(this,[t,n,e,r])},dt.prototype.as5D=function(t,n,e,r,o){return this.throwIfDisposed(),On(this,[t,n,e,r,o])},dt.prototype.asin=function(){return this.throwIfDisposed(),Ve(this)},dt.prototype.asinh=function(){return this.throwIfDisposed(),He(this)},dt.prototype.atan=function(){return this.throwIfDisposed(),je(this)},dt.prototype.atan2=function(t){return this.throwIfDisposed(),Je(this,t)},dt.prototype.atanh=function(){return this.throwIfDisposed(),Ye(this)},dt.prototype.avgPool=function(t,n,e,r){return this.throwIfDisposed(),sr(this,t,n,e,r)},dt.prototype.batchToSpaceND=function(t,n){return this.throwIfDisposed(),gr(this,t,n)},dt.prototype.batchNorm=function(t,n,e,r,o){return this.throwIfDisposed(),br(this,t,n,e,r,o)},dt.prototype.broadcastTo=function(t){return this.throwIfDisposed(),Sr(this,t)},dt.prototype.cast=function(t){return this.throwIfDisposed(),En(this,t)},dt.prototype.ceil=function(){return this.throwIfDisposed(),Er(this)},dt.prototype.clipByValue=function(t,n){return this.throwIfDisposed(),Dr(this,t,n)},dt.prototype.concat=function(t,n){return this.throwIfDisposed(),t instanceof dt&&(t=[t]),pr([this].concat(t),n)},dt.prototype.conv1d=function(t,n,e,r,o,a){return this.throwIfDisposed(),Mr(this,t,n,e,r,o,a)},dt.prototype.conv2dTranspose=function(t,n,e,r,o){return this.throwIfDisposed(),Br(this,t,n,e,r,o)},dt.prototype.conv2d=function(t,n,e,r,o,a){return this.throwIfDisposed(),Tr(this,t,n,e,r,o,a)},dt.prototype.cos=function(){return this.throwIfDisposed(),Lr(this)},dt.prototype.cosh=function(){return this.throwIfDisposed(),zr(this)},dt.prototype.cumsum=function(t,n,e){return this.throwIfDisposed(),qr(this,t,n,e)},dt.prototype.depthToSpace=function(t,n){return this.throwIfDisposed(),Or(this,t,n)},dt.prototype.depthwiseConv2D=function(t,n,e,r,o,a){return xe("depthwiseConv2D is deprecated, use depthwiseConv2d instead"),this.throwIfDisposed(),Wr(this,t,n,e,r,o,a)},dt.prototype.depthwiseConv2d=function(t,n,e,r,o,a){return this.throwIfDisposed(),Wr(this,t,n,e,r,o,a)},dt.prototype.dilation2d=function(t,n,e,r,o){return this.throwIfDisposed(),Ur(this,t,n,e,r,o)},dt.prototype.divNoNan=function(t){return this.throwIfDisposed(),Yr(this,t)},dt.prototype.divStrict=function(t){return this.throwIfDisposed(),Ni(this,t)},dt.prototype.div=function(t){return this.throwIfDisposed(),Fe(this,t)},dt.prototype.dot=function(t){return this.throwIfDisposed(),Zr(this,t)},dt.prototype.elu=function(){return this.throwIfDisposed(),Xr(this)},dt.prototype.equalStrict=function(t){return this.throwIfDisposed(),bi(this,t)},dt.prototype.equal=function(t){return this.throwIfDisposed(),Hr(this,t)},dt.prototype.erf=function(){return this.throwIfDisposed(),$r(this)},dt.prototype.exp=function(){return this.throwIfDisposed(),Qr(this)},dt.prototype.expandDims=function(t){return this.throwIfDisposed(),to(this,t)},dt.prototype.expm1=function(){return this.throwIfDisposed(),no(this)},dt.prototype.fft=function(){return this.throwIfDisposed(),Xa(this)},dt.prototype.flatten=function(){return this.throwIfDisposed(),On(this,[this.size])},dt.prototype.floor=function(){return this.throwIfDisposed(),ao(this)},dt.prototype.floorDiv=function(t){return this.throwIfDisposed(),Ie(this,t)},dt.prototype.gather=function(t,n){return this.throwIfDisposed(),so(this,t,n)},dt.prototype.greaterEqualStrict=function(t){return this.throwIfDisposed(),wi(this,t)},dt.prototype.greaterEqual=function(t){return this.throwIfDisposed(),lo(this,t)},dt.prototype.greaterStrict=function(t){return this.throwIfDisposed(),ki(this,t)},dt.prototype.greater=function(t){return this.throwIfDisposed(),co(this,t)},dt.prototype.ifft=function(){return this.throwIfDisposed(),$a(this)},dt.prototype.irfft=function(){return this.throwIfDisposed(),Qa(this)},dt.prototype.isFinite=function(){return this.throwIfDisposed(),po(this)},dt.prototype.isInf=function(){return this.throwIfDisposed(),ho(this)},dt.prototype.isNaN=function(){return this.throwIfDisposed(),vo(this)},dt.prototype.leakyRelu=function(t){return this.throwIfDisposed(),yo(this,t)},dt.prototype.lessEqualStrict=function(t){return this.throwIfDisposed(),xi(this,t)},dt.prototype.lessEqual=function(t){return this.throwIfDisposed(),wo(this,t)},dt.prototype.lessStrict=function(t){return this.throwIfDisposed(),Si(this,t)},dt.prototype.less=function(t){return this.throwIfDisposed(),bo(this,t)},dt.prototype.localResponseNormalization=function(t,n,e,r){return this.throwIfDisposed(),ko(this,t,n,e,r)},dt.prototype.logSigmoid=function(){return this.throwIfDisposed(),Ao(this)},dt.prototype.logSoftmax=function(t){return this.throwIfDisposed(),Bo(this,t)},dt.prototype.logSumExp=function(t,n){return this.throwIfDisposed(),Ro(this,t,n)},dt.prototype.log=function(){return this.throwIfDisposed(),xo(this)},dt.prototype.log1p=function(){return this.throwIfDisposed(),So(this)},dt.prototype.logicalAnd=function(t){return this.throwIfDisposed(),Co(this,t)},dt.prototype.logicalNot=function(){return this.throwIfDisposed(),Po(this)},dt.prototype.logicalOr=function(t){return this.throwIfDisposed(),Lo(this,t)},dt.prototype.logicalXor=function(t){return this.throwIfDisposed(),zo(this,t)},dt.prototype.matMul=function(t,n,e){return this.throwIfDisposed(),Wn(this,t,n,e)},dt.prototype.maxPool=function(t,n,e,r){return this.throwIfDisposed(),qo(this,t,n,e,r)},dt.prototype.max=function(t,n){return this.throwIfDisposed(),To(this,t,n)},dt.prototype.maximumStrict=function(t){return this.throwIfDisposed(),Ii(this,t)},dt.prototype.maximum=function(t){return this.throwIfDisposed(),mo(this,t)},dt.prototype.mean=function(t,n){return this.throwIfDisposed(),Go(this,t,n)},dt.prototype.min=function(t,n){return this.throwIfDisposed(),Vo(this,t,n)},dt.prototype.minimumStrict=function(t){return this.throwIfDisposed(),Fi(this,t)},dt.prototype.minimum=function(t){return this.throwIfDisposed(),Ho(this,t)},dt.prototype.modStrict=function(t){return this.throwIfDisposed(),Ai(this,t)},dt.prototype.mod=function(t){return this.throwIfDisposed(),jo(this,t)},dt.prototype.mulStrict=function(t){return this.throwIfDisposed(),Ti(this,t)},dt.prototype.mul=function(t){return this.throwIfDisposed(),Ae(this,t)},dt.prototype.neg=function(){return this.throwIfDisposed(),Io(this)},dt.prototype.norm=function(t,n,e){return this.throwIfDisposed(),Ri(this,t,n,e)},dt.prototype.notEqualStrict=function(t){return this.throwIfDisposed(),Ei(this,t)},dt.prototype.notEqual=function(t){return this.throwIfDisposed(),$o(this,t)},dt.prototype.oneHot=function(t,n,e){return void 0===n&&(n=1),void 0===e&&(e=0),this.throwIfDisposed(),Kn(this,t,n,e)},dt.prototype.onesLike=function(){return this.throwIfDisposed(),ta(this)},dt.prototype.pad=function(t,n){return this.throwIfDisposed(),ea(this,t,n)},dt.prototype.pool=function(t,n,e,r,o){return this.throwIfDisposed(),sa(this,t,n,e,r,o)},dt.prototype.powStrict=function(t){return this.throwIfDisposed(),Mi(this,t)},dt.prototype.pow=function(t){return this.throwIfDisposed(),ca(this,t)},dt.prototype.prelu=function(t){return this.throwIfDisposed(),la(this,t)},dt.prototype.prod=function(t,n){return this.throwIfDisposed(),fa(this,t,n)},dt.prototype.reciprocal=function(){return this.throwIfDisposed(),Ta(this)},dt.prototype.relu=function(){return this.throwIfDisposed(),Ma(this)},dt.prototype.relu6=function(){return this.throwIfDisposed(),_a(this)},dt.prototype.reshapeAs=function(t){return this.throwIfDisposed(),On(this,t.shape)},dt.prototype.reshape=function(t){return this.throwIfDisposed(),On(this,t)},dt.prototype.resizeBilinear=function(t,n){return this.throwIfDisposed(),ku(this,t,n)},dt.prototype.resizeNearestNeighbor=function(t,n){return this.throwIfDisposed(),xu(this,t,n)},dt.prototype.reverse=function(t){return this.throwIfDisposed(),Ba(this,t)},dt.prototype.rfft=function(){return this.throwIfDisposed(),ei(this)},dt.prototype.round=function(){return this.throwIfDisposed(),za(this)},dt.prototype.rsqrt=function(){return this.throwIfDisposed(),qa(this)},dt.prototype.selu=function(){return this.throwIfDisposed(),Oa(this)},dt.prototype.separableConv2d=function(t,n,e,r,o,a){return this.throwIfDisposed(),Wa(this,t,n,e,r,o,a)},dt.prototype.sigmoid=function(){return this.throwIfDisposed(),hr(this)},dt.prototype.sign=function(){return this.throwIfDisposed(),Ua(this)},dt.prototype.sin=function(){return this.throwIfDisposed(),Ga(this)},dt.prototype.sinh=function(){return this.throwIfDisposed(),Va(this)},dt.prototype.slice=function(t,n){return this.throwIfDisposed(),dr(this,t,n)},dt.prototype.softmax=function(t){return this.throwIfDisposed(),Za(this,t)},dt.prototype.softplus=function(){return this.throwIfDisposed(),Fo(this)},dt.prototype.spaceToBatchND=function(t,n){return this.throwIfDisposed(),ua(this,t,n)},dt.prototype.split=function(t,n){return this.throwIfDisposed(),ni(this,t,n)},dt.prototype.sqrt=function(){return this.throwIfDisposed(),ri(this)},dt.prototype.square=function(){return this.throwIfDisposed(),Jo(this)},dt.prototype.squaredDifference=function(t){return this.throwIfDisposed(),oi(this,t)},dt.prototype.squaredDifferenceStrict=function(t){return this.throwIfDisposed(),_i(this,t)},dt.prototype.squeeze=function(t){return this.throwIfDisposed(),ai(this,t)},dt.prototype.stack=function(t,n){this.throwIfDisposed();var e=t instanceof dt?[this,t]:[this].concat(t);return ii(e,n)},dt.prototype.step=function(t){return this.throwIfDisposed(),ui(this,t)},dt.prototype.stridedSlice=function(t,n,e,r,o,a,i,u){return this.throwIfDisposed(),si(this,t,n,e,r,o,a,i,u)},dt.prototype.subStrict=function(t){return this.throwIfDisposed(),Bi(this,t)},dt.prototype.sub=function(t){return this.throwIfDisposed(),Mo(this,t)},dt.prototype.sum=function(t,n){return this.throwIfDisposed(),_o(this,t,n)},dt.prototype.tan=function(){return this.throwIfDisposed(),ci(this)},dt.prototype.tanh=function(){return this.throwIfDisposed(),vr(this)},dt.prototype.tile=function(t){return this.throwIfDisposed(),eo(this,t)},dt.prototype.toBool=function(){return this.throwIfDisposed(),En(this,"bool")},dt.prototype.toFloat=function(){return this.throwIfDisposed(),En(this,"float32")},dt.prototype.toInt=function(){return this.throwIfDisposed(),En(this,"int32")},dt.prototype.topk=function(t,n){return this.throwIfDisposed(),fi(this,t,n)},dt.prototype.transpose=function(t){return this.throwIfDisposed(),Un(this,t)},dt.prototype.unique=function(t){return this.throwIfDisposed(),hi(this,t)},dt.prototype.unsortedSegmentSum=function(t,n){return this.throwIfDisposed(),di(this,t,n)},dt.prototype.unstack=function(t){return this.throwIfDisposed(),vi(this,t)},dt.prototype.where=function(t,n){return this.throwIfDisposed(),jr(t,this,n)},dt.prototype.zerosLike=function(){return this.throwIfDisposed(),Jr(this)},t.Abs="Abs",t.Acos="Acos",t.Acosh="Acosh",t.AdadeltaOptimizer=Uu,t.AdagradOptimizer=Gu,t.AdamOptimizer=Vu,t.AdamaxOptimizer=Hu,t.Add="Add",t.AddN="AddN",t.All="All",t.Any="Any",t.ArgMax="ArgMax",t.ArgMin="ArgMin",t.Asin="Asin",t.Asinh="Asinh",t.Atan="Atan",t.Atan2="Atan2",t.Atanh="Atanh",t.AvgPool="AvgPool",t.AvgPool3D="AvgPool3D",t.AvgPool3DBackprop="AvgPool3DBackprop",t.AvgPoolBackprop="AvgPoolBackprop",t.BatchMatMul="BatchMatMul",t.BatchToSpaceND="BatchToSpaceND",t.BroadcastTo="BroadcastTo",t.Cast="Cast",t.Ceil="Ceil",t.ClipByValue="ClipByValue",t.Complex="Complex",t.Concat="Concat",t.Conv2D="Conv2D",t.Conv2DBackpropFilter="Conv2DBackpropFilter",t.Conv2DBackpropInput="Conv2DBackpropInput",t.Conv3D="Conv3D",t.Conv3DBackpropFilterV2="Conv3DBackpropFilterV2",t.Conv3DBackpropInputV2="Conv3DBackpropInputV2",t.Cos="Cos",t.Cosh="Cosh",t.CropAndResize="CropAndResize",t.Cumsum="Cumsum",t.DataStorage=a,t.DepthToSpace="DepthToSpace",t.DepthwiseConv2dNative="DepthwiseConv2dNative",t.DepthwiseConv2dNativeBackpropFilter="DepthwiseConv2dNativeBackpropFilter",t.DepthwiseConv2dNativeBackpropInput="DepthwiseConv2dNativeBackpropInput",t.Diag="Diag",t.Dilation2D="Dilation2D",t.Dilation2DBackpropFilter="Dilation2DBackpropFilter",t.Dilation2DBackpropInput="Dilation2DBackpropInput",t.Div="Div",t.Elu="Elu",t.EluGrad="EluGrad",t.Environment=c,t.Equal="Equal",t.Erf="Erf",t.Exp="Exp",t.Expm1="Expm1",t.FFT="FFT",t.Fill="Fill",t.FlipLeftRight="FlipLeftRight",t.Floor="Floor",t.FloorDiv="FloorDiv",t.FromPixels="FromPixels",t.FusedBatchNorm="FusedBatchNorm",t.FusedConv2D="FusedConv2D",t.FusedDepthwiseConv2D="FusedDepthwiseConv2D",t.GatherNd="GatherNd",t.GatherV2="GatherV2",t.Greater="Greater",t.GreaterEqual="GreaterEqual",t.IFFT="IFFT",t.Identity="Identity",t.Imag="Imag",t.IsFinite="IsFinite",t.IsInf="IsInf",t.IsNan="IsNan",t.KernelBackend=i,t.LRN="LRN",t.LRNBackprop="LRNBackprop",t.Less="Less",t.LessEqual="LessEqual",t.LinSpace="LinSpace",t.Log="Log",t.Log1p="Log1p",t.LogSoftmax="LogSoftmax",t.LogicalAnd="LogicalAnd",t.LogicalNot="LogicalNot",t.LogicalOr="LogicalOr",t.Max="Max",t.MaxPool="MaxPool",t.MaxPool3D="MaxPool3D",t.MaxPool3DBackprop="MaxPool3DBackprop",t.MaxPoolBackprop="MaxPoolBackprop",t.MaxPoolWithArgmax="MaxPoolWithArgmax",t.Maximum="Maximum",t.Mean="Mean",t.Min="Min",t.Minimum="Minimum",t.Mod="Mod",t.MomentumOptimizer=Ju,t.Multiply="Multiply",t.Negate="Negate",t.NonMaxSuppressionV3="NonMaxSuppressionV3",t.NonMaxSuppressionV4="NonMaxSuppressionV4",t.NonMaxSuppressionV5="NonMaxSuppressionV5",t.NotEqual="NotEqual",t.OP_SCOPE_SUFFIX="__op",t.OneHot="OneHot",t.OnesLike="OnesLike",t.Optimizer=Ku,t.PadV2="PadV2",t.Pool="Pool",t.Pow="Pow",t.Prelu="Prelu",t.Prod="Prod",t.RMSPropOptimizer=Yu,t.Range="Range",t.Real="Real",t.Reciprocal="Reciprocal",t.Relu="Relu",t.Relu6="Relu6",t.Reshape="Reshape",t.ResizeBilinear="ResizeBilinear",t.ResizeBilinearGrad="ResizeBilinearGrad",t.ResizeNearestNeighbor="ResizeNearestNeighbor",t.ResizeNearestNeighborGrad="ResizeNearestNeighborGrad",t.Reverse="Reverse",t.RotateWithOffset="RotateWithOffset",t.Round="Round",t.Rsqrt="Rsqrt",t.SGDOptimizer=ju,t.ScatterNd="ScatterNd",t.SelectV2="SelectV2",t.Selu="Selu",t.Sigmoid="Sigmoid",t.Sign="Sign",t.Sin="Sin",t.Sinh="Sinh",t.Slice="Slice",t.Softmax="Softmax",t.Softplus="Softplus",t.SpaceToBatchND="SpaceToBatchND",t.SparseToDense="SparseToDense",t.SplitV="SplitV",t.Sqrt="Sqrt",t.Square="Square",t.SquaredDifference="SquaredDifference",t.Step="Step",t.StridedSlice="StridedSlice",t.Sub="Sub",t.Sum="Sum",t.Tan="Tan",t.Tanh="Tanh",t.Tensor=dt,t.TensorBuffer=ft,t.Tile="Tile",t.TopK="TopK",t.Transpose="Transpose",t.Unique="Unique",t.Unpack="Unpack",t.UnsortedSegmentSum="UnsortedSegmentSum",t.Variable=wt,t.ZerosLike="ZerosLike",t._FusedMatMul="_FusedMatMul",t.abs=Te,t.acos=Me,t.acosh=_e,t.add=Ne,t.addN=Be,t.addStrict=Di,t.all=We,t.any=Ke,t.argMax=Ue,t.argMin=Ge,t.asin=Ve,t.asinh=He,t.atan=je,t.atan2=Je,t.atanh=Ye,t.avgPool=sr,t.avgPool3d=cr,t.backend=function(){return Tt.backend},t.backend_util=Qu,t.basicLSTMCell=mr,t.batchNorm=br,t.batchNorm2d=wr,t.batchNorm3d=kr,t.batchNorm4d=xr,t.batchToSpaceND=gr,t.booleanMaskAsync=yi,t.broadcastTo=Sr,t.browser=jn,t.buffer=Sn,t.cast=En,t.ceil=Er,t.clipByValue=Dr,t.clone=Dn,t.complex=Ot,t.concat=pr,t.concat1d=Nr,t.concat2d=Ir,t.concat3d=Fr,t.concat4d=Ar,t.conv1d=Mr,t.conv2d=Tr,t.conv2dTranspose=Br,t.conv3d=Rr,t.conv3dTranspose=Pr,t.copyRegisteredKernels=function(t,n){y(t).forEach((function(t){b(Object.assign({},t,{backendName:n}))}))},t.cos=Lr,t.cosh=zr,t.cosineWindow=Wi,t.cumsum=qr,t.customGrad=Do,t.deprecationWarn=xe,t.depthToSpace=Or,t.depthwiseConv2d=Wr,t.device_util=Bt,t.diag=Kr,t.dilation2d=Ur,t.disableDeprecationWarnings=function(){f().set("DEPRECATION_WARNINGS_ENABLED",!1),console.warn("TensorFlow.js deprecation warnings have been disabled.")},t.dispose=Ee,t.disposeVariables=function(){Tt.disposeVariables()},t.div=Fe,t.divNoNan=Yr,t.divStrict=Ni,t.dot=Zr,t.dropout=qi,t.elu=Xr,t.enableDebugMode=function(){f().set("DEBUG",!0)},t.enableProdMode=function(){f().set("PROD",!0)},t.enclosingPowerOfTwo=Oi,t.engine=function(){return Tt},t.env=f,t.equal=Hr,t.equalStrict=bi,t.erf=$r,t.exp=Qr,t.expandDims=to,t.expm1=no,t.eye=ro,t.fft=Xa,t.fill=oo,t.findBackend=function(t){return Tt.findBackend(t)},t.findBackendFactory=function(t){return Tt.findBackendFactory(t)},t.floor=ao,t.floorDiv=Ie,t.fused=Xi,t.gather=so,t.gatherND=zi,t.gather_util=Yn,t.getBackend=function(){return Tt.backendName},t.getGradient=g,t.getKernel=m,t.getKernelsForBackend=y,t.grad=function(t){return E(j(t),(function(){return"The f passed in grad(f) must be a function"})),function(n,e){var r=Lt(n,"x","tf.grad",null),o=null!=e?Lt(e,"dy","tf.grad"):null;return Tt.tidy((function(){var n=Tt.gradients((function(){return t(r)}),[r],o),e=n.value,a=n.grads;return null!=o&&D(e.shape,o.shape,"The shape of dy passed in grad(f)(x, dy) must match the shape returned by f(x)"),No(a),a[0]}))}},t.grads=function(t){return E(j(t),(function(){return"The f passed in grads(f) must be a function"})),function(n,e){E(Array.isArray(n),(function(){return"The args passed in grads(f)(args) must be an array of `Tensor`s or `TensorLike`s"}));var r=zt(n,"args","tf.grads",null),o=null!=e?Lt(e,"dy","tf.grads"):null;return Tt.tidy((function(){var n=Tt.gradients((function(){return t.apply(void 0,r)}),r,o),e=n.value,a=n.grads;return null!=o&&D(e.shape,o.shape,"The shape of dy passed in grads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),No(a),a}))}},t.greater=co,t.greaterEqual=lo,t.greaterEqualStrict=wi,t.greaterStrict=ki,t.ifft=$a,t.imag=fo,t.image=qu,t.inTopKAsync=Ki,t.io=qn,t.irfft=Qa,t.isFinite=po,t.isInf=ho,t.isNaN=vo,t.keep=De,t.kernel_impls=ts,t.leakyRelu=yo,t.less=bo,t.lessEqual=wo,t.lessEqualStrict=xi,t.lessStrict=Si,t.linalg=Ou,t.linspace=function(t,n,e){if(e<=0)throw new Error("The number of values should be positive.");var r={start:t,stop:n,num:e};return Tt.runKernelFunc((function(r){return r.linspace(t,n,e)}),{},null,"LinSpace",r)},t.localResponseNormalization=ko,t.log=xo,t.log1p=So,t.logSigmoid=Ao,t.logSoftmax=Bo,t.logSumExp=Ro,t.logicalAnd=Co,t.logicalNot=Po,t.logicalOr=Lo,t.logicalXor=zo,t.losses=Wu,t.matMul=Wn,t.math=Vn,t.max=To,t.maxPool=qo,t.maxPool3d=Oo,t.maxPoolWithArgmax=Wo,t.maximum=mo,t.maximumStrict=Ii,t.mean=Go,t.memory=function(){return Tt.memory()},t.min=Vo,t.minimum=Ho,t.minimumStrict=Fi,t.mod=jo,t.modStrict=Ai,t.moments=Yo,t.movingAverage=Ci,t.mul=Ae,t.mulStrict=Ti,t.multiRNNCell=Zo,t.multinomial=Xo,t.neg=Io,t.nextFrame=function(){return new Promise((function(t){return $u((function(){return t()}))}))},t.norm=Ri,t.notEqual=$o,t.notEqualStrict=Ei,t.oneHot=Kn,t.ones=Uo,t.onesLike=ta,t.op=qt,t.outerProduct=na,t.pad=ea,t.pad1d=ra,t.pad2d=oa,t.pad3d=aa,t.pad4d=ia,t.pool=sa,t.pow=ca,t.powStrict=Mi,t.prelu=la,t.print=Nn,t.prod=fa,t.profile=function(t){return Tt.profile(t)},t.rand=pa,t.randomGamma=Da,t.randomNormal=Na,t.randomUniform=Ia,t.range=Aa,t.ready=function(){return Tt.ready()},t.real=Qo,t.reciprocal=Ta,t.registerBackend=function(t,n,e){return void 0===e&&(e=1),Tt.registerBackend(t,n,e)},t.registerGradient=w,t.registerKernel=b,t.relu=Ma,t.relu6=_a,t.removeBackend=function(t){Tt.removeBackend(t)},t.reshape=On,t.reverse=Ba,t.reverse1d=Ra,t.reverse2d=Ca,t.reverse3d=Pa,t.reverse4d=La,t.rfft=ei,t.round=za,t.rsqrt=qa,t.scalar=go,t.scatterND=Pi,t.scatter_util=Qn,t.selu=Oa,t.separableConv2d=Wa,t.serialization=ge,t.setBackend=function(t){return Tt.setBackend(t)},t.setPlatform=function(t,n){f().setPlatform(t,n)},t.setdiff1dAsync=Ka,t.sigmoid=hr,t.sign=Ua,t.signal=zu,t.sin=Ga,t.sinh=Va,t.slice=dr,t.slice1d=Ha,t.slice2d=ja,t.slice3d=Ja,t.slice4d=Ya,t.slice_util=he,t.softmax=Za,t.softplus=Fo,t.spaceToBatchND=ua,t.sparseToDense=Li,t.spectral=Lu,t.split=ni,t.sqrt=ri,t.square=Jo,t.squaredDifference=oi,t.squaredDifferenceStrict=_i,t.squeeze=ai,t.stack=ii,t.step=ui,t.stridedSlice=si,t.sub=Mo,t.subStrict=Bi,t.sum=_o,t.sumOutType=function(t){return xt(t,"int32")},t.tan=ci,t.tanh=vr,t.tensor=Kt,t.tensor1d=Fa,t.tensor2d=li,t.tensor3d=Hn,t.tensor4d=function(t,n,e){if(N(t),null!=n&&4!==n.length)throw new Error("tensor4d() requires shape to have four numbers");var r=Ct(t,e);if(4!==r.length&&1!==r.length)throw new Error("tensor4d() requires values to be number[][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor4d() requires shape to be provided when `values` are a flat array");return Wt(t,n,r,e)},t.tensor5d=function(t,n,e){if(N(t),null!=n&&5!==n.length)throw new Error("tensor5d() requires shape to have five numbers");var r=Ct(t,e);if(5!==r.length&&1!==r.length)throw new Error("tensor5d() requires values to be number[][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor5d() requires shape to be provided when `values` are a flat array");return Wt(t,n,r,e)},t.tensor6d=function(t,n,e){if(N(t),null!=n&&6!==n.length)throw new Error("tensor6d() requires shape to have six numbers");var r=Ct(t,e);if(6!==r.length&&1!==r.length)throw new Error("tensor6d() requires values to be number[][][][][][] or flat/TypedArray");if(1===r.length&&null==n)throw new Error("tensor6d() requires shape to be provided when `values` are a flat array");return Wt(t,n=n||r,r,e)},t.tensor_util=Nt,t.test_util=ke,t.tidy=Se,t.tile=eo,t.time=function(t){return Tt.time(t)},t.topk=fi,t.train=Xu,t.transpose=Un,t.truncatedNormal=pi,t.unique=hi,t.unregisterGradient=function(t){if(!v.has(t))throw new Error("The gradient '"+t+"' for backend is not registered");v.delete(t)},t.unregisterKernel=function(t,n){var e=k(t,n);if(!d.has(e))throw new Error("The kernel '"+t+"' for backend '"+n+"' is not registered");d.delete(e)},t.unsortedSegmentSum=di,t.unstack=vi,t.upcastType=xt,t.util=ot,t.valueAndGrad=function(t){return E(j(t),(function(){return"The f passed in valueAndGrad(f) must be a function"})),function(n,e){E(n instanceof dt,(function(){return"The x passed in valueAndGrad(f)(x) must be a tensor"})),E(null==e||e instanceof dt,(function(){return"The dy passed in valueAndGrad(f)(x, dy) must be a tensor"}));var r=Tt.gradients((function(){return t(n)}),[n],e),o=r.grads,a=r.value;return No(o),{grad:o[0],value:a}}},t.valueAndGrads=function(t){return E(j(t),(function(){return"The f passed in valueAndGrads(f) must be a function"})),function(n,e){E(Array.isArray(n)&&n.every((function(t){return t instanceof dt})),(function(){return"The args passed in valueAndGrads(f)(args) must be array of tensors"})),E(null==e||e instanceof dt,(function(){return"The dy passed in valueAndGrads(f)(args, dy) must be a tensor"}));var r=Tt.gradients((function(){return t.apply(void 0,n)}),n,e);return null!=e&&D(r.value.shape,e.shape,"The shape of dy passed in valueAndGrads(f)([x1,...], dy) must match the shape returned by f([x1,...])"),No(r.grads),r}},t.variable=function(t,n,e,r){return void 0===n&&(n=!0),Tt.makeVariable(t,n,e,r)},t.variableGrads=Eo,t.version_core="2.6.0",t.where=jr,t.whereAsync=gi,t.zeros=Ko,t.zerosLike=Jr,Object.defineProperty(t,"__esModule",{value:!0})}));
//# sourceMappingURL=data:application/json;charset=utf-8;base64,
